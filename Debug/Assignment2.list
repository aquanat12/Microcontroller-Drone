
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b810  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003438  0800b9a0  0800b9a0  0001b9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edd8  0800edd8  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800edd8  0800edd8  0001edd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ede0  0800ede0  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ede0  0800ede0  0001ede0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ede4  0800ede4  0001ede4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800ede8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  200002d8  0800f0c0  000202d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  0800f0c0  00020918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010add  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d0a  00000000  00000000  00030de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00033af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  000349b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296ab  00000000  00000000  000356d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eb2  00000000  00000000  0005ed7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d12  00000000  00000000  00071c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016793f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005688  00000000  00000000  00167990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0016d018  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  0016d03c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b988 	.word	0x0800b988

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800b988 	.word	0x0800b988

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <LED_DISPLAY>:
int M_Max_int = 500;
int M_Max_frac = 00;



void LED_DISPLAY(int mode){
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b0ab      	sub	sp, #172	; 0xac
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8001000:	2000      	movs	r0, #0
 8001002:	f002 fca7 	bl	8003954 <ssd1306_Fill>
	ssd1306_SetCursor(5,5);
 8001006:	2105      	movs	r1, #5
 8001008:	2005      	movs	r0, #5
 800100a:	f002 fdf1 	bl	8003bf0 <ssd1306_SetCursor>
	if (mode == 0){
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d128      	bne.n	8001066 <LED_DISPLAY+0x6e>
		char message[] = "Standby Mode";
 8001014:	4b75      	ldr	r3, [pc, #468]	; (80011ec <LED_DISPLAY+0x1f4>)
 8001016:	f107 0494 	add.w	r4, r7, #148	; 0x94
 800101a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101c:	c407      	stmia	r4!, {r0, r1, r2}
 800101e:	7023      	strb	r3, [r4, #0]
		OLed_Val = ssd1306_WriteString(message, Font_7x10, White);
 8001020:	4a73      	ldr	r2, [pc, #460]	; (80011f0 <LED_DISPLAY+0x1f8>)
 8001022:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001026:	2301      	movs	r3, #1
 8001028:	ca06      	ldmia	r2, {r1, r2}
 800102a:	f002 fdbb 	bl	8003ba4 <ssd1306_WriteString>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b70      	ldr	r3, [pc, #448]	; (80011f4 <LED_DISPLAY+0x1fc>)
 8001034:	701a      	strb	r2, [r3, #0]
		ssd1306_SetCursor(5,25);
 8001036:	2119      	movs	r1, #25
 8001038:	2005      	movs	r0, #5
 800103a:	f002 fdd9 	bl	8003bf0 <ssd1306_SetCursor>
		char message2[15];
		sprintf(message2, "Lasergun: %d/10", lasergun_energy);
 800103e:	4b6e      	ldr	r3, [pc, #440]	; (80011f8 <LED_DISPLAY+0x200>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001046:	496d      	ldr	r1, [pc, #436]	; (80011fc <LED_DISPLAY+0x204>)
 8001048:	4618      	mov	r0, r3
 800104a:	f006 f921 	bl	8007290 <siprintf>
		OLed_Val = ssd1306_WriteString(message2, Font_11x18, White);
 800104e:	4a6c      	ldr	r2, [pc, #432]	; (8001200 <LED_DISPLAY+0x208>)
 8001050:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001054:	2301      	movs	r3, #1
 8001056:	ca06      	ldmia	r2, {r1, r2}
 8001058:	f002 fda4 	bl	8003ba4 <ssd1306_WriteString>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b64      	ldr	r3, [pc, #400]	; (80011f4 <LED_DISPLAY+0x1fc>)
 8001062:	701a      	strb	r2, [r3, #0]
 8001064:	e0bc      	b.n	80011e0 <LED_DISPLAY+0x1e8>
	}
	else if (mode == 1){
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d128      	bne.n	80010be <LED_DISPLAY+0xc6>
		char message[] = "Battle Mode";
 800106c:	4a65      	ldr	r2, [pc, #404]	; (8001204 <LED_DISPLAY+0x20c>)
 800106e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001072:	ca07      	ldmia	r2, {r0, r1, r2}
 8001074:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		OLed_Val = ssd1306_WriteString(message, Font_7x10, White);
 8001078:	4a5d      	ldr	r2, [pc, #372]	; (80011f0 <LED_DISPLAY+0x1f8>)
 800107a:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800107e:	2301      	movs	r3, #1
 8001080:	ca06      	ldmia	r2, {r1, r2}
 8001082:	f002 fd8f 	bl	8003ba4 <ssd1306_WriteString>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <LED_DISPLAY+0x1fc>)
 800108c:	701a      	strb	r2, [r3, #0]
		ssd1306_SetCursor(5,25);
 800108e:	2119      	movs	r1, #25
 8001090:	2005      	movs	r0, #5
 8001092:	f002 fdad 	bl	8003bf0 <ssd1306_SetCursor>
		char message2[20];
		sprintf(message2, "Lasergun: %d/10", lasergun_energy);
 8001096:	4b58      	ldr	r3, [pc, #352]	; (80011f8 <LED_DISPLAY+0x200>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800109e:	4957      	ldr	r1, [pc, #348]	; (80011fc <LED_DISPLAY+0x204>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f006 f8f5 	bl	8007290 <siprintf>
		OLed_Val = ssd1306_WriteString(message2, Font_11x18, White);
 80010a6:	4a56      	ldr	r2, [pc, #344]	; (8001200 <LED_DISPLAY+0x208>)
 80010a8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80010ac:	2301      	movs	r3, #1
 80010ae:	ca06      	ldmia	r2, {r1, r2}
 80010b0:	f002 fd78 	bl	8003ba4 <ssd1306_WriteString>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <LED_DISPLAY+0x1fc>)
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e090      	b.n	80011e0 <LED_DISPLAY+0x1e8>
	}
	else if (mode == 2){
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d114      	bne.n	80010ee <LED_DISPLAY+0xf6>
		char message[] = "Last_of_EE2028";
 80010c4:	4b50      	ldr	r3, [pc, #320]	; (8001208 <LED_DISPLAY+0x210>)
 80010c6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80010ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010cc:	c407      	stmia	r4!, {r0, r1, r2}
 80010ce:	8023      	strh	r3, [r4, #0]
 80010d0:	3402      	adds	r4, #2
 80010d2:	0c1b      	lsrs	r3, r3, #16
 80010d4:	7023      	strb	r3, [r4, #0]
		OLed_Val = ssd1306_WriteString(message, Font_7x10, White);
 80010d6:	4a46      	ldr	r2, [pc, #280]	; (80011f0 <LED_DISPLAY+0x1f8>)
 80010d8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80010dc:	2301      	movs	r3, #1
 80010de:	ca06      	ldmia	r2, {r1, r2}
 80010e0:	f002 fd60 	bl	8003ba4 <ssd1306_WriteString>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <LED_DISPLAY+0x1fc>)
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e078      	b.n	80011e0 <LED_DISPLAY+0x1e8>
	}
	else if (mode == 4){
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d13e      	bne.n	8001172 <LED_DISPLAY+0x17a>
		char message[] = "Battle Mode";
 80010f4:	4a43      	ldr	r2, [pc, #268]	; (8001204 <LED_DISPLAY+0x20c>)
 80010f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80010fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		OLed_Val = ssd1306_WriteString(message, Font_7x10, White);
 8001100:	4a3b      	ldr	r2, [pc, #236]	; (80011f0 <LED_DISPLAY+0x1f8>)
 8001102:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001106:	2301      	movs	r3, #1
 8001108:	ca06      	ldmia	r2, {r1, r2}
 800110a:	f002 fd4b 	bl	8003ba4 <ssd1306_WriteString>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <LED_DISPLAY+0x1fc>)
 8001114:	701a      	strb	r2, [r3, #0]
		ssd1306_SetCursor(5,25);
 8001116:	2119      	movs	r1, #25
 8001118:	2005      	movs	r0, #5
 800111a:	f002 fd69 	bl	8003bf0 <ssd1306_SetCursor>
		char message2[20];
		sprintf(message2, "Lasergun: %d/10", lasergun_energy);
 800111e:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <LED_DISPLAY+0x200>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001126:	4935      	ldr	r1, [pc, #212]	; (80011fc <LED_DISPLAY+0x204>)
 8001128:	4618      	mov	r0, r3
 800112a:	f006 f8b1 	bl	8007290 <siprintf>
		OLed_Val = ssd1306_WriteString(message2, Font_11x18, White);
 800112e:	4a34      	ldr	r2, [pc, #208]	; (8001200 <LED_DISPLAY+0x208>)
 8001130:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001134:	2301      	movs	r3, #1
 8001136:	ca06      	ldmia	r2, {r1, r2}
 8001138:	f002 fd34 	bl	8003ba4 <ssd1306_WriteString>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <LED_DISPLAY+0x1fc>)
 8001142:	701a      	strb	r2, [r3, #0]
		ssd1306_SetCursor(20,45);
 8001144:	212d      	movs	r1, #45	; 0x2d
 8001146:	2014      	movs	r0, #20
 8001148:	f002 fd52 	bl	8003bf0 <ssd1306_SetCursor>
		char message3[] = "PEW PEW";
 800114c:	4a2f      	ldr	r2, [pc, #188]	; (800120c <LED_DISPLAY+0x214>)
 800114e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001152:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001156:	e883 0003 	stmia.w	r3, {r0, r1}
		OLed_Val = ssd1306_WriteString(message3, Font_11x18, White);
 800115a:	4a29      	ldr	r2, [pc, #164]	; (8001200 <LED_DISPLAY+0x208>)
 800115c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001160:	2301      	movs	r3, #1
 8001162:	ca06      	ldmia	r2, {r1, r2}
 8001164:	f002 fd1e 	bl	8003ba4 <ssd1306_WriteString>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <LED_DISPLAY+0x1fc>)
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e036      	b.n	80011e0 <LED_DISPLAY+0x1e8>
	}
	else if (mode == 5){
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b05      	cmp	r3, #5
 8001176:	d133      	bne.n	80011e0 <LED_DISPLAY+0x1e8>
		char message[] = "Last_of_EE2028";
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <LED_DISPLAY+0x210>)
 800117a:	f107 041c 	add.w	r4, r7, #28
 800117e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001180:	c407      	stmia	r4!, {r0, r1, r2}
 8001182:	8023      	strh	r3, [r4, #0]
 8001184:	3402      	adds	r4, #2
 8001186:	0c1b      	lsrs	r3, r3, #16
 8001188:	7023      	strb	r3, [r4, #0]
		OLed_Val = ssd1306_WriteString(message, Font_7x10, White);
 800118a:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <LED_DISPLAY+0x1f8>)
 800118c:	f107 001c 	add.w	r0, r7, #28
 8001190:	2301      	movs	r3, #1
 8001192:	ca06      	ldmia	r2, {r1, r2}
 8001194:	f002 fd06 	bl	8003ba4 <ssd1306_WriteString>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <LED_DISPLAY+0x1fc>)
 800119e:	701a      	strb	r2, [r3, #0]
		ssd1306_SetCursor(20,25);
 80011a0:	2119      	movs	r1, #25
 80011a2:	2014      	movs	r0, #20
 80011a4:	f002 fd24 	bl	8003bf0 <ssd1306_SetCursor>
		char message2[15];
		int i = 11 - (counter / 2);
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <LED_DISPLAY+0x218>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0fda      	lsrs	r2, r3, #31
 80011ae:	4413      	add	r3, r2
 80011b0:	105b      	asrs	r3, r3, #1
 80011b2:	425b      	negs	r3, r3
 80011b4:	330b      	adds	r3, #11
 80011b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		sprintf(message2, "%d", (i));
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80011c2:	4914      	ldr	r1, [pc, #80]	; (8001214 <LED_DISPLAY+0x21c>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f006 f863 	bl	8007290 <siprintf>
		OLed_Val = ssd1306_WriteString(message2, Font_16x26, White);
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <LED_DISPLAY+0x220>)
 80011cc:	f107 000c 	add.w	r0, r7, #12
 80011d0:	2301      	movs	r3, #1
 80011d2:	ca06      	ldmia	r2, {r1, r2}
 80011d4:	f002 fce6 	bl	8003ba4 <ssd1306_WriteString>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <LED_DISPLAY+0x1fc>)
 80011de:	701a      	strb	r2, [r3, #0]
	}
	ssd1306_UpdateScreen();
 80011e0:	f002 fbdc 	bl	800399c <ssd1306_UpdateScreen>
}
 80011e4:	bf00      	nop
 80011e6:	37ac      	adds	r7, #172	; 0xac
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd90      	pop	{r4, r7, pc}
 80011ec:	0800b9b4 	.word	0x0800b9b4
 80011f0:	200000e4 	.word	0x200000e4
 80011f4:	200003d0 	.word	0x200003d0
 80011f8:	200003c0 	.word	0x200003c0
 80011fc:	0800b9a0 	.word	0x0800b9a0
 8001200:	200000ec 	.word	0x200000ec
 8001204:	0800b9c4 	.word	0x0800b9c4
 8001208:	0800b9d0 	.word	0x0800b9d0
 800120c:	0800b9e0 	.word	0x0800b9e0
 8001210:	200003d4 	.word	0x200003d4
 8001214:	0800b9b0 	.word	0x0800b9b0
 8001218:	200000f4 	.word	0x200000f4

0800121c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
	uint32_t T4 = HAL_GetTick();
 8001226:	f002 fdeb 	bl	8003e00 <HAL_GetTick>
 800122a:	60f8      	str	r0, [r7, #12]
	if ((press > 0) && ((T4 - T3) < dp)){
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_GPIO_EXTI_Callback+0x4c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	dd0b      	ble.n	800124c <HAL_GPIO_EXTI_Callback+0x30>
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_GPIO_EXTI_Callback+0x50>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	1ad2      	subs	r2, r2, r3
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_GPIO_EXTI_Callback+0x54>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d203      	bcs.n	800124c <HAL_GPIO_EXTI_Callback+0x30>
		//char message_print[15];
		//sprintf(message_print, "double\r\n");
		//HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
		press = 2;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001246:	2202      	movs	r2, #2
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e008      	b.n	800125e <HAL_GPIO_EXTI_Callback+0x42>
	}
	else{
		//char message_print[15];
		//sprintf(message_print, "single\r\n");
		//HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
		press = 1;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_GPIO_EXTI_Callback+0x4c>)
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]
		T3 = HAL_GetTick();
 8001252:	f002 fdd5 	bl	8003e00 <HAL_GetTick>
 8001256:	4603      	mov	r3, r0
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_GPIO_EXTI_Callback+0x50>)
 800125a:	6013      	str	r3, [r2, #0]
	}
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200003c8 	.word	0x200003c8
 800126c:	200003d8 	.word	0x200003d8
 8001270:	20000000 	.word	0x20000000

08001274 <main>:



int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	//initialise_monitor_handles();
	HAL_Init();
 8001278:	f002 fd5e 	bl	8003d38 <HAL_Init>
	MX_GPIO_Init();
 800127c:	f000 fdd0 	bl	8001e20 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001280:	f000 fe44 	bl	8001f0c <MX_I2C1_Init>
	BSP_ACCELERO_Init();
 8001284:	f001 fbd2 	bl	8002a2c <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();
 8001288:	f001 fd20 	bl	8002ccc <BSP_TSENSOR_Init>
	BSP_GYRO_Init();
 800128c:	f001 fc24 	bl	8002ad8 <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 8001290:	f001 fcaa 	bl	8002be8 <BSP_MAGNETO_Init>
	BSP_PSENSOR_Init();
 8001294:	f001 fcec 	bl	8002c70 <BSP_PSENSOR_Init>
	BSP_HSENSOR_Init();
 8001298:	f001 fc78 	bl	8002b8c <BSP_HSENSOR_Init>
	UART1_Init();
 800129c:	f001 f838 	bl	8002310 <UART1_Init>
	ssd1306_Init();
 80012a0:	f002 faee 	bl	8003880 <ssd1306_Init>
	Buzzer_Init();
 80012a4:	f000 fe10 	bl	8001ec8 <Buzzer_Init>

	while (end == 0)
 80012a8:	e00f      	b.n	80012ca <main+0x56>
	{
		if (mode == 0){
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <main+0x64>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <main+0x44>
			Standby_Mode();}
 80012b2:	f000 fc25 	bl	8001b00 <Standby_Mode>
 80012b6:	e008      	b.n	80012ca <main+0x56>
		else if (mode == 1){
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <main+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d102      	bne.n	80012c6 <main+0x52>
			Battle_Mode();}
 80012c0:	f000 fc72 	bl	8001ba8 <Battle_Mode>
 80012c4:	e001      	b.n	80012ca <main+0x56>
		else{
			Last_of_EE2028();}
 80012c6:	f000 fcf7 	bl	8001cb8 <Last_of_EE2028>
	while (end == 0)
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <main+0x68>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0eb      	beq.n	80012aa <main+0x36>
	}
	exit(0);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f004 ff56 	bl	8006184 <exit>
 80012d8:	200003c4 	.word	0x200003c4
 80012dc:	200003cc 	.word	0x200003cc

080012e0 <Telemetry_Standby>:
}




void Telemetry_Standby(void){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0ac      	sub	sp, #176	; 0xb0
 80012e4:	af06      	add	r7, sp, #24
						  sprintf(message_print, "G:%.2f(°/s), M:%.2f(M), P:%.2f(P), H:%.2f(g/kg)\r\n", G, M, P, H);
						  HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
					  }
	 */

	float G = gyro();
 80012e6:	f000 fecf 	bl	8002088 <gyro>
 80012ea:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
	int G_int = (int)G;
 80012ee:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80012f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f6:	ee17 3a90 	vmov	r3, s15
 80012fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int G_frac = abs((int)((G - G_int) * 100));
 80012fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800130e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001312:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001570 <Telemetry_Standby+0x290>
 8001316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131e:	ee17 3a90 	vmov	r3, s15
 8001322:	2b00      	cmp	r3, #0
 8001324:	bfb8      	it	lt
 8001326:	425b      	neglt	r3, r3
 8001328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	float M = mag();
 800132c:	f000 ff58 	bl	80021e0 <mag>
 8001330:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
	int M_int = (int)M;
 8001334:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133c:	ee17 3a90 	vmov	r3, s15
 8001340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int M_frac = abs((int)((M - M_int) * 100));
 8001344:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001350:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001358:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001570 <Telemetry_Standby+0x290>
 800135c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001364:	ee17 3a90 	vmov	r3, s15
 8001368:	2b00      	cmp	r3, #0
 800136a:	bfb8      	it	lt
 800136c:	425b      	neglt	r3, r3
 800136e:	67fb      	str	r3, [r7, #124]	; 0x7c
	float P = pres();
 8001370:	f000 ffbc 	bl	80022ec <pres>
 8001374:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	int P_int = (int)P;
 8001378:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800137c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001380:	ee17 3a90 	vmov	r3, s15
 8001384:	677b      	str	r3, [r7, #116]	; 0x74
	int P_frac = abs((int)((P - P_int) * 100));
 8001386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001390:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001398:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001570 <Telemetry_Standby+0x290>
 800139c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a4:	ee17 3a90 	vmov	r3, s15
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bfb8      	it	lt
 80013ac:	425b      	neglt	r3, r3
 80013ae:	673b      	str	r3, [r7, #112]	; 0x70
	float H = humid();
 80013b0:	f000 ffa5 	bl	80022fe <humid>
 80013b4:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	int H_int = (int)H;
 80013b8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80013bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c0:	ee17 3a90 	vmov	r3, s15
 80013c4:	66bb      	str	r3, [r7, #104]	; 0x68
	int H_frac = abs((int)((H - H_int) * 100));
 80013c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d0:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80013d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001570 <Telemetry_Standby+0x290>
 80013dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e4:	ee17 3a90 	vmov	r3, s15
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bfb8      	it	lt
 80013ec:	425b      	neglt	r3, r3
 80013ee:	667b      	str	r3, [r7, #100]	; 0x64
	int max = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	if (G > G_Max){
 80013f6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80013fa:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80013fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	dd1c      	ble.n	8001442 <Telemetry_Standby+0x162>
		max = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		char message_print[60];
		sprintf(message_print, "G:%d.%02d(rad/s), exceeds threshold of %d.%02d(rad/s).\r\n", G_int, G_frac, G_Max_int, G_Max_frac);
 800140e:	4b59      	ldr	r3, [pc, #356]	; (8001574 <Telemetry_Standby+0x294>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a59      	ldr	r2, [pc, #356]	; (8001578 <Telemetry_Standby+0x298>)
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	4638      	mov	r0, r7
 8001418:	9201      	str	r2, [sp, #4]
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001420:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001424:	4955      	ldr	r1, [pc, #340]	; (800157c <Telemetry_Standby+0x29c>)
 8001426:	f005 ff33 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 800142a:	463b      	mov	r3, r7
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe fecf 	bl	80001d0 <strlen>
 8001432:	4603      	mov	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	4639      	mov	r1, r7
 8001438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800143c:	4850      	ldr	r0, [pc, #320]	; (8001580 <Telemetry_Standby+0x2a0>)
 800143e:	f003 ffb9 	bl	80053b4 <HAL_UART_Transmit>
	}
	if (M > M_Max){
 8001442:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001584 <Telemetry_Standby+0x2a4>
 8001446:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800144a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	dd1b      	ble.n	800148c <Telemetry_Standby+0x1ac>
		max = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		char message_print[60];
		sprintf(message_print, "M:%d.%02d(uT), exceeds threshold of %d.%02d(uT).\r\n", M_int, M_frac, M_Max_int, M_Max_frac);
 800145a:	4b4b      	ldr	r3, [pc, #300]	; (8001588 <Telemetry_Standby+0x2a8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a4b      	ldr	r2, [pc, #300]	; (800158c <Telemetry_Standby+0x2ac>)
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	4638      	mov	r0, r7
 8001464:	9201      	str	r2, [sp, #4]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800146a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800146e:	4948      	ldr	r1, [pc, #288]	; (8001590 <Telemetry_Standby+0x2b0>)
 8001470:	f005 ff0e 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001474:	463b      	mov	r3, r7
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe feaa 	bl	80001d0 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	b29a      	uxth	r2, r3
 8001480:	4639      	mov	r1, r7
 8001482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001486:	483e      	ldr	r0, [pc, #248]	; (8001580 <Telemetry_Standby+0x2a0>)
 8001488:	f003 ff94 	bl	80053b4 <HAL_UART_Transmit>
	}
	if (P < P_Min){
 800148c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001594 <Telemetry_Standby+0x2b4>
 8001490:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149c:	d51a      	bpl.n	80014d4 <Telemetry_Standby+0x1f4>
		max = 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		char message_print[60];
		sprintf(message_print, "P:%d.%02d(mb), exceeds threshold of %d.%02d(mb).\r\n", P_int, P_frac, P_Min_int, P_Min_frac);
 80014a4:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <Telemetry_Standby+0x2b8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a3c      	ldr	r2, [pc, #240]	; (800159c <Telemetry_Standby+0x2bc>)
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	4638      	mov	r0, r7
 80014ae:	9201      	str	r2, [sp, #4]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80014b6:	493a      	ldr	r1, [pc, #232]	; (80015a0 <Telemetry_Standby+0x2c0>)
 80014b8:	f005 feea 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 80014bc:	463b      	mov	r3, r7
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe fe86 	bl	80001d0 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4639      	mov	r1, r7
 80014ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ce:	482c      	ldr	r0, [pc, #176]	; (8001580 <Telemetry_Standby+0x2a0>)
 80014d0:	f003 ff70 	bl	80053b4 <HAL_UART_Transmit>
	}
	if (H < H_Min){
 80014d4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80015a4 <Telemetry_Standby+0x2c4>
 80014d8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80014dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	d51a      	bpl.n	800151c <Telemetry_Standby+0x23c>
		max = 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		char message_print[60];
		sprintf(message_print, "H:%d.%02d(%%rH), exceeds threshold of %d.%02d(%%rH)\r\n", H_int, H_frac, H_Min_int, H_Min_frac);
 80014ec:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <Telemetry_Standby+0x2c8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a2e      	ldr	r2, [pc, #184]	; (80015ac <Telemetry_Standby+0x2cc>)
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	4638      	mov	r0, r7
 80014f6:	9201      	str	r2, [sp, #4]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014fe:	492c      	ldr	r1, [pc, #176]	; (80015b0 <Telemetry_Standby+0x2d0>)
 8001500:	f005 fec6 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001504:	463b      	mov	r3, r7
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe fe62 	bl	80001d0 <strlen>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	4639      	mov	r1, r7
 8001512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001516:	481a      	ldr	r0, [pc, #104]	; (8001580 <Telemetry_Standby+0x2a0>)
 8001518:	f003 ff4c 	bl	80053b4 <HAL_UART_Transmit>
	}
	if (max == 0){
 800151c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001520:	2b00      	cmp	r3, #0
 8001522:	d120      	bne.n	8001566 <Telemetry_Standby+0x286>
		char message_print[100];
		sprintf(message_print, "G:%d.%02d(rad/s), M:%d.%02d(uT), P:%d.%02d(mb), H:%d.%02d(%%rH)\r\n", G_int, G_frac, M_int, M_frac, P_int, P_frac, H_int, H_frac);
 8001524:	4638      	mov	r0, r7
 8001526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001528:	9305      	str	r3, [sp, #20]
 800152a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800152c:	9304      	str	r3, [sp, #16]
 800152e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001530:	9303      	str	r3, [sp, #12]
 8001532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001544:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001548:	491a      	ldr	r1, [pc, #104]	; (80015b4 <Telemetry_Standby+0x2d4>)
 800154a:	f005 fea1 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 800154e:	463b      	mov	r3, r7
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe fe3d 	bl	80001d0 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	4639      	mov	r1, r7
 800155c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001560:	4807      	ldr	r0, [pc, #28]	; (8001580 <Telemetry_Standby+0x2a0>)
 8001562:	f003 ff27 	bl	80053b4 <HAL_UART_Transmit>
	}
}
 8001566:	bf00      	nop
 8001568:	3798      	adds	r7, #152	; 0x98
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	42c80000 	.word	0x42c80000
 8001574:	20000014 	.word	0x20000014
 8001578:	200003ec 	.word	0x200003ec
 800157c:	0800b9e8 	.word	0x0800b9e8
 8001580:	200002f4 	.word	0x200002f4
 8001584:	43fa0000 	.word	0x43fa0000
 8001588:	20000018 	.word	0x20000018
 800158c:	200003f0 	.word	0x200003f0
 8001590:	0800ba24 	.word	0x0800ba24
 8001594:	447a0000 	.word	0x447a0000
 8001598:	20000008 	.word	0x20000008
 800159c:	200003e0 	.word	0x200003e0
 80015a0:	0800ba58 	.word	0x0800ba58
 80015a4:	42480000 	.word	0x42480000
 80015a8:	2000000c 	.word	0x2000000c
 80015ac:	200003e4 	.word	0x200003e4
 80015b0:	0800ba8c 	.word	0x0800ba8c
 80015b4:	0800bac4 	.word	0x0800bac4

080015b8 <Telemetry_Battle>:


void Telemetry_Battle(void){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0be      	sub	sp, #248	; 0xf8
 80015bc:	af0a      	add	r7, sp, #40	; 0x28
						  char message_print[100];
						  sprintf(message_print, "T:%.2f(°C), P:%.2f(P), H:%.2f(g/kg), A:%.2f(n/M), G:%.2f(°/s), M:%.2f(M)\r\n", T, P, H, A, G, M);
						  HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
					  }
	 */
	float G = gyro();
 80015be:	f000 fd63 	bl	8002088 <gyro>
 80015c2:	ed87 0a32 	vstr	s0, [r7, #200]	; 0xc8
	int G_int = (int)G;
 80015c6:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80015ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ce:	ee17 3a90 	vmov	r3, s15
 80015d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int G_frac = abs((int)((G - G_int) * 100));
 80015d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e2:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80015e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ea:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 8001934 <Telemetry_Battle+0x37c>
 80015ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f6:	ee17 3a90 	vmov	r3, s15
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bfb8      	it	lt
 80015fe:	425b      	neglt	r3, r3
 8001600:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float M = mag();
 8001604:	f000 fdec 	bl	80021e0 <mag>
 8001608:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
	int M_int = (int)M;
 800160c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001614:	ee17 3a90 	vmov	r3, s15
 8001618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	int M_frac = abs((int)((M - M_int) * 100));
 800161c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001628:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800162c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001630:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8001934 <Telemetry_Battle+0x37c>
 8001634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163c:	ee17 3a90 	vmov	r3, s15
 8001640:	2b00      	cmp	r3, #0
 8001642:	bfb8      	it	lt
 8001644:	425b      	neglt	r3, r3
 8001646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float P = pres();
 800164a:	f000 fe4f 	bl	80022ec <pres>
 800164e:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
	int P_int = (int)P;
 8001652:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165a:	ee17 3a90 	vmov	r3, s15
 800165e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int P_frac = abs((int)((P - P_int) * 100));
 8001662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001676:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8001934 <Telemetry_Battle+0x37c>
 800167a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001682:	ee17 3a90 	vmov	r3, s15
 8001686:	2b00      	cmp	r3, #0
 8001688:	bfb8      	it	lt
 800168a:	425b      	neglt	r3, r3
 800168c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float H = humid();
 8001690:	f000 fe35 	bl	80022fe <humid>
 8001694:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	int H_int = (int)H;
 8001698:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800169c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a0:	ee17 3a90 	vmov	r3, s15
 80016a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int H_frac = abs((int)((H - H_int) * 100));
 80016a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80016b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016bc:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001934 <Telemetry_Battle+0x37c>
 80016c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c8:	ee17 3a90 	vmov	r3, s15
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bfb8      	it	lt
 80016d0:	425b      	neglt	r3, r3
 80016d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float T = temp();
 80016d6:	f000 fccb 	bl	8002070 <temp>
 80016da:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
	int T_int = (int)T;
 80016de:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80016e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e6:	ee17 3a90 	vmov	r3, s15
 80016ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int T_frac = abs((int)((T- T_int) * 100));
 80016ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016fa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80016fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001702:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001934 <Telemetry_Battle+0x37c>
 8001706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170e:	ee17 3a90 	vmov	r3, s15
 8001712:	2b00      	cmp	r3, #0
 8001714:	bfb8      	it	lt
 8001716:	425b      	neglt	r3, r3
 8001718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float A = accel();
 800171c:	f000 fc78 	bl	8002010 <accel>
 8001720:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	int A_int = (int)A;
 8001724:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172c:	ee17 3a90 	vmov	r3, s15
 8001730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int A_frac = abs((int)((A- A_int) * 100));
 8001734:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001740:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001748:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001934 <Telemetry_Battle+0x37c>
 800174c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001754:	ee17 3a90 	vmov	r3, s15
 8001758:	2b00      	cmp	r3, #0
 800175a:	bfb8      	it	lt
 800175c:	425b      	neglt	r3, r3
 800175e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int max = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (T > T_Max){
 8001768:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001938 <Telemetry_Battle+0x380>
 800176c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001778:	dd1c      	ble.n	80017b4 <Telemetry_Battle+0x1fc>
		max = 1;
 800177a:	2301      	movs	r3, #1
 800177c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		char message_print[60];
		sprintf(message_print, "T:%d.%02d(C), exceeds threshold of %d.%02d(C)\r\n", T_int, T_frac, T_Max_int, T_Max_frac);
 8001780:	4b6e      	ldr	r3, [pc, #440]	; (800193c <Telemetry_Battle+0x384>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a6e      	ldr	r2, [pc, #440]	; (8001940 <Telemetry_Battle+0x388>)
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	4638      	mov	r0, r7
 800178a:	9201      	str	r2, [sp, #4]
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001792:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001796:	496b      	ldr	r1, [pc, #428]	; (8001944 <Telemetry_Battle+0x38c>)
 8001798:	f005 fd7a 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 800179c:	463b      	mov	r3, r7
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fd16 	bl	80001d0 <strlen>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4639      	mov	r1, r7
 80017aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ae:	4866      	ldr	r0, [pc, #408]	; (8001948 <Telemetry_Battle+0x390>)
 80017b0:	f003 fe00 	bl	80053b4 <HAL_UART_Transmit>
	}
	if (A < A_Min){
 80017b4:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 80017b8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80017bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c4:	d51c      	bpl.n	8001800 <Telemetry_Battle+0x248>
		max = 1;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		char message_print[60];
		sprintf(message_print, "A:%d.%02d(m/s^2), exceeds threshold of %d.%02d(m/s^2)\r\n", A_int, A_frac, A_Min_int, A_Min_frac);
 80017cc:	4b5f      	ldr	r3, [pc, #380]	; (800194c <Telemetry_Battle+0x394>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a5f      	ldr	r2, [pc, #380]	; (8001950 <Telemetry_Battle+0x398>)
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	4638      	mov	r0, r7
 80017d6:	9201      	str	r2, [sp, #4]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80017e2:	495c      	ldr	r1, [pc, #368]	; (8001954 <Telemetry_Battle+0x39c>)
 80017e4:	f005 fd54 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 80017e8:	463b      	mov	r3, r7
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fcf0 	bl	80001d0 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4639      	mov	r1, r7
 80017f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017fa:	4853      	ldr	r0, [pc, #332]	; (8001948 <Telemetry_Battle+0x390>)
 80017fc:	f003 fdda 	bl	80053b4 <HAL_UART_Transmit>
	}
	if (G > G_Max){
 8001800:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001804:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	dd1c      	ble.n	800184c <Telemetry_Battle+0x294>
		max = 1;
 8001812:	2301      	movs	r3, #1
 8001814:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		char message_print[60];
		sprintf(message_print, "G:%d.%02d(rad/s), exceeds threshold of %d.%02d(rad/s).\r\n", G_int, G_frac, G_Max_int, G_Max_frac);
 8001818:	4b4f      	ldr	r3, [pc, #316]	; (8001958 <Telemetry_Battle+0x3a0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a4f      	ldr	r2, [pc, #316]	; (800195c <Telemetry_Battle+0x3a4>)
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	4638      	mov	r0, r7
 8001822:	9201      	str	r2, [sp, #4]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800182a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800182e:	494c      	ldr	r1, [pc, #304]	; (8001960 <Telemetry_Battle+0x3a8>)
 8001830:	f005 fd2e 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001834:	463b      	mov	r3, r7
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fcca 	bl	80001d0 <strlen>
 800183c:	4603      	mov	r3, r0
 800183e:	b29a      	uxth	r2, r3
 8001840:	4639      	mov	r1, r7
 8001842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001846:	4840      	ldr	r0, [pc, #256]	; (8001948 <Telemetry_Battle+0x390>)
 8001848:	f003 fdb4 	bl	80053b4 <HAL_UART_Transmit>
	}
	if (M > M_Max){
 800184c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001964 <Telemetry_Battle+0x3ac>
 8001850:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	dd1c      	ble.n	8001898 <Telemetry_Battle+0x2e0>
		max = 1;
 800185e:	2301      	movs	r3, #1
 8001860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		char message_print[60];
		sprintf(message_print, "M:%d.%02d(uT), exceeds threshold of %d.%02d(uT).\r\n", M_int, M_frac, M_Max_int, M_Max_frac);
 8001864:	4b40      	ldr	r3, [pc, #256]	; (8001968 <Telemetry_Battle+0x3b0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a40      	ldr	r2, [pc, #256]	; (800196c <Telemetry_Battle+0x3b4>)
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	4638      	mov	r0, r7
 800186e:	9201      	str	r2, [sp, #4]
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001876:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800187a:	493d      	ldr	r1, [pc, #244]	; (8001970 <Telemetry_Battle+0x3b8>)
 800187c:	f005 fd08 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001880:	463b      	mov	r3, r7
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fca4 	bl	80001d0 <strlen>
 8001888:	4603      	mov	r3, r0
 800188a:	b29a      	uxth	r2, r3
 800188c:	4639      	mov	r1, r7
 800188e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001892:	482d      	ldr	r0, [pc, #180]	; (8001948 <Telemetry_Battle+0x390>)
 8001894:	f003 fd8e 	bl	80053b4 <HAL_UART_Transmit>
	}
	if (P < P_Min){
 8001898:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001974 <Telemetry_Battle+0x3bc>
 800189c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80018a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	d51c      	bpl.n	80018e4 <Telemetry_Battle+0x32c>
		max = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		char message_print[60];
		sprintf(message_print, "P:%d.%02d(mb), exceeds threshold of %d.%02d(mb).\r\n", P_int, P_frac, P_Min_int, P_Min_frac);
 80018b0:	4b31      	ldr	r3, [pc, #196]	; (8001978 <Telemetry_Battle+0x3c0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a31      	ldr	r2, [pc, #196]	; (800197c <Telemetry_Battle+0x3c4>)
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	4638      	mov	r0, r7
 80018ba:	9201      	str	r2, [sp, #4]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80018c6:	492e      	ldr	r1, [pc, #184]	; (8001980 <Telemetry_Battle+0x3c8>)
 80018c8:	f005 fce2 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 80018cc:	463b      	mov	r3, r7
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fc7e 	bl	80001d0 <strlen>
 80018d4:	4603      	mov	r3, r0
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4639      	mov	r1, r7
 80018da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018de:	481a      	ldr	r0, [pc, #104]	; (8001948 <Telemetry_Battle+0x390>)
 80018e0:	f003 fd68 	bl	80053b4 <HAL_UART_Transmit>
	}
	if (H < H_Min){
 80018e4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001984 <Telemetry_Battle+0x3cc>
 80018e8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80018ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f4:	d54e      	bpl.n	8001994 <Telemetry_Battle+0x3dc>
		max = 1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		char message_print[60];
		sprintf(message_print, "H:%d.%02d(%%rH), exceeds threshold of %d.%02d(%%rH)\r\n", H_int, H_frac, H_Min_int, H_Min_frac);
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <Telemetry_Battle+0x3d0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a22      	ldr	r2, [pc, #136]	; (800198c <Telemetry_Battle+0x3d4>)
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	4638      	mov	r0, r7
 8001906:	9201      	str	r2, [sp, #4]
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800190e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001912:	491f      	ldr	r1, [pc, #124]	; (8001990 <Telemetry_Battle+0x3d8>)
 8001914:	f005 fcbc 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001918:	463b      	mov	r3, r7
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fc58 	bl	80001d0 <strlen>
 8001920:	4603      	mov	r3, r0
 8001922:	b29a      	uxth	r2, r3
 8001924:	4639      	mov	r1, r7
 8001926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <Telemetry_Battle+0x390>)
 800192c:	f003 fd42 	bl	80053b4 <HAL_UART_Transmit>
 8001930:	e030      	b.n	8001994 <Telemetry_Battle+0x3dc>
 8001932:	bf00      	nop
 8001934:	42c80000 	.word	0x42c80000
 8001938:	42200000 	.word	0x42200000
 800193c:	20000004 	.word	0x20000004
 8001940:	200003dc 	.word	0x200003dc
 8001944:	0800bb08 	.word	0x0800bb08
 8001948:	200002f4 	.word	0x200002f4
 800194c:	20000010 	.word	0x20000010
 8001950:	200003e8 	.word	0x200003e8
 8001954:	0800bb38 	.word	0x0800bb38
 8001958:	20000014 	.word	0x20000014
 800195c:	200003ec 	.word	0x200003ec
 8001960:	0800b9e8 	.word	0x0800b9e8
 8001964:	43fa0000 	.word	0x43fa0000
 8001968:	20000018 	.word	0x20000018
 800196c:	200003f0 	.word	0x200003f0
 8001970:	0800ba24 	.word	0x0800ba24
 8001974:	447a0000 	.word	0x447a0000
 8001978:	20000008 	.word	0x20000008
 800197c:	200003e0 	.word	0x200003e0
 8001980:	0800ba58 	.word	0x0800ba58
 8001984:	42480000 	.word	0x42480000
 8001988:	2000000c 	.word	0x2000000c
 800198c:	200003e4 	.word	0x200003e4
 8001990:	0800ba8c 	.word	0x0800ba8c
	}
	if (max == 0){
 8001994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001998:	2b00      	cmp	r3, #0
 800199a:	d131      	bne.n	8001a00 <Telemetry_Battle+0x448>
		char message_print[130];
		sprintf(message_print, "T:%d.%02d(C), A:%d.%02d(m/s^2), G:%d.%02d(rad/s), M:%d.%02d(uT), P:%d.%02d(mb), H:%d.%02d(%%rH)\r\n", T_int, T_frac, A_int, A_frac, G_int, G_frac, M_int, M_frac, P_int, P_frac, H_int, H_frac);
 800199c:	4638      	mov	r0, r7
 800199e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019a2:	9309      	str	r3, [sp, #36]	; 0x24
 80019a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019a8:	9308      	str	r3, [sp, #32]
 80019aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019ae:	9307      	str	r3, [sp, #28]
 80019b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019b4:	9306      	str	r3, [sp, #24]
 80019b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019ba:	9305      	str	r3, [sp, #20]
 80019bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019c0:	9304      	str	r3, [sp, #16]
 80019c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019c6:	9303      	str	r3, [sp, #12]
 80019c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019cc:	9302      	str	r3, [sp, #8]
 80019ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019e2:	4909      	ldr	r1, [pc, #36]	; (8001a08 <Telemetry_Battle+0x450>)
 80019e4:	f005 fc54 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 80019e8:	463b      	mov	r3, r7
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fbf0 	bl	80001d0 <strlen>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4639      	mov	r1, r7
 80019f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <Telemetry_Battle+0x454>)
 80019fc:	f003 fcda 	bl	80053b4 <HAL_UART_Transmit>
	}
}
 8001a00:	bf00      	nop
 8001a02:	37d0      	adds	r7, #208	; 0xd0
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	0800bb70 	.word	0x0800bb70
 8001a0c:	200002f4 	.word	0x200002f4

08001a10 <Activate_EE2028>:



int Activate_EE2028(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
	float A = accel();
 8001a16:	f000 fafb 	bl	8002010 <accel>
 8001a1a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (A < A_Min){
 8001a1e:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8001a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	d501      	bpl.n	8001a34 <Activate_EE2028+0x24>
		return 1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <Activate_EE2028+0x26>
	}
	return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <Lasergun>:



void Lasergun(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b092      	sub	sp, #72	; 0x48
 8001a44:	af00      	add	r7, sp, #0
	lasergun_energy += 3;
 8001a46:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <Lasergun+0xa8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	3303      	adds	r3, #3
 8001a4c:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <Lasergun+0xa8>)
 8001a4e:	6013      	str	r3, [r2, #0]
	LED_DISPLAY(mode);
 8001a50:	4b26      	ldr	r3, [pc, #152]	; (8001aec <Lasergun+0xac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff facf 	bl	8000ff8 <LED_DISPLAY>
	char message_print[40];
	sprintf(message_print, "Lasergun charging %d/10\r\n", lasergun_energy);
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <Lasergun+0xa8>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	f107 0320 	add.w	r3, r7, #32
 8001a62:	4923      	ldr	r1, [pc, #140]	; (8001af0 <Lasergun+0xb0>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f005 fc13 	bl	8007290 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001a6a:	f107 0320 	add.w	r3, r7, #32
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fbae 	bl	80001d0 <strlen>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f107 0120 	add.w	r1, r7, #32
 8001a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a80:	481c      	ldr	r0, [pc, #112]	; (8001af4 <Lasergun+0xb4>)
 8001a82:	f003 fc97 	bl	80053b4 <HAL_UART_Transmit>
	if (lasergun_energy >= 5){
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <Lasergun+0xa8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	dd27      	ble.n	8001ade <Lasergun+0x9e>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2102      	movs	r1, #2
 8001a92:	4819      	ldr	r0, [pc, #100]	; (8001af8 <Lasergun+0xb8>)
 8001a94:	f002 fd92 	bl	80045bc <HAL_GPIO_WritePin>
		char message_print[25];
		sprintf(message_print, "Lasergun goes PEW PEW\r\n");
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	4918      	ldr	r1, [pc, #96]	; (8001afc <Lasergun+0xbc>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f005 fbf7 	bl	8007290 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fb93 	bl	80001d0 <strlen>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	1d39      	adds	r1, r7, #4
 8001ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab4:	480f      	ldr	r0, [pc, #60]	; (8001af4 <Lasergun+0xb4>)
 8001ab6:	f003 fc7d 	bl	80053b4 <HAL_UART_Transmit>
		LED_DISPLAY(4);
 8001aba:	2004      	movs	r0, #4
 8001abc:	f7ff fa9c 	bl	8000ff8 <LED_DISPLAY>
		lasergun_energy -= 5;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <Lasergun+0xa8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3b05      	subs	r3, #5
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <Lasergun+0xa8>)
 8001ac8:	6013      	str	r3, [r2, #0]
		LED_DISPLAY(mode);
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <Lasergun+0xac>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fa92 	bl	8000ff8 <LED_DISPLAY>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	4807      	ldr	r0, [pc, #28]	; (8001af8 <Lasergun+0xb8>)
 8001ada:	f002 fd6f 	bl	80045bc <HAL_GPIO_WritePin>
	}

}
 8001ade:	bf00      	nop
 8001ae0:	3748      	adds	r7, #72	; 0x48
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200003c0 	.word	0x200003c0
 8001aec:	200003c4 	.word	0x200003c4
 8001af0:	0800bbd4 	.word	0x0800bbd4
 8001af4:	200002f4 	.word	0x200002f4
 8001af8:	48000400 	.word	0x48000400
 8001afc:	0800bbf0 	.word	0x0800bbf0

08001b00 <Standby_Mode>:

static void Standby_Mode(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	; 0x30
 8001b04:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4822      	ldr	r0, [pc, #136]	; (8001b94 <Standby_Mode+0x94>)
 8001b0c:	f002 fd56 	bl	80045bc <HAL_GPIO_WritePin>
	mode = 0;
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <Standby_Mode+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LED2_Pin,GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b1c:	481d      	ldr	r0, [pc, #116]	; (8001b94 <Standby_Mode+0x94>)
 8001b1e:	f002 fd4d 	bl	80045bc <HAL_GPIO_WritePin>
	uint32_t wait = 1000;
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t T1 = HAL_GetTick();
 8001b28:	f002 f96a 	bl	8003e00 <HAL_GetTick>
 8001b2c:	62f8      	str	r0, [r7, #44]	; 0x2c
	char message_print[30];
	sprintf(message_print, "Initiating Standby Mode\r\n");
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	491a      	ldr	r1, [pc, #104]	; (8001b9c <Standby_Mode+0x9c>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f005 fbac 	bl	8007290 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fb48 	bl	80001d0 <strlen>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	1d39      	adds	r1, r7, #4
 8001b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b4a:	4815      	ldr	r0, [pc, #84]	; (8001ba0 <Standby_Mode+0xa0>)
 8001b4c:	f003 fc32 	bl	80053b4 <HAL_UART_Transmit>
	LED_DISPLAY(mode);
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <Standby_Mode+0x98>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fa4f 	bl	8000ff8 <LED_DISPLAY>
	while (1)
	{
		uint32_t T2 = HAL_GetTick();
 8001b5a:	f002 f951 	bl	8003e00 <HAL_GetTick>
 8001b5e:	6278      	str	r0, [r7, #36]	; 0x24
		while ((T2 - T1) > wait){
 8001b60:	e004      	b.n	8001b6c <Standby_Mode+0x6c>
			T1 = HAL_GetTick();
 8001b62:	f002 f94d 	bl	8003e00 <HAL_GetTick>
 8001b66:	62f8      	str	r0, [r7, #44]	; 0x2c
			Telemetry_Standby();
 8001b68:	f7ff fbba 	bl	80012e0 <Telemetry_Standby>
		while ((T2 - T1) > wait){
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3f4      	bcc.n	8001b62 <Standby_Mode+0x62>
		}
		if (press == 2){
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <Standby_Mode+0xa4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d1ec      	bne.n	8001b5a <Standby_Mode+0x5a>
			mode = 1;
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <Standby_Mode+0x98>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
			press = 0;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <Standby_Mode+0xa4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
			return;
 8001b8c:	bf00      	nop
		}
	}

}
 8001b8e:	3730      	adds	r7, #48	; 0x30
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	48000400 	.word	0x48000400
 8001b98:	200003c4 	.word	0x200003c4
 8001b9c:	0800bc08 	.word	0x0800bc08
 8001ba0:	200002f4 	.word	0x200002f4
 8001ba4:	200003c8 	.word	0x200003c8

08001ba8 <Battle_Mode>:

static void Battle_Mode(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	482e      	ldr	r0, [pc, #184]	; (8001c6c <Battle_Mode+0xc4>)
 8001bb4:	f002 fd02 	bl	80045bc <HAL_GPIO_WritePin>
	mode = 1;
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <Battle_Mode+0xc8>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
	uint32_t wait = 1000;
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t T1 = HAL_GetTick();
 8001bc4:	f002 f91c 	bl	8003e00 <HAL_GetTick>
 8001bc8:	62f8      	str	r0, [r7, #44]	; 0x2c
	char message_print[30];
	sprintf(message_print, "Initiating Battle Mode\r\n");
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	4929      	ldr	r1, [pc, #164]	; (8001c74 <Battle_Mode+0xcc>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f005 fb5e 	bl	8007290 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fafa 	bl	80001d0 <strlen>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	1d39      	adds	r1, r7, #4
 8001be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be6:	4824      	ldr	r0, [pc, #144]	; (8001c78 <Battle_Mode+0xd0>)
 8001be8:	f003 fbe4 	bl	80053b4 <HAL_UART_Transmit>
	LED_DISPLAY(mode);
 8001bec:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <Battle_Mode+0xc8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fa01 	bl	8000ff8 <LED_DISPLAY>
	while (1)
	{
		uint32_t T2 = HAL_GetTick();
 8001bf6:	f002 f903 	bl	8003e00 <HAL_GetTick>
 8001bfa:	6278      	str	r0, [r7, #36]	; 0x24
		while ((T2 - T1) > wait){
 8001bfc:	e009      	b.n	8001c12 <Battle_Mode+0x6a>
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c02:	481a      	ldr	r0, [pc, #104]	; (8001c6c <Battle_Mode+0xc4>)
 8001c04:	f002 fcf2 	bl	80045ec <HAL_GPIO_TogglePin>
			T1 = HAL_GetTick();
 8001c08:	f002 f8fa 	bl	8003e00 <HAL_GetTick>
 8001c0c:	62f8      	str	r0, [r7, #44]	; 0x2c
			Telemetry_Battle();
 8001c0e:	f7ff fcd3 	bl	80015b8 <Telemetry_Battle>
		while ((T2 - T1) > wait){
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3ef      	bcc.n	8001bfe <Battle_Mode+0x56>
		}
		if (press > 0 && (press %2 == 0)){
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <Battle_Mode+0xd4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	dd0c      	ble.n	8001c40 <Battle_Mode+0x98>
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <Battle_Mode+0xd4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <Battle_Mode+0x98>
			mode = 0;
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <Battle_Mode+0xc8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
			press = 0;
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <Battle_Mode+0xd4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
			return;
 8001c3e:	e012      	b.n	8001c66 <Battle_Mode+0xbe>
		}
		else if (press == 1){
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <Battle_Mode+0xd4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d106      	bne.n	8001c56 <Battle_Mode+0xae>
			Lasergun();
 8001c48:	f7ff fefa 	bl	8001a40 <Lasergun>
			press += 2;
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <Battle_Mode+0xd4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3302      	adds	r3, #2
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <Battle_Mode+0xd4>)
 8001c54:	6013      	str	r3, [r2, #0]
		}
		if (Activate_EE2028()){
 8001c56:	f7ff fedb 	bl	8001a10 <Activate_EE2028>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0ca      	beq.n	8001bf6 <Battle_Mode+0x4e>
			mode = 2;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <Battle_Mode+0xc8>)
 8001c62:	2202      	movs	r2, #2
 8001c64:	601a      	str	r2, [r3, #0]
			return;
		}
	}
}
 8001c66:	3730      	adds	r7, #48	; 0x30
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	48000400 	.word	0x48000400
 8001c70:	200003c4 	.word	0x200003c4
 8001c74:	0800bc24 	.word	0x0800bc24
 8001c78:	200002f4 	.word	0x200002f4
 8001c7c:	200003c8 	.word	0x200003c8

08001c80 <Command_Center>:

void Command_Center(void){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
	char message_print[25];
	sprintf(message_print, "Drone Was Attacked! \r\n");
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	4909      	ldr	r1, [pc, #36]	; (8001cb0 <Command_Center+0x30>)
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f005 fb00 	bl	8007290 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fa9c 	bl	80001d0 <strlen>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	1d39      	adds	r1, r7, #4
 8001c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca2:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <Command_Center+0x34>)
 8001ca4:	f003 fb86 	bl	80053b4 <HAL_UART_Transmit>
}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	0800bc40 	.word	0x0800bc40
 8001cb4:	200002f4 	.word	0x200002f4

08001cb8 <Last_of_EE2028>:

static int Last_of_EE2028(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b09c      	sub	sp, #112	; 0x70
 8001cbc:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	484e      	ldr	r0, [pc, #312]	; (8001dfc <Last_of_EE2028+0x144>)
 8001cc4:	f002 fc7a 	bl	80045bc <HAL_GPIO_WritePin>
	counter = 0;
 8001cc8:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <Last_of_EE2028+0x148>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
	mode = 2;
 8001cce:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <Last_of_EE2028+0x14c>)
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001cd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cd8:	4848      	ldr	r0, [pc, #288]	; (8001dfc <Last_of_EE2028+0x144>)
 8001cda:	f002 fc87 	bl	80045ec <HAL_GPIO_TogglePin>
	uint32_t wait = 500;
 8001cde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ce2:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t T1 = HAL_GetTick();
 8001ce4:	f002 f88c 	bl	8003e00 <HAL_GetTick>
 8001ce8:	6678      	str	r0, [r7, #100]	; 0x64
	char message_print[30];
	sprintf(message_print, "Initiating Last_of_EE2028\r\n");
 8001cea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cee:	4946      	ldr	r1, [pc, #280]	; (8001e08 <Last_of_EE2028+0x150>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f005 facd 	bl	8007290 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001cf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fa68 	bl	80001d0 <strlen>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0c:	483f      	ldr	r0, [pc, #252]	; (8001e0c <Last_of_EE2028+0x154>)
 8001d0e:	f003 fb51 	bl	80053b4 <HAL_UART_Transmit>
	LED_DISPLAY(mode);
 8001d12:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <Last_of_EE2028+0x14c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f96e 	bl	8000ff8 <LED_DISPLAY>
	while (counter <= 20)
 8001d1c:	e03b      	b.n	8001d96 <Last_of_EE2028+0xde>
	{
		uint32_t T2 = HAL_GetTick();
 8001d1e:	f002 f86f 	bl	8003e00 <HAL_GetTick>
 8001d22:	65f8      	str	r0, [r7, #92]	; 0x5c
		while ((T2 - T1) > wait){
 8001d24:	e021      	b.n	8001d6a <Last_of_EE2028+0xb2>
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001d26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d2a:	4834      	ldr	r0, [pc, #208]	; (8001dfc <Last_of_EE2028+0x144>)
 8001d2c:	f002 fc5e 	bl	80045ec <HAL_GPIO_TogglePin>
			T1 = HAL_GetTick();
 8001d30:	f002 f866 	bl	8003e00 <HAL_GetTick>
 8001d34:	6678      	str	r0, [r7, #100]	; 0x64
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,GPIO_PIN_SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	2102      	movs	r1, #2
 8001d3a:	4830      	ldr	r0, [pc, #192]	; (8001dfc <Last_of_EE2028+0x144>)
 8001d3c:	f002 fc3e 	bl	80045bc <HAL_GPIO_WritePin>
			counter += 1;
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <Last_of_EE2028+0x148>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	4a2e      	ldr	r2, [pc, #184]	; (8001e00 <Last_of_EE2028+0x148>)
 8001d48:	6013      	str	r3, [r2, #0]
			if(counter % 2 == 0){
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <Last_of_EE2028+0x148>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d109      	bne.n	8001d6a <Last_of_EE2028+0xb2>
				HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2102      	movs	r1, #2
 8001d5a:	4828      	ldr	r0, [pc, #160]	; (8001dfc <Last_of_EE2028+0x144>)
 8001d5c:	f002 fc2e 	bl	80045bc <HAL_GPIO_WritePin>
				Command_Center();
 8001d60:	f7ff ff8e 	bl	8001c80 <Command_Center>
				LED_DISPLAY(5);
 8001d64:	2005      	movs	r0, #5
 8001d66:	f7ff f947 	bl	8000ff8 <LED_DISPLAY>
		while ((T2 - T1) > wait){
 8001d6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d3d7      	bcc.n	8001d26 <Last_of_EE2028+0x6e>
			}
		}
		if (press == 2){
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <Last_of_EE2028+0x158>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d10b      	bne.n	8001d96 <Last_of_EE2028+0xde>
			mode = 1;
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <Last_of_EE2028+0x14c>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
			press = 0;
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <Last_of_EE2028+0x158>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
			return end = 0;
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <Last_of_EE2028+0x15c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <Last_of_EE2028+0x15c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	e02d      	b.n	8001df2 <Last_of_EE2028+0x13a>
	while (counter <= 20)
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <Last_of_EE2028+0x148>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b14      	cmp	r3, #20
 8001d9c:	ddbf      	ble.n	8001d1e <Last_of_EE2028+0x66>
		}
	}
	char final_message[60];
	sprintf(final_message, "When there is no more room in hell, the dead will walk\r\n");
 8001d9e:	463b      	mov	r3, r7
 8001da0:	491d      	ldr	r1, [pc, #116]	; (8001e18 <Last_of_EE2028+0x160>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f005 fa74 	bl	8007290 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)final_message, strlen(final_message),0xFFFF);
 8001da8:	463b      	mov	r3, r7
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fa10 	bl	80001d0 <strlen>
 8001db0:	4603      	mov	r3, r0
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4639      	mov	r1, r7
 8001db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dba:	4814      	ldr	r0, [pc, #80]	; (8001e0c <Last_of_EE2028+0x154>)
 8001dbc:	f003 fafa 	bl	80053b4 <HAL_UART_Transmit>
	ssd1306_Fill(Black);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f001 fdc7 	bl	8003954 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, zombie, 128, 64, White);
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	2340      	movs	r3, #64	; 0x40
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <Last_of_EE2028+0x164>)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f001 ff23 	bl	8003c20 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001dda:	f001 fddf 	bl	800399c <ssd1306_UpdateScreen>
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2102      	movs	r1, #2
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <Last_of_EE2028+0x144>)
 8001de4:	f002 fbea 	bl	80045bc <HAL_GPIO_WritePin>
	return end = 1;
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <Last_of_EE2028+0x15c>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <Last_of_EE2028+0x15c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3768      	adds	r7, #104	; 0x68
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	48000400 	.word	0x48000400
 8001e00:	200003d4 	.word	0x200003d4
 8001e04:	200003c4 	.word	0x200003c4
 8001e08:	0800bc58 	.word	0x0800bc58
 8001e0c:	200002f4 	.word	0x200002f4
 8001e10:	200003c8 	.word	0x200003c8
 8001e14:	200003cc 	.word	0x200003cc
 8001e18:	0800bc74 	.word	0x0800bc74
 8001e1c:	0800bcb0 	.word	0x0800bcb0

08001e20 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();	// Enable AHB2 Bus for GPIOC
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <MX_GPIO_Init+0x98>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a23      	ldr	r2, [pc, #140]	; (8001eb8 <MX_GPIO_Init+0x98>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e32:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <MX_GPIO_Init+0x98>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]

	// Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF,
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e52:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <MX_GPIO_Init+0x9c>)
 8001e56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	4619      	mov	r1, r3
 8001e62:	4817      	ldr	r0, [pc, #92]	; (8001ec0 <MX_GPIO_Init+0xa0>)
 8001e64:	f002 f90c 	bl	8004080 <HAL_GPIO_Init>

	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e68:	2028      	movs	r0, #40	; 0x28
 8001e6a:	f002 f8ee 	bl	800404a <HAL_NVIC_EnableIRQ>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_GPIO_Init+0x98>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <MX_GPIO_Init+0x98>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_GPIO_Init+0x98>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]


	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <MX_GPIO_Init+0xa4>)
 8001e8e:	f002 fb95 	bl	80045bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin LED2_Pin */
	GPIO_InitStruct.Pin = LED2_Pin;
 8001e92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e96:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <MX_GPIO_Init+0xa4>)
 8001eac:	f002 f8e8 	bl	8004080 <HAL_GPIO_Init>


}
 8001eb0:	bf00      	nop
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	10210000 	.word	0x10210000
 8001ec0:	48000800 	.word	0x48000800
 8001ec4:	48000400 	.word	0x48000400

08001ec8 <Buzzer_Init>:

static void Buzzer_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	480d      	ldr	r0, [pc, #52]	; (8001f08 <Buzzer_Init+0x40>)
 8001ed4:	f002 fb72 	bl	80045bc <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]
	// Configuration of Buzzer (GPIO-B Pin-1) as Arduino Pin D6
	GPIO_InitStruct.Pin = Buzzer_Pin;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4803      	ldr	r0, [pc, #12]	; (8001f08 <Buzzer_Init+0x40>)
 8001efc:	f002 f8c0 	bl	8004080 <HAL_GPIO_Init>
}
 8001f00:	bf00      	nop
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	48000400 	.word	0x48000400

08001f0c <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <MX_I2C1_Init+0xf4>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a3a      	ldr	r2, [pc, #232]	; (8002000 <MX_I2C1_Init+0xf4>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1e:	4b38      	ldr	r3, [pc, #224]	; (8002000 <MX_I2C1_Init+0xf4>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_8;
 8001f3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f3e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f40:	2312      	movs	r3, #18
 8001f42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	61fb      	str	r3, [r7, #28]
	__GPIOB_CLK_ENABLE();
 8001f50:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <MX_I2C1_Init+0xf4>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	4a2a      	ldr	r2, [pc, #168]	; (8002000 <MX_I2C1_Init+0xf4>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <MX_I2C1_Init+0xf4>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4825      	ldr	r0, [pc, #148]	; (8002004 <MX_I2C1_Init+0xf8>)
 8001f70:	f002 f886 	bl	8004080 <HAL_GPIO_Init>

	hi2c1.Instance = I2C1;
 8001f74:	4b24      	ldr	r3, [pc, #144]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001f76:	4a25      	ldr	r2, [pc, #148]	; (800200c <MX_I2C1_Init+0x100>)
 8001f78:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001f7c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001f80:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f88:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
	__I2C1_CLK_ENABLE();
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <MX_I2C1_Init+0xf4>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	4a13      	ldr	r2, [pc, #76]	; (8002000 <MX_I2C1_Init+0xf4>)
 8001fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_I2C1_Init+0xf4>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fc4:	4810      	ldr	r0, [pc, #64]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001fc6:	f002 fb43 	bl	8004650 <HAL_I2C_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_I2C1_Init+0xc8>
	{
		Error_Handler();
 8001fd0:	f000 f9f6 	bl	80023c0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	480c      	ldr	r0, [pc, #48]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001fd8:	f003 f842 	bl	8005060 <HAL_I2CEx_ConfigAnalogFilter>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_I2C1_Init+0xda>
	{
		Error_Handler();
 8001fe2:	f000 f9ed 	bl	80023c0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4807      	ldr	r0, [pc, #28]	; (8002008 <MX_I2C1_Init+0xfc>)
 8001fea:	f003 f884 	bl	80050f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_I2C1_Init+0xec>
	{
		Error_Handler();
 8001ff4:	f000 f9e4 	bl	80023c0 <Error_Handler>
	}

}
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	48000400 	.word	0x48000400
 8002008:	20000374 	.word	0x20000374
 800200c:	40005400 	.word	0x40005400

08002010 <accel>:

static float accel(void){
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
	// sensitivty = mg/LSB, convert to m/s^2
	float accel_data[3];
	int16_t accel_data_i16[3] = { 0 };
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	809a      	strh	r2, [r3, #4]
	BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fd41 	bl	8002aa8 <BSP_ACCELERO_AccGetXYZ>
	//accel_data[0] = (float)accel_data_i16[0] * (9.8/1000.0f);
	//accel_data[1] = (float)accel_data_i16[1] * (9.8/1000.0f);
	accel_data[2] = (float)accel_data_i16[2] * (9.8/1000.0f);
 8002026:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002032:	ee17 0a90 	vmov	r0, s15
 8002036:	f7fe fa87 	bl	8000548 <__aeabi_f2d>
 800203a:	a30b      	add	r3, pc, #44	; (adr r3, 8002068 <accel+0x58>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fada 	bl	80005f8 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f7fe fdcc 	bl	8000be8 <__aeabi_d2f>
 8002050:	4603      	mov	r3, r0
 8002052:	617b      	str	r3, [r7, #20]
	return accel_data[2];
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	ee07 3a90 	vmov	s15, r3
}
 800205a:	eeb0 0a67 	vmov.f32	s0, s15
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	f3af 8000 	nop.w
 8002068:	bc01a36f 	.word	0xbc01a36f
 800206c:	3f841205 	.word	0x3f841205

08002070 <temp>:

static float temp(void){
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	// sensitivity = °C/LSB
	// unit = degree celsius
	return BSP_TSENSOR_ReadTemp();	// read temperature sensor
 8002074:	f000 fe46 	bl	8002d04 <BSP_TSENSOR_ReadTemp>
 8002078:	eef0 7a40 	vmov.f32	s15, s0
}
 800207c:	eeb0 0a67 	vmov.f32	s0, s15
 8002080:	bd80      	pop	{r7, pc}
 8002082:	0000      	movs	r0, r0
 8002084:	0000      	movs	r0, r0
	...

08002088 <gyro>:


static float gyro(void){
 8002088:	b5b0      	push	{r4, r5, r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
	//X = roll, Y = Pitch, Z = yaw, sensitivity is mdeg/LSB, convert to rad/s
	//unit = rad/s
	float gyro_data[3] = { 0 };
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
	BSP_GYRO_GetXYZ(gyro_data);
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fd5e 	bl	8002b5c <BSP_GYRO_GetXYZ>
	gyro_data[0] = (float)gyro_data[0] * (1/1000.0f)* (M_PI/180);
 80020a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020a4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80021d8 <gyro+0x150>
 80020a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ac:	ee17 0a90 	vmov	r0, s15
 80020b0:	f7fe fa4a 	bl	8000548 <__aeabi_f2d>
 80020b4:	a344      	add	r3, pc, #272	; (adr r3, 80021c8 <gyro+0x140>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	f7fe fa9d 	bl	80005f8 <__aeabi_dmul>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7fe fd8f 	bl	8000be8 <__aeabi_d2f>
 80020ca:	4603      	mov	r3, r0
 80020cc:	607b      	str	r3, [r7, #4]
	gyro_data[1] = (float)gyro_data[1] * (1/1000.0f)* (M_PI/180);
 80020ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80020d2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80021d8 <gyro+0x150>
 80020d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020da:	ee17 0a90 	vmov	r0, s15
 80020de:	f7fe fa33 	bl	8000548 <__aeabi_f2d>
 80020e2:	a339      	add	r3, pc, #228	; (adr r3, 80021c8 <gyro+0x140>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe fa86 	bl	80005f8 <__aeabi_dmul>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7fe fd78 	bl	8000be8 <__aeabi_d2f>
 80020f8:	4603      	mov	r3, r0
 80020fa:	60bb      	str	r3, [r7, #8]
	gyro_data[2] = (float)gyro_data[2] * (1/1000.0f)* (M_PI/180);
 80020fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002100:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80021d8 <gyro+0x150>
 8002104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002108:	ee17 0a90 	vmov	r0, s15
 800210c:	f7fe fa1c 	bl	8000548 <__aeabi_f2d>
 8002110:	a32d      	add	r3, pc, #180	; (adr r3, 80021c8 <gyro+0x140>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe fa6f 	bl	80005f8 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f7fe fd61 	bl	8000be8 <__aeabi_d2f>
 8002126:	4603      	mov	r3, r0
 8002128:	60fb      	str	r3, [r7, #12]
	return sqrt(pow(gyro_data[0],2) + pow(gyro_data[1],2) + pow(gyro_data[2],2)); // return sqrt(x^2+y^2+z^2) for total magnitude
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fa0b 	bl	8000548 <__aeabi_f2d>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	ed9f 1b26 	vldr	d1, [pc, #152]	; 80021d0 <gyro+0x148>
 800213a:	ec43 2b10 	vmov	d0, r2, r3
 800213e:	f008 fcd1 	bl	800aae4 <pow>
 8002142:	ec55 4b10 	vmov	r4, r5, d0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe f9fd 	bl	8000548 <__aeabi_f2d>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80021d0 <gyro+0x148>
 8002156:	ec43 2b10 	vmov	d0, r2, r3
 800215a:	f008 fcc3 	bl	800aae4 <pow>
 800215e:	ec53 2b10 	vmov	r2, r3, d0
 8002162:	4620      	mov	r0, r4
 8002164:	4629      	mov	r1, r5
 8002166:	f7fe f891 	bl	800028c <__adddf3>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4614      	mov	r4, r2
 8002170:	461d      	mov	r5, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe f9e7 	bl	8000548 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80021d0 <gyro+0x148>
 8002182:	ec43 2b10 	vmov	d0, r2, r3
 8002186:	f008 fcad 	bl	800aae4 <pow>
 800218a:	ec53 2b10 	vmov	r2, r3, d0
 800218e:	4620      	mov	r0, r4
 8002190:	4629      	mov	r1, r5
 8002192:	f7fe f87b 	bl	800028c <__adddf3>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	ec43 2b17 	vmov	d7, r2, r3
 800219e:	eeb0 0a47 	vmov.f32	s0, s14
 80021a2:	eef0 0a67 	vmov.f32	s1, s15
 80021a6:	f008 fd0d 	bl	800abc4 <sqrt>
 80021aa:	ec53 2b10 	vmov	r2, r3, d0
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe fd19 	bl	8000be8 <__aeabi_d2f>
 80021b6:	4603      	mov	r3, r0
 80021b8:	ee07 3a90 	vmov	s15, r3
}
 80021bc:	eeb0 0a67 	vmov.f32	s0, s15
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bdb0      	pop	{r4, r5, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	a2529d39 	.word	0xa2529d39
 80021cc:	3f91df46 	.word	0x3f91df46
 80021d0:	00000000 	.word	0x00000000
 80021d4:	40000000 	.word	0x40000000
 80021d8:	3a83126f 	.word	0x3a83126f
 80021dc:	00000000 	.word	0x00000000

080021e0 <mag>:

static float mag(void){
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
	// Sensitivity = mgauss/LSB
	// unit = uT, 1 gauss = 0.1 mT
	float mag_data[3];
	int16_t mag_data_i16[3] = { 0 };
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	809a      	strh	r2, [r3, #4]
	BSP_MAGNETO_GetXYZ(mag_data_i16);
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fd25 	bl	8002c40 <BSP_MAGNETO_GetXYZ>
	mag_data[0] = (float)mag_data_i16[0] * (1/10.0f);
 80021f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002202:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80022e8 <mag+0x108>
 8002206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220a:	edc7 7a03 	vstr	s15, [r7, #12]
	mag_data[1] = (float)mag_data_i16[1] * (1/10.0f);
 800220e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80022e8 <mag+0x108>
 800221e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002222:	edc7 7a04 	vstr	s15, [r7, #16]
	mag_data[2] = (float)mag_data_i16[2] * (1/10.0f);
 8002226:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002232:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80022e8 <mag+0x108>
 8002236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800223a:	edc7 7a05 	vstr	s15, [r7, #20]
	return sqrt(pow(mag_data[0],2) + pow(mag_data[1],2) + pow(mag_data[2],2)); // return sqrt(x^2+y^2+z^2) for magnitude
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f981 	bl	8000548 <__aeabi_f2d>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	ed9f 1b25 	vldr	d1, [pc, #148]	; 80022e0 <mag+0x100>
 800224e:	ec43 2b10 	vmov	d0, r2, r3
 8002252:	f008 fc47 	bl	800aae4 <pow>
 8002256:	ec55 4b10 	vmov	r4, r5, d0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f973 	bl	8000548 <__aeabi_f2d>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 80022e0 <mag+0x100>
 800226a:	ec43 2b10 	vmov	d0, r2, r3
 800226e:	f008 fc39 	bl	800aae4 <pow>
 8002272:	ec53 2b10 	vmov	r2, r3, d0
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fe f807 	bl	800028c <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe f95d 	bl	8000548 <__aeabi_f2d>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80022e0 <mag+0x100>
 8002296:	ec43 2b10 	vmov	d0, r2, r3
 800229a:	f008 fc23 	bl	800aae4 <pow>
 800229e:	ec53 2b10 	vmov	r2, r3, d0
 80022a2:	4620      	mov	r0, r4
 80022a4:	4629      	mov	r1, r5
 80022a6:	f7fd fff1 	bl	800028c <__adddf3>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	ec43 2b17 	vmov	d7, r2, r3
 80022b2:	eeb0 0a47 	vmov.f32	s0, s14
 80022b6:	eef0 0a67 	vmov.f32	s1, s15
 80022ba:	f008 fc83 	bl	800abc4 <sqrt>
 80022be:	ec53 2b10 	vmov	r2, r3, d0
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	f7fe fc8f 	bl	8000be8 <__aeabi_d2f>
 80022ca:	4603      	mov	r3, r0
 80022cc:	ee07 3a90 	vmov	s15, r3
}
 80022d0:	eeb0 0a67 	vmov.f32	s0, s15
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bdb0      	pop	{r4, r5, r7, pc}
 80022da:	bf00      	nop
 80022dc:	f3af 8000 	nop.w
 80022e0:	00000000 	.word	0x00000000
 80022e4:	40000000 	.word	0x40000000
 80022e8:	3dcccccd 	.word	0x3dcccccd

080022ec <pres>:

static float pres(void){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	// Sensitivity = LSB/hPa
	//unit = mb, 1hpa = 1mb, 260 - 1260hPa, max is 1000hPa
	return BSP_PSENSOR_ReadPressure();
 80022f0:	f000 fcde 	bl	8002cb0 <BSP_PSENSOR_ReadPressure>
 80022f4:	eef0 7a40 	vmov.f32	s15, s0
}
 80022f8:	eeb0 0a67 	vmov.f32	s0, s15
 80022fc:	bd80      	pop	{r7, pc}

080022fe <humid>:

static float humid(void){
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0
	// sensitivity = %rH/LSB
	//unit = rH, 20 to 80%rH, min is 50%rH
	return BSP_HSENSOR_ReadHumidity();
 8002302:	f000 fc63 	bl	8002bcc <BSP_HSENSOR_ReadHumidity>
 8002306:	eef0 7a40 	vmov.f32	s15, s0
}
 800230a:	eeb0 0a67 	vmov.f32	s0, s15
 800230e:	bd80      	pop	{r7, pc}

08002310 <UART1_Init>:

static void UART1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
	/* Pin configuration for UART. BSP_COM_Init() can do this automatically */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <UART1_Init+0xa0>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	4a25      	ldr	r2, [pc, #148]	; (80023b0 <UART1_Init+0xa0>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002322:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <UART1_Init+0xa0>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800233c:	2307      	movs	r3, #7
 800233e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002340:	23c0      	movs	r3, #192	; 0xc0
 8002342:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234c:	2303      	movs	r3, #3
 800234e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	4619      	mov	r1, r3
 8002354:	4817      	ldr	r0, [pc, #92]	; (80023b4 <UART1_Init+0xa4>)
 8002356:	f001 fe93 	bl	8004080 <HAL_GPIO_Init>

	/* Configuring UART1 */
	huart1.Instance = USART1;
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <UART1_Init+0xa8>)
 800235c:	4a17      	ldr	r2, [pc, #92]	; (80023bc <UART1_Init+0xac>)
 800235e:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <UART1_Init+0xa8>)
 8002362:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002366:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <UART1_Init+0xa8>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <UART1_Init+0xa8>)
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <UART1_Init+0xa8>)
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <UART1_Init+0xa8>)
 800237c:	220c      	movs	r2, #12
 800237e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <UART1_Init+0xa8>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <UART1_Init+0xa8>)
 8002388:	2200      	movs	r2, #0
 800238a:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <UART1_Init+0xa8>)
 800238e:	2200      	movs	r2, #0
 8002390:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <UART1_Init+0xa8>)
 8002394:	2200      	movs	r2, #0
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002398:	4807      	ldr	r0, [pc, #28]	; (80023b8 <UART1_Init+0xa8>)
 800239a:	f002 ffbd 	bl	8005318 <HAL_UART_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d000      	beq.n	80023a6 <UART1_Init+0x96>
	{
		while(1);
 80023a4:	e7fe      	b.n	80023a4 <UART1_Init+0x94>
	}

}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	48000400 	.word	0x48000400
 80023b8:	200002f4 	.word	0x200002f4
 80023bc:	40013800 	.word	0x40013800

080023c0 <Error_Handler>:


void Error_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c4:	b672      	cpsid	i
}
 80023c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80023c8:	e7fe      	b.n	80023c8 <Error_Handler+0x8>
	...

080023cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_MspInit+0x44>)
 80023d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d6:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <HAL_MspInit+0x44>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6613      	str	r3, [r2, #96]	; 0x60
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_MspInit+0x44>)
 80023e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_MspInit+0x44>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	4a08      	ldr	r2, [pc, #32]	; (8002410 <HAL_MspInit+0x44>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_MspInit+0x44>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a17      	ldr	r2, [pc, #92]	; (8002490 <HAL_I2C_MspInit+0x7c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d128      	bne.n	8002488 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_I2C_MspInit+0x80>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_I2C_MspInit+0x80>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_I2C_MspInit+0x80>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800244e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002454:	2312      	movs	r3, #18
 8002456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002458:	2301      	movs	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002460:	2304      	movs	r3, #4
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	480b      	ldr	r0, [pc, #44]	; (8002498 <HAL_I2C_MspInit+0x84>)
 800246c:	f001 fe08 	bl	8004080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_I2C_MspInit+0x80>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_I2C_MspInit+0x80>)
 8002476:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800247a:	6593      	str	r3, [r2, #88]	; 0x58
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_I2C_MspInit+0x80>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002488:	bf00      	nop
 800248a:	3728      	adds	r7, #40	; 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40005800 	.word	0x40005800
 8002494:	40021000 	.word	0x40021000
 8002498:	48000400 	.word	0x48000400

0800249c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <HAL_I2C_MspDeInit+0x30>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d10a      	bne.n	80024c4 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_I2C_MspDeInit+0x34>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_I2C_MspDeInit+0x34>)
 80024b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80024b8:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80024ba:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <HAL_I2C_MspDeInit+0x38>)
 80024c0:	f001 ff88 	bl	80043d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40005800 	.word	0x40005800
 80024d0:	40021000 	.word	0x40021000
 80024d4:	48000400 	.word	0x48000400

080024d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2e      	ldr	r2, [pc, #184]	; (80025b0 <HAL_UART_MspInit+0xd8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d128      	bne.n	800254c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 8002500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002504:	6613      	str	r3, [r2, #96]	; 0x60
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 8002508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800252a:	23c0      	movs	r3, #192	; 0xc0
 800252c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800253a:	2307      	movs	r3, #7
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253e:	f107 031c 	add.w	r3, r7, #28
 8002542:	4619      	mov	r1, r3
 8002544:	481c      	ldr	r0, [pc, #112]	; (80025b8 <HAL_UART_MspInit+0xe0>)
 8002546:	f001 fd9b 	bl	8004080 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800254a:	e02d      	b.n	80025a8 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1a      	ldr	r2, [pc, #104]	; (80025bc <HAL_UART_MspInit+0xe4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d128      	bne.n	80025a8 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 800255c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002560:	6593      	str	r3, [r2, #88]	; 0x58
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257a:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_UART_MspInit+0xdc>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002586:	f44f 7340 	mov.w	r3, #768	; 0x300
 800258a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002598:	2307      	movs	r3, #7
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259c:	f107 031c 	add.w	r3, r7, #28
 80025a0:	4619      	mov	r1, r3
 80025a2:	4807      	ldr	r0, [pc, #28]	; (80025c0 <HAL_UART_MspInit+0xe8>)
 80025a4:	f001 fd6c 	bl	8004080 <HAL_GPIO_Init>
}
 80025a8:	bf00      	nop
 80025aa:	3730      	adds	r7, #48	; 0x30
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40013800 	.word	0x40013800
 80025b4:	40021000 	.word	0x40021000
 80025b8:	48000400 	.word	0x48000400
 80025bc:	40004800 	.word	0x40004800
 80025c0:	48000c00 	.word	0x48000c00

080025c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <HardFault_Handler+0x4>

080025d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <MemManage_Handler+0x4>

080025de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <BusFault_Handler+0x4>

080025e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <UsageFault_Handler+0x4>

080025ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002618:	f001 fbe0 	bl	8003ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002624:	2020      	movs	r0, #32
 8002626:	f001 fffb 	bl	8004620 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800262a:	2040      	movs	r0, #64	; 0x40
 800262c:	f001 fff8 	bl	8004620 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002630:	2080      	movs	r0, #128	; 0x80
 8002632:	f001 fff5 	bl	8004620 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002636:	f44f 7080 	mov.w	r0, #256	; 0x100
 800263a:	f001 fff1 	bl	8004620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}

08002642 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002646:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800264a:	f001 ffe9 	bl	8004620 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800264e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002652:	f001 ffe5 	bl	8004620 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002656:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800265a:	f001 ffe1 	bl	8004620 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800265e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002662:	f001 ffdd 	bl	8004620 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002666:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800266a:	f001 ffd9 	bl	8004620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <_sbrk+0x50>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <_sbrk+0x16>
		heap_end = &end;
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <_sbrk+0x50>)
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <_sbrk+0x54>)
 8002688:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <_sbrk+0x50>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <_sbrk+0x50>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	466a      	mov	r2, sp
 800269a:	4293      	cmp	r3, r2
 800269c:	d907      	bls.n	80026ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800269e:	f003 fd6b 	bl	8006178 <__errno>
 80026a2:	4603      	mov	r3, r0
 80026a4:	220c      	movs	r2, #12
 80026a6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ac:	e006      	b.n	80026bc <_sbrk+0x48>
	}

	heap_end += incr;
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <_sbrk+0x50>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <_sbrk+0x50>)
 80026b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	200003f4 	.word	0x200003f4
 80026c8:	200003cc 	.word	0x200003cc

080026cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026d0:	4b17      	ldr	r3, [pc, #92]	; (8002730 <SystemInit+0x64>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	4a16      	ldr	r2, [pc, #88]	; (8002730 <SystemInit+0x64>)
 80026d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80026e0:	4b14      	ldr	r3, [pc, #80]	; (8002734 <SystemInit+0x68>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a13      	ldr	r2, [pc, #76]	; (8002734 <SystemInit+0x68>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <SystemInit+0x68>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <SystemInit+0x68>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <SystemInit+0x68>)
 80026f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80026fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002700:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <SystemInit+0x68>)
 8002704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002708:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <SystemInit+0x68>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <SystemInit+0x68>)
 8002710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002714:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <SystemInit+0x68>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <SystemInit+0x64>)
 800271e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002722:	609a      	str	r2, [r3, #8]
#endif
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00
 8002734:	40021000 	.word	0x40021000

08002738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002770 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800273c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800273e:	e003      	b.n	8002748 <LoopCopyDataInit>

08002740 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002742:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002744:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002746:	3104      	adds	r1, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002748:	480b      	ldr	r0, [pc, #44]	; (8002778 <LoopForever+0xa>)
	ldr	r3, =_edata
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <LoopForever+0xe>)
	adds	r2, r0, r1
 800274c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800274e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002750:	d3f6      	bcc.n	8002740 <CopyDataInit>
	ldr	r2, =_sbss
 8002752:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002754:	e002      	b.n	800275c <LoopFillZerobss>

08002756 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002756:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002758:	f842 3b04 	str.w	r3, [r2], #4

0800275c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <LoopForever+0x16>)
	cmp	r2, r3
 800275e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002760:	d3f9      	bcc.n	8002756 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002762:	f7ff ffb3 	bl	80026cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002766:	f003 fe17 	bl	8006398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800276a:	f7fe fd83 	bl	8001274 <main>

0800276e <LoopForever>:

LoopForever:
    b LoopForever
 800276e:	e7fe      	b.n	800276e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002770:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002774:	0800ede8 	.word	0x0800ede8
	ldr	r0, =_sdata
 8002778:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800277c:	200002d8 	.word	0x200002d8
	ldr	r2, =_sbss
 8002780:	200002d8 	.word	0x200002d8
	ldr	r3, = _ebss
 8002784:	20000918 	.word	0x20000918

08002788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002788:	e7fe      	b.n	8002788 <ADC1_2_IRQHandler>
	...

0800278c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <I2Cx_MspInit+0xa8>)
 8002796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002798:	4a26      	ldr	r2, [pc, #152]	; (8002834 <I2Cx_MspInit+0xa8>)
 800279a:	f043 0302 	orr.w	r3, r3, #2
 800279e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <I2Cx_MspInit+0xa8>)
 80027a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80027ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027b0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80027b2:	2312      	movs	r3, #18
 80027b4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80027be:	2304      	movs	r3, #4
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	481b      	ldr	r0, [pc, #108]	; (8002838 <I2Cx_MspInit+0xac>)
 80027ca:	f001 fc59 	bl	8004080 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	4619      	mov	r1, r3
 80027d4:	4818      	ldr	r0, [pc, #96]	; (8002838 <I2Cx_MspInit+0xac>)
 80027d6:	f001 fc53 	bl	8004080 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <I2Cx_MspInit+0xa8>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	4a15      	ldr	r2, [pc, #84]	; (8002834 <I2Cx_MspInit+0xa8>)
 80027e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027e4:	6593      	str	r3, [r2, #88]	; 0x58
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <I2Cx_MspInit+0xa8>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <I2Cx_MspInit+0xa8>)
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <I2Cx_MspInit+0xa8>)
 80027f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <I2Cx_MspInit+0xa8>)
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <I2Cx_MspInit+0xa8>)
 8002804:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002808:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	210f      	movs	r1, #15
 800280e:	2021      	movs	r0, #33	; 0x21
 8002810:	f001 fbff 	bl	8004012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002814:	2021      	movs	r0, #33	; 0x21
 8002816:	f001 fc18 	bl	800404a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	210f      	movs	r1, #15
 800281e:	2022      	movs	r0, #34	; 0x22
 8002820:	f001 fbf7 	bl	8004012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002824:	2022      	movs	r0, #34	; 0x22
 8002826:	f001 fc10 	bl	800404a <HAL_NVIC_EnableIRQ>
}
 800282a:	bf00      	nop
 800282c:	3728      	adds	r7, #40	; 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	48000400 	.word	0x48000400

0800283c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a12      	ldr	r2, [pc, #72]	; (8002890 <I2Cx_Init+0x54>)
 8002848:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a11      	ldr	r2, [pc, #68]	; (8002894 <I2Cx_Init+0x58>)
 800284e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff89 	bl	800278c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f001 fee8 	bl	8004650 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002880:	2100      	movs	r1, #0
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f002 fbec 	bl	8005060 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40005800 	.word	0x40005800
 8002894:	00702681 	.word	0x00702681

08002898 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	; 0x28
 800289c:	af04      	add	r7, sp, #16
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	4608      	mov	r0, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	72fb      	strb	r3, [r7, #11]
 80028aa:	460b      	mov	r3, r1
 80028ac:	813b      	strh	r3, [r7, #8]
 80028ae:	4613      	mov	r3, r2
 80028b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80028b6:	7afb      	ldrb	r3, [r7, #11]
 80028b8:	b299      	uxth	r1, r3
 80028ba:	88f8      	ldrh	r0, [r7, #6]
 80028bc:	893a      	ldrh	r2, [r7, #8]
 80028be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4603      	mov	r3, r0
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f002 f890 	bl	80049f4 <HAL_I2C_Mem_Read>
 80028d4:	4603      	mov	r3, r0
 80028d6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80028de:	7afb      	ldrb	r3, [r7, #11]
 80028e0:	4619      	mov	r1, r3
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f832 	bl	800294c <I2Cx_Error>
  }
  return status;
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b08a      	sub	sp, #40	; 0x28
 80028f6:	af04      	add	r7, sp, #16
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	4608      	mov	r0, r1
 80028fc:	4611      	mov	r1, r2
 80028fe:	461a      	mov	r2, r3
 8002900:	4603      	mov	r3, r0
 8002902:	72fb      	strb	r3, [r7, #11]
 8002904:	460b      	mov	r3, r1
 8002906:	813b      	strh	r3, [r7, #8]
 8002908:	4613      	mov	r3, r2
 800290a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	b299      	uxth	r1, r3
 8002914:	88f8      	ldrh	r0, [r7, #6]
 8002916:	893a      	ldrh	r2, [r7, #8]
 8002918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291c:	9302      	str	r3, [sp, #8]
 800291e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	4603      	mov	r3, r0
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f001 ff4f 	bl	80047cc <HAL_I2C_Mem_Write>
 800292e:	4603      	mov	r3, r0
 8002930:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d004      	beq.n	8002942 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002938:	7afb      	ldrb	r3, [r7, #11]
 800293a:	4619      	mov	r1, r3
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f805 	bl	800294c <I2Cx_Error>
  }
  return status;
 8002942:	7dfb      	ldrb	r3, [r7, #23]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f001 ff08 	bl	800476e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff6c 	bl	800283c <I2Cx_Init>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <SENSOR_IO_Init+0x10>)
 8002972:	f7ff ff63 	bl	800283c <I2Cx_Init>
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200003f8 	.word	0x200003f8

08002980 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af02      	add	r7, sp, #8
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
 800298a:	460b      	mov	r3, r1
 800298c:	71bb      	strb	r3, [r7, #6]
 800298e:	4613      	mov	r3, r2
 8002990:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002992:	79bb      	ldrb	r3, [r7, #6]
 8002994:	b29a      	uxth	r2, r3
 8002996:	79f9      	ldrb	r1, [r7, #7]
 8002998:	2301      	movs	r3, #1
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	1d7b      	adds	r3, r7, #5
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2301      	movs	r3, #1
 80029a2:	4803      	ldr	r0, [pc, #12]	; (80029b0 <SENSOR_IO_Write+0x30>)
 80029a4:	f7ff ffa5 	bl	80028f2 <I2Cx_WriteMultiple>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200003f8 	.word	0x200003f8

080029b4 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	4603      	mov	r3, r0
 80029bc:	460a      	mov	r2, r1
 80029be:	71fb      	strb	r3, [r7, #7]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80029c8:	79bb      	ldrb	r3, [r7, #6]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	79f9      	ldrb	r1, [r7, #7]
 80029ce:	2301      	movs	r3, #1
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	f107 030f 	add.w	r3, r7, #15
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2301      	movs	r3, #1
 80029da:	4804      	ldr	r0, [pc, #16]	; (80029ec <SENSOR_IO_Read+0x38>)
 80029dc:	f7ff ff5c 	bl	8002898 <I2Cx_ReadMultiple>

  return read_value;
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200003f8 	.word	0x200003f8

080029f0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	603a      	str	r2, [r7, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
 80029fe:	460b      	mov	r3, r1
 8002a00:	71bb      	strb	r3, [r7, #6]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002a06:	79bb      	ldrb	r3, [r7, #6]
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	79f9      	ldrb	r1, [r7, #7]
 8002a0c:	88bb      	ldrh	r3, [r7, #4]
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2301      	movs	r3, #1
 8002a16:	4804      	ldr	r0, [pc, #16]	; (8002a28 <SENSOR_IO_ReadMultiple+0x38>)
 8002a18:	f7ff ff3e 	bl	8002898 <I2Cx_ReadMultiple>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	b29b      	uxth	r3, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200003f8 	.word	0x200003f8

08002a2c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002a36:	2300      	movs	r3, #0
 8002a38:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002a3a:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <BSP_ACCELERO_Init+0x74>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	4798      	blx	r3
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b6a      	cmp	r3, #106	; 0x6a
 8002a44:	d002      	beq.n	8002a4c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
 8002a4a:	e024      	b.n	8002a96 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <BSP_ACCELERO_Init+0x78>)
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <BSP_ACCELERO_Init+0x74>)
 8002a50:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002a52:	2330      	movs	r3, #48	; 0x30
 8002a54:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002a5e:	2340      	movs	r3, #64	; 0x40
 8002a60:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002a6a:	797a      	ldrb	r2, [r7, #5]
 8002a6c:	7abb      	ldrb	r3, [r7, #10]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002a74:	7a3b      	ldrb	r3, [r7, #8]
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	b21a      	sxth	r2, r3
 8002a80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b21b      	sxth	r3, r3
 8002a88:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <BSP_ACCELERO_Init+0x78>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	89ba      	ldrh	r2, [r7, #12]
 8002a92:	4610      	mov	r0, r2
 8002a94:	4798      	blx	r3
  }  

  return ret;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	2000007c 	.word	0x2000007c
 8002aa4:	20000444 	.word	0x20000444

08002aa8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002ac2:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000444 	.word	0x20000444

08002ad8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <BSP_GYRO_Init+0x7c>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	4798      	blx	r3
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b6a      	cmp	r3, #106	; 0x6a
 8002af0:	d002      	beq.n	8002af8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	e028      	b.n	8002b4a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <BSP_GYRO_Init+0x80>)
 8002afa:	4a16      	ldr	r2, [pc, #88]	; (8002b54 <BSP_GYRO_Init+0x7c>)
 8002afc:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002b02:	2330      	movs	r3, #48	; 0x30
 8002b04:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002b0e:	2340      	movs	r3, #64	; 0x40
 8002b10:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002b16:	230c      	movs	r3, #12
 8002b18:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002b1a:	7aba      	ldrb	r2, [r7, #10]
 8002b1c:	797b      	ldrb	r3, [r7, #5]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002b24:	7a3b      	ldrb	r3, [r7, #8]
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	b21a      	sxth	r2, r3
 8002b30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <BSP_GYRO_Init+0x80>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	89ba      	ldrh	r2, [r7, #12]
 8002b42:	4610      	mov	r0, r2
 8002b44:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	200000b0 	.word	0x200000b0
 8002b58:	20000448 	.word	0x20000448

08002b5c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <BSP_GYRO_GetXYZ+0x2c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <BSP_GYRO_GetXYZ+0x2c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8002b76:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <BSP_GYRO_GetXYZ+0x2c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000448 	.word	0x20000448

08002b8c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <BSP_HSENSOR_Init+0x38>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	20be      	movs	r0, #190	; 0xbe
 8002b98:	4798      	blx	r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2bbc      	cmp	r3, #188	; 0xbc
 8002b9e:	d002      	beq.n	8002ba6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	e009      	b.n	8002bba <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <BSP_HSENSOR_Init+0x3c>)
 8002ba8:	4a06      	ldr	r2, [pc, #24]	; (8002bc4 <BSP_HSENSOR_Init+0x38>)
 8002baa:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <BSP_HSENSOR_Init+0x3c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	20be      	movs	r0, #190	; 0xbe
 8002bb4:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002bba:	687b      	ldr	r3, [r7, #4]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000020 	.word	0x20000020
 8002bc8:	2000044c 	.word	0x2000044c

08002bcc <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	20be      	movs	r0, #190	; 0xbe
 8002bd8:	4798      	blx	r3
 8002bda:	eef0 7a40 	vmov.f32	s15, s0
}
 8002bde:	eeb0 0a67 	vmov.f32	s0, s15
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	2000044c 	.word	0x2000044c

08002be8 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <BSP_MAGNETO_Init+0x50>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4798      	blx	r3
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b3d      	cmp	r3, #61	; 0x3d
 8002bfc:	d002      	beq.n	8002c04 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	71fb      	strb	r3, [r7, #7]
 8002c02:	e013      	b.n	8002c2c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <BSP_MAGNETO_Init+0x54>)
 8002c06:	4a0c      	ldr	r2, [pc, #48]	; (8002c38 <BSP_MAGNETO_Init+0x50>)
 8002c08:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002c0a:	2358      	movs	r3, #88	; 0x58
 8002c0c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002c16:	2308      	movs	r3, #8
 8002c18:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002c1a:	2340      	movs	r3, #64	; 0x40
 8002c1c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <BSP_MAGNETO_Init+0x54>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	463a      	mov	r2, r7
 8002c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c2a:	4798      	blx	r3
  } 

  return ret;  
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000003c 	.word	0x2000003c
 8002c3c:	20000450 	.word	0x20000450

08002c40 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <BSP_MAGNETO_GetXYZ+0x2c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d009      	beq.n	8002c64 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <BSP_MAGNETO_GetXYZ+0x2c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d004      	beq.n	8002c64 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8002c5a:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <BSP_MAGNETO_GetXYZ+0x2c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
    }
  }
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000450 	.word	0x20000450

08002c70 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <BSP_PSENSOR_Init+0x38>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	20ba      	movs	r0, #186	; 0xba
 8002c7c:	4798      	blx	r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2bb1      	cmp	r3, #177	; 0xb1
 8002c82:	d002      	beq.n	8002c8a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	e009      	b.n	8002c9e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <BSP_PSENSOR_Init+0x3c>)
 8002c8c:	4a06      	ldr	r2, [pc, #24]	; (8002ca8 <BSP_PSENSOR_Init+0x38>)
 8002c8e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <BSP_PSENSOR_Init+0x3c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	20ba      	movs	r0, #186	; 0xba
 8002c98:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002c9e:	687b      	ldr	r3, [r7, #4]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000070 	.word	0x20000070
 8002cac:	20000454 	.word	0x20000454

08002cb0 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <BSP_PSENSOR_ReadPressure+0x18>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	20ba      	movs	r0, #186	; 0xba
 8002cbc:	4798      	blx	r3
 8002cbe:	eef0 7a40 	vmov.f32	s15, s0
}
 8002cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000454 	.word	0x20000454

08002ccc <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <BSP_TSENSOR_Init+0x30>)
 8002cd8:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <BSP_TSENSOR_Init+0x34>)
 8002cda:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002cdc:	f7ff fe46 	bl	800296c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <BSP_TSENSOR_Init+0x30>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	20be      	movs	r0, #190	; 0xbe
 8002cea:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000458 	.word	0x20000458
 8002d00:	2000002c 	.word	0x2000002c

08002d04 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <BSP_TSENSOR_ReadTemp+0x18>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	20be      	movs	r0, #190	; 0xbe
 8002d10:	4798      	blx	r3
 8002d12:	eef0 7a40 	vmov.f32	s15, s0
}
 8002d16:	eeb0 0a67 	vmov.f32	s0, s15
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000458 	.word	0x20000458

08002d20 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2120      	movs	r1, #32
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fe3f 	bl	80029b4 <SENSOR_IO_Read>
 8002d36:	4603      	mov	r3, r0
 8002d38:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	f023 0303 	bic.w	r3, r3, #3
 8002d50:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d60:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	2120      	movs	r1, #32
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fe08 	bl	8002980 <SENSOR_IO_Write>
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002d86:	f7ff fdf1 	bl	800296c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	210f      	movs	r1, #15
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fe0f 	bl	80029b4 <SENSOR_IO_Read>
 8002d96:	4603      	mov	r3, r0
 8002d98:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	b2d8      	uxtb	r0, r3
 8002db2:	f107 020c 	add.w	r2, r7, #12
 8002db6:	2302      	movs	r3, #2
 8002db8:	21b0      	movs	r1, #176	; 0xb0
 8002dba:	f7ff fe19 	bl	80029f0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002dbe:	7b3b      	ldrb	r3, [r7, #12]
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002dc6:	7b7b      	ldrb	r3, [r7, #13]
 8002dc8:	085b      	lsrs	r3, r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	b2d8      	uxtb	r0, r3
 8002dd2:	f107 020c 	add.w	r2, r7, #12
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	21b6      	movs	r1, #182	; 0xb6
 8002dda:	f7ff fe09 	bl	80029f0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002dde:	7b7b      	ldrb	r3, [r7, #13]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	b21a      	sxth	r2, r3
 8002de4:	7b3b      	ldrb	r3, [r7, #12]
 8002de6:	b21b      	sxth	r3, r3
 8002de8:	4313      	orrs	r3, r2
 8002dea:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	b2d8      	uxtb	r0, r3
 8002df0:	f107 020c 	add.w	r2, r7, #12
 8002df4:	2302      	movs	r3, #2
 8002df6:	21ba      	movs	r1, #186	; 0xba
 8002df8:	f7ff fdfa 	bl	80029f0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002dfc:	7b7b      	ldrb	r3, [r7, #13]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	b21a      	sxth	r2, r3
 8002e02:	7b3b      	ldrb	r3, [r7, #12]
 8002e04:	b21b      	sxth	r3, r3
 8002e06:	4313      	orrs	r3, r2
 8002e08:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	b2d8      	uxtb	r0, r3
 8002e0e:	f107 020c 	add.w	r2, r7, #12
 8002e12:	2302      	movs	r3, #2
 8002e14:	21a8      	movs	r1, #168	; 0xa8
 8002e16:	f7ff fdeb 	bl	80029f0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002e1a:	7b7b      	ldrb	r3, [r7, #13]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	b21a      	sxth	r2, r3
 8002e20:	7b3b      	ldrb	r3, [r7, #12]
 8002e22:	b21b      	sxth	r3, r3
 8002e24:	4313      	orrs	r3, r2
 8002e26:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002e28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e2c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e3a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002e3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e4c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e50:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002e54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e66:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e76:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002e7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e86:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002e8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e8e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002ed4 <HTS221_H_ReadHumidity+0x130>
 8002e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9a:	dd01      	ble.n	8002ea0 <HTS221_H_ReadHumidity+0xfc>
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <HTS221_H_ReadHumidity+0x134>)
 8002e9e:	e00a      	b.n	8002eb6 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002ea0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eac:	d502      	bpl.n	8002eb4 <HTS221_H_ReadHumidity+0x110>
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <HTS221_H_ReadHumidity+0x112>
 8002eb4:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002eb6:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002eb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ebc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ec0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ec4:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	447a0000 	.word	0x447a0000
 8002ed8:	447a0000 	.word	0x447a0000

08002edc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2120      	movs	r1, #32
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fd60 	bl	80029b4 <SENSOR_IO_Read>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	f023 0304 	bic.w	r3, r3, #4
 8002efe:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	2120      	movs	r1, #32
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fd29 	bl	8002980 <SENSOR_IO_Write>
}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b088      	sub	sp, #32
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	b2d8      	uxtb	r0, r3
 8002f44:	f107 0208 	add.w	r2, r7, #8
 8002f48:	2302      	movs	r3, #2
 8002f4a:	21b2      	movs	r1, #178	; 0xb2
 8002f4c:	f7ff fd50 	bl	80029f0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2135      	movs	r1, #53	; 0x35
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fd2c 	bl	80029b4 <SENSOR_IO_Read>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	b21b      	sxth	r3, r3
 8002f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6a:	b21a      	sxth	r2, r3
 8002f6c:	7a3b      	ldrb	r3, [r7, #8]
 8002f6e:	b21b      	sxth	r3, r3
 8002f70:	4313      	orrs	r3, r2
 8002f72:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002f74:	7ffb      	ldrb	r3, [r7, #31]
 8002f76:	019b      	lsls	r3, r3, #6
 8002f78:	b21b      	sxth	r3, r3
 8002f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7e:	b21a      	sxth	r2, r3
 8002f80:	7a7b      	ldrb	r3, [r7, #9]
 8002f82:	b21b      	sxth	r3, r3
 8002f84:	4313      	orrs	r3, r2
 8002f86:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002f88:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f8c:	10db      	asrs	r3, r3, #3
 8002f8e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002f90:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002f94:	10db      	asrs	r3, r3, #3
 8002f96:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	b2d8      	uxtb	r0, r3
 8002f9c:	f107 0208 	add.w	r2, r7, #8
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	21bc      	movs	r1, #188	; 0xbc
 8002fa4:	f7ff fd24 	bl	80029f0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002fa8:	7a7b      	ldrb	r3, [r7, #9]
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	7a3b      	ldrb	r3, [r7, #8]
 8002fb0:	b21b      	sxth	r3, r3
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	b21a      	sxth	r2, r3
 8002fbc:	7abb      	ldrb	r3, [r7, #10]
 8002fbe:	b21b      	sxth	r3, r3
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	b2d8      	uxtb	r0, r3
 8002fc8:	f107 0208 	add.w	r2, r7, #8
 8002fcc:	2302      	movs	r3, #2
 8002fce:	21aa      	movs	r1, #170	; 0xaa
 8002fd0:	f7ff fd0e 	bl	80029f0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002fd4:	7a7b      	ldrb	r3, [r7, #9]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	b21a      	sxth	r2, r3
 8002fda:	7a3b      	ldrb	r3, [r7, #8]
 8002fdc:	b21b      	sxth	r3, r3
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002fe2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002fe6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ff4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ff8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003006:	ee67 6a27 	vmul.f32	s13, s14, s15
 800300a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800300e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800301c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003020:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800302c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003030:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	ee07 3a90 	vmov	s15, r3
}
 800303a:	eeb0 0a67 	vmov.f32	s0, s15
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	463b      	mov	r3, r7
 800304c:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8003050:	783b      	ldrb	r3, [r7, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	2120      	movs	r1, #32
 8003056:	203c      	movs	r0, #60	; 0x3c
 8003058:	f7ff fc92 	bl	8002980 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800305c:	787b      	ldrb	r3, [r7, #1]
 800305e:	461a      	mov	r2, r3
 8003060:	2121      	movs	r1, #33	; 0x21
 8003062:	203c      	movs	r0, #60	; 0x3c
 8003064:	f7ff fc8c 	bl	8002980 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8003068:	78bb      	ldrb	r3, [r7, #2]
 800306a:	461a      	mov	r2, r3
 800306c:	2122      	movs	r1, #34	; 0x22
 800306e:	203c      	movs	r0, #60	; 0x3c
 8003070:	f7ff fc86 	bl	8002980 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	461a      	mov	r2, r3
 8003078:	2123      	movs	r1, #35	; 0x23
 800307a:	203c      	movs	r0, #60	; 0x3c
 800307c:	f7ff fc80 	bl	8002980 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8003080:	793b      	ldrb	r3, [r7, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	2124      	movs	r1, #36	; 0x24
 8003086:	203c      	movs	r0, #60	; 0x3c
 8003088:	f7ff fc7a 	bl	8002980 <SENSOR_IO_Write>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800309a:	2300      	movs	r3, #0
 800309c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800309e:	2122      	movs	r1, #34	; 0x22
 80030a0:	203c      	movs	r0, #60	; 0x3c
 80030a2:	f7ff fc87 	bl	80029b4 <SENSOR_IO_Read>
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f023 0303 	bic.w	r3, r3, #3
 80030b0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f043 0303 	orr.w	r3, r3, #3
 80030b8:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	461a      	mov	r2, r3
 80030be:	2122      	movs	r1, #34	; 0x22
 80030c0:	203c      	movs	r0, #60	; 0x3c
 80030c2:	f7ff fc5d 	bl	8002980 <SENSOR_IO_Write>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80030d2:	f7ff fc4b 	bl	800296c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80030d6:	210f      	movs	r1, #15
 80030d8:	203c      	movs	r0, #60	; 0x3c
 80030da:	f7ff fc6b 	bl	80029b4 <SENSOR_IO_Read>
 80030de:	4603      	mov	r3, r0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80030f2:	2122      	movs	r1, #34	; 0x22
 80030f4:	203c      	movs	r0, #60	; 0x3c
 80030f6:	f7ff fc5d 	bl	80029b4 <SENSOR_IO_Read>
 80030fa:	4603      	mov	r3, r0
 80030fc:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	f023 0320 	bic.w	r3, r3, #32
 8003104:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	f043 0320 	orr.w	r3, r3, #32
 8003112:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	461a      	mov	r2, r3
 8003118:	2122      	movs	r1, #34	; 0x22
 800311a:	203c      	movs	r0, #60	; 0x3c
 800311c:	f7ff fc30 	bl	8002980 <SENSOR_IO_Write>
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8003130:	2300      	movs	r3, #0
 8003132:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800313e:	2121      	movs	r1, #33	; 0x21
 8003140:	203c      	movs	r0, #60	; 0x3c
 8003142:	f7ff fc37 	bl	80029b4 <SENSOR_IO_Read>
 8003146:	4603      	mov	r3, r0
 8003148:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800314a:	f107 0208 	add.w	r2, r7, #8
 800314e:	2306      	movs	r3, #6
 8003150:	21a8      	movs	r1, #168	; 0xa8
 8003152:	203c      	movs	r0, #60	; 0x3c
 8003154:	f7ff fc4c 	bl	80029f0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003158:	2300      	movs	r3, #0
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e01c      	b.n	8003198 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800315e:	7ffb      	ldrb	r3, [r7, #31]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	3301      	adds	r3, #1
 8003164:	3320      	adds	r3, #32
 8003166:	443b      	add	r3, r7
 8003168:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800316c:	b29b      	uxth	r3, r3
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	b29a      	uxth	r2, r3
 8003172:	7ffb      	ldrb	r3, [r7, #31]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	3320      	adds	r3, #32
 8003178:	443b      	add	r3, r7
 800317a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800317e:	b29b      	uxth	r3, r3
 8003180:	4413      	add	r3, r2
 8003182:	b29a      	uxth	r2, r3
 8003184:	7ffb      	ldrb	r3, [r7, #31]
 8003186:	b212      	sxth	r2, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	3320      	adds	r3, #32
 800318c:	443b      	add	r3, r7
 800318e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003192:	7ffb      	ldrb	r3, [r7, #31]
 8003194:	3301      	adds	r3, #1
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	7ffb      	ldrb	r3, [r7, #31]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d9df      	bls.n	800315e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800319e:	7dfb      	ldrb	r3, [r7, #23]
 80031a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80031a4:	2b60      	cmp	r3, #96	; 0x60
 80031a6:	d013      	beq.n	80031d0 <LIS3MDL_MagReadXYZ+0xa8>
 80031a8:	2b60      	cmp	r3, #96	; 0x60
 80031aa:	dc14      	bgt.n	80031d6 <LIS3MDL_MagReadXYZ+0xae>
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d00c      	beq.n	80031ca <LIS3MDL_MagReadXYZ+0xa2>
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	dc10      	bgt.n	80031d6 <LIS3MDL_MagReadXYZ+0xae>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <LIS3MDL_MagReadXYZ+0x96>
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d003      	beq.n	80031c4 <LIS3MDL_MagReadXYZ+0x9c>
 80031bc:	e00b      	b.n	80031d6 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80031be:	4b19      	ldr	r3, [pc, #100]	; (8003224 <LIS3MDL_MagReadXYZ+0xfc>)
 80031c0:	61bb      	str	r3, [r7, #24]
    break;
 80031c2:	e008      	b.n	80031d6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80031c4:	4b18      	ldr	r3, [pc, #96]	; (8003228 <LIS3MDL_MagReadXYZ+0x100>)
 80031c6:	61bb      	str	r3, [r7, #24]
    break;
 80031c8:	e005      	b.n	80031d6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <LIS3MDL_MagReadXYZ+0x104>)
 80031cc:	61bb      	str	r3, [r7, #24]
    break;
 80031ce:	e002      	b.n	80031d6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <LIS3MDL_MagReadXYZ+0x108>)
 80031d2:	61bb      	str	r3, [r7, #24]
    break;    
 80031d4:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e01a      	b.n	8003212 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80031dc:	7ffb      	ldrb	r3, [r7, #31]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	3320      	adds	r3, #32
 80031e2:	443b      	add	r3, r7
 80031e4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80031f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f8:	7ffb      	ldrb	r3, [r7, #31]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003204:	ee17 2a90 	vmov	r2, s15
 8003208:	b212      	sxth	r2, r2
 800320a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800320c:	7ffb      	ldrb	r3, [r7, #31]
 800320e:	3301      	adds	r3, #1
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	7ffb      	ldrb	r3, [r7, #31]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d9e1      	bls.n	80031dc <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	3e0f5c29 	.word	0x3e0f5c29
 8003228:	3e947ae1 	.word	0x3e947ae1
 800322c:	3edc28f6 	.word	0x3edc28f6
 8003230:	3f147ae1 	.word	0x3f147ae1

08003234 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	4618      	mov	r0, r3
 8003242:	f000 f879 	bl	8003338 <LPS22HB_Init>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	4603      	mov	r3, r0
 8003256:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800325c:	f7ff fb86 	bl	800296c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	210f      	movs	r1, #15
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fba4 	bl	80029b4 <SENSOR_IO_Read>
 800326c:	4603      	mov	r3, r0
 800326e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003270:	7bfb      	ldrb	r3, [r7, #15]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800328a:	2300      	movs	r3, #0
 800328c:	74fb      	strb	r3, [r7, #19]
 800328e:	e013      	b.n	80032b8 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	3328      	adds	r3, #40	; 0x28
 8003298:	b2db      	uxtb	r3, r3
 800329a:	7cfc      	ldrb	r4, [r7, #19]
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f7ff fb88 	bl	80029b4 <SENSOR_IO_Read>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	f104 0318 	add.w	r3, r4, #24
 80032ac:	443b      	add	r3, r7
 80032ae:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	3301      	adds	r3, #1
 80032b6:	74fb      	strb	r3, [r7, #19]
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d9e8      	bls.n	8003290 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80032be:	2300      	movs	r3, #0
 80032c0:	74fb      	strb	r3, [r7, #19]
 80032c2:	e00f      	b.n	80032e4 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	3318      	adds	r3, #24
 80032c8:	443b      	add	r3, r7
 80032ca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80032ce:	461a      	mov	r2, r3
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	3301      	adds	r3, #1
 80032e2:	74fb      	strb	r3, [r7, #19]
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d9ec      	bls.n	80032c4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032fa:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2264      	movs	r2, #100	; 0x64
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	da01      	bge.n	8003310 <LPS22HB_P_ReadPressure+0x94>
 800330c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003310:	131b      	asrs	r3, r3, #12
 8003312:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800331e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003334 <LPS22HB_P_ReadPressure+0xb8>
 8003322:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003326:	eef0 7a66 	vmov.f32	s15, s13
}
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	bd90      	pop	{r4, r7, pc}
 8003334:	42c80000 	.word	0x42c80000

08003338 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	211a      	movs	r1, #26
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fb33 	bl	80029b4 <SENSOR_IO_Read>
 800334e:	4603      	mov	r3, r0
 8003350:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	211a      	movs	r1, #26
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fb08 	bl	8002980 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2110      	movs	r1, #16
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fb1c 	bl	80029b4 <SENSOR_IO_Read>
 800337c:	4603      	mov	r3, r0
 800337e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800338e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	f023 0302 	bic.w	r3, r3, #2
 8003396:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	f043 0302 	orr.w	r3, r3, #2
 800339e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	2110      	movs	r1, #16
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fae9 	bl	8002980 <SENSOR_IO_Write>
}  
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80033c4:	2110      	movs	r1, #16
 80033c6:	20d4      	movs	r0, #212	; 0xd4
 80033c8:	f7ff faf4 	bl	80029b4 <SENSOR_IO_Read>
 80033cc:	4603      	mov	r3, r0
 80033ce:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80033d4:	7bbb      	ldrb	r3, [r7, #14]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80033dc:	7bba      	ldrb	r2, [r7, #14]
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80033e4:	7bbb      	ldrb	r3, [r7, #14]
 80033e6:	461a      	mov	r2, r3
 80033e8:	2110      	movs	r1, #16
 80033ea:	20d4      	movs	r0, #212	; 0xd4
 80033ec:	f7ff fac8 	bl	8002980 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80033f0:	2112      	movs	r1, #18
 80033f2:	20d4      	movs	r0, #212	; 0xd4
 80033f4:	f7ff fade 	bl	80029b4 <SENSOR_IO_Read>
 80033f8:	4603      	mov	r3, r0
 80033fa:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	b29b      	uxth	r3, r3
 8003402:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003404:	7bbb      	ldrb	r3, [r7, #14]
 8003406:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800340a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800340c:	7bba      	ldrb	r2, [r7, #14]
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	4313      	orrs	r3, r2
 8003412:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003414:	7bbb      	ldrb	r3, [r7, #14]
 8003416:	461a      	mov	r2, r3
 8003418:	2112      	movs	r1, #18
 800341a:	20d4      	movs	r0, #212	; 0xd4
 800341c:	f7ff fab0 	bl	8002980 <SENSOR_IO_Write>
}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800342e:	2300      	movs	r3, #0
 8003430:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003432:	2110      	movs	r1, #16
 8003434:	20d4      	movs	r0, #212	; 0xd4
 8003436:	f7ff fabd 	bl	80029b4 <SENSOR_IO_Read>
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	461a      	mov	r2, r3
 800344a:	2110      	movs	r1, #16
 800344c:	20d4      	movs	r0, #212	; 0xd4
 800344e:	f7ff fa97 	bl	8002980 <SENSOR_IO_Write>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800345e:	f7ff fa85 	bl	800296c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003462:	210f      	movs	r1, #15
 8003464:	20d4      	movs	r0, #212	; 0xd4
 8003466:	f7ff faa5 	bl	80029b4 <SENSOR_IO_Read>
 800346a:	4603      	mov	r3, r0
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}

08003470 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800347e:	2115      	movs	r1, #21
 8003480:	20d4      	movs	r0, #212	; 0xd4
 8003482:	f7ff fa97 	bl	80029b4 <SENSOR_IO_Read>
 8003486:	4603      	mov	r3, r0
 8003488:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	f023 0310 	bic.w	r3, r3, #16
 8003490:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	f043 0310 	orr.w	r3, r3, #16
 800349e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	461a      	mov	r2, r3
 80034a4:	2115      	movs	r1, #21
 80034a6:	20d4      	movs	r0, #212	; 0xd4
 80034a8:	f7ff fa6a 	bl	8002980 <SENSOR_IO_Write>
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80034ca:	2110      	movs	r1, #16
 80034cc:	20d4      	movs	r0, #212	; 0xd4
 80034ce:	f7ff fa71 	bl	80029b4 <SENSOR_IO_Read>
 80034d2:	4603      	mov	r3, r0
 80034d4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80034d6:	f107 0208 	add.w	r2, r7, #8
 80034da:	2306      	movs	r3, #6
 80034dc:	2128      	movs	r1, #40	; 0x28
 80034de:	20d4      	movs	r0, #212	; 0xd4
 80034e0:	f7ff fa86 	bl	80029f0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e01c      	b.n	8003524 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80034ea:	7ffb      	ldrb	r3, [r7, #31]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	3301      	adds	r3, #1
 80034f0:	3320      	adds	r3, #32
 80034f2:	443b      	add	r3, r7
 80034f4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	7ffb      	ldrb	r3, [r7, #31]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	3320      	adds	r3, #32
 8003504:	443b      	add	r3, r7
 8003506:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800350a:	b29b      	uxth	r3, r3
 800350c:	4413      	add	r3, r2
 800350e:	b29a      	uxth	r2, r3
 8003510:	7ffb      	ldrb	r3, [r7, #31]
 8003512:	b212      	sxth	r2, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	3320      	adds	r3, #32
 8003518:	443b      	add	r3, r7
 800351a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800351e:	7ffb      	ldrb	r3, [r7, #31]
 8003520:	3301      	adds	r3, #1
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	7ffb      	ldrb	r3, [r7, #31]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d9df      	bls.n	80034ea <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b0c      	cmp	r3, #12
 8003532:	d829      	bhi.n	8003588 <LSM6DSL_AccReadXYZ+0xd4>
 8003534:	a201      	add	r2, pc, #4	; (adr r2, 800353c <LSM6DSL_AccReadXYZ+0x88>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	08003571 	.word	0x08003571
 8003540:	08003589 	.word	0x08003589
 8003544:	08003589 	.word	0x08003589
 8003548:	08003589 	.word	0x08003589
 800354c:	08003583 	.word	0x08003583
 8003550:	08003589 	.word	0x08003589
 8003554:	08003589 	.word	0x08003589
 8003558:	08003589 	.word	0x08003589
 800355c:	08003577 	.word	0x08003577
 8003560:	08003589 	.word	0x08003589
 8003564:	08003589 	.word	0x08003589
 8003568:	08003589 	.word	0x08003589
 800356c:	0800357d 	.word	0x0800357d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003570:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <LSM6DSL_AccReadXYZ+0x120>)
 8003572:	61bb      	str	r3, [r7, #24]
    break;
 8003574:	e008      	b.n	8003588 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003576:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <LSM6DSL_AccReadXYZ+0x124>)
 8003578:	61bb      	str	r3, [r7, #24]
    break;
 800357a:	e005      	b.n	8003588 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800357c:	4b17      	ldr	r3, [pc, #92]	; (80035dc <LSM6DSL_AccReadXYZ+0x128>)
 800357e:	61bb      	str	r3, [r7, #24]
    break;
 8003580:	e002      	b.n	8003588 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <LSM6DSL_AccReadXYZ+0x12c>)
 8003584:	61bb      	str	r3, [r7, #24]
    break;    
 8003586:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003588:	2300      	movs	r3, #0
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e01a      	b.n	80035c4 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800358e:	7ffb      	ldrb	r3, [r7, #31]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	3320      	adds	r3, #32
 8003594:	443b      	add	r3, r7
 8003596:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	7ffb      	ldrb	r3, [r7, #31]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b6:	ee17 2a90 	vmov	r2, s15
 80035ba:	b212      	sxth	r2, r2
 80035bc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80035be:	7ffb      	ldrb	r3, [r7, #31]
 80035c0:	3301      	adds	r3, #1
 80035c2:	77fb      	strb	r3, [r7, #31]
 80035c4:	7ffb      	ldrb	r3, [r7, #31]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d9e1      	bls.n	800358e <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80035ca:	bf00      	nop
 80035cc:	bf00      	nop
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	3d79db23 	.word	0x3d79db23
 80035d8:	3df9db23 	.word	0x3df9db23
 80035dc:	3e79db23 	.word	0x3e79db23
 80035e0:	3ef9db23 	.word	0x3ef9db23

080035e4 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80035ee:	2300      	movs	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80035f2:	2111      	movs	r1, #17
 80035f4:	20d4      	movs	r0, #212	; 0xd4
 80035f6:	f7ff f9dd 	bl	80029b4 <SENSOR_IO_Read>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003602:	7bbb      	ldrb	r3, [r7, #14]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800360a:	7bba      	ldrb	r2, [r7, #14]
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	4313      	orrs	r3, r2
 8003610:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8003612:	7bbb      	ldrb	r3, [r7, #14]
 8003614:	461a      	mov	r2, r3
 8003616:	2111      	movs	r1, #17
 8003618:	20d4      	movs	r0, #212	; 0xd4
 800361a:	f7ff f9b1 	bl	8002980 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800361e:	2112      	movs	r1, #18
 8003620:	20d4      	movs	r0, #212	; 0xd4
 8003622:	f7ff f9c7 	bl	80029b4 <SENSOR_IO_Read>
 8003626:	4603      	mov	r3, r0
 8003628:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	b29b      	uxth	r3, r3
 8003630:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003632:	7bbb      	ldrb	r3, [r7, #14]
 8003634:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003638:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800363a:	7bba      	ldrb	r2, [r7, #14]
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	4313      	orrs	r3, r2
 8003640:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003642:	7bbb      	ldrb	r3, [r7, #14]
 8003644:	461a      	mov	r2, r3
 8003646:	2112      	movs	r1, #18
 8003648:	20d4      	movs	r0, #212	; 0xd4
 800364a:	f7ff f999 	bl	8002980 <SENSOR_IO_Write>
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800365c:	2300      	movs	r3, #0
 800365e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003660:	2111      	movs	r1, #17
 8003662:	20d4      	movs	r0, #212	; 0xd4
 8003664:	f7ff f9a6 	bl	80029b4 <SENSOR_IO_Read>
 8003668:	4603      	mov	r3, r0
 800366a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	461a      	mov	r2, r3
 8003678:	2111      	movs	r1, #17
 800367a:	20d4      	movs	r0, #212	; 0xd4
 800367c:	f7ff f980 	bl	8002980 <SENSOR_IO_Write>
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800368c:	f7ff f96e 	bl	800296c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8003690:	210f      	movs	r1, #15
 8003692:	20d4      	movs	r0, #212	; 0xd4
 8003694:	f7ff f98e 	bl	80029b4 <SENSOR_IO_Read>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	bd80      	pop	{r7, pc}

0800369e <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80036ac:	2116      	movs	r1, #22
 80036ae:	20d4      	movs	r0, #212	; 0xd4
 80036b0:	f7ff f980 	bl	80029b4 <SENSOR_IO_Read>
 80036b4:	4603      	mov	r3, r0
 80036b6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036be:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036cc:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	461a      	mov	r2, r3
 80036d2:	2116      	movs	r1, #22
 80036d4:	20d4      	movs	r0, #212	; 0xd4
 80036d6:	f7ff f953 	bl	8002980 <SENSOR_IO_Write>
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80036fa:	2111      	movs	r1, #17
 80036fc:	20d4      	movs	r0, #212	; 0xd4
 80036fe:	f7ff f959 	bl	80029b4 <SENSOR_IO_Read>
 8003702:	4603      	mov	r3, r0
 8003704:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8003706:	f107 0208 	add.w	r2, r7, #8
 800370a:	2306      	movs	r3, #6
 800370c:	2122      	movs	r1, #34	; 0x22
 800370e:	20d4      	movs	r0, #212	; 0xd4
 8003710:	f7ff f96e 	bl	80029f0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003714:	2300      	movs	r3, #0
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e01c      	b.n	8003754 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800371a:	7ffb      	ldrb	r3, [r7, #31]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	3301      	adds	r3, #1
 8003720:	3320      	adds	r3, #32
 8003722:	443b      	add	r3, r7
 8003724:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003728:	b29b      	uxth	r3, r3
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	b29a      	uxth	r2, r3
 800372e:	7ffb      	ldrb	r3, [r7, #31]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	3320      	adds	r3, #32
 8003734:	443b      	add	r3, r7
 8003736:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800373a:	b29b      	uxth	r3, r3
 800373c:	4413      	add	r3, r2
 800373e:	b29a      	uxth	r2, r3
 8003740:	7ffb      	ldrb	r3, [r7, #31]
 8003742:	b212      	sxth	r2, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	3320      	adds	r3, #32
 8003748:	443b      	add	r3, r7
 800374a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	3301      	adds	r3, #1
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	7ffb      	ldrb	r3, [r7, #31]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d9df      	bls.n	800371a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b0c      	cmp	r3, #12
 8003762:	d829      	bhi.n	80037b8 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	080037a1 	.word	0x080037a1
 8003770:	080037b9 	.word	0x080037b9
 8003774:	080037b9 	.word	0x080037b9
 8003778:	080037b9 	.word	0x080037b9
 800377c:	080037a7 	.word	0x080037a7
 8003780:	080037b9 	.word	0x080037b9
 8003784:	080037b9 	.word	0x080037b9
 8003788:	080037b9 	.word	0x080037b9
 800378c:	080037ad 	.word	0x080037ad
 8003790:	080037b9 	.word	0x080037b9
 8003794:	080037b9 	.word	0x080037b9
 8003798:	080037b9 	.word	0x080037b9
 800379c:	080037b3 	.word	0x080037b3
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80037a2:	61bb      	str	r3, [r7, #24]
    break;
 80037a4:	e008      	b.n	80037b8 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80037a6:	4b16      	ldr	r3, [pc, #88]	; (8003800 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80037a8:	61bb      	str	r3, [r7, #24]
    break;
 80037aa:	e005      	b.n	80037b8 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80037ac:	4b15      	ldr	r3, [pc, #84]	; (8003804 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80037ae:	61bb      	str	r3, [r7, #24]
    break;
 80037b0:	e002      	b.n	80037b8 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80037b4:	61bb      	str	r3, [r7, #24]
    break;    
 80037b6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e016      	b.n	80037ec <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80037be:	7ffb      	ldrb	r3, [r7, #31]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	3320      	adds	r3, #32
 80037c4:	443b      	add	r3, r7
 80037c6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037d2:	7ffb      	ldrb	r3, [r7, #31]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	edd7 7a06 	vldr	s15, [r7, #24]
 80037de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e2:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80037e6:	7ffb      	ldrb	r3, [r7, #31]
 80037e8:	3301      	adds	r3, #1
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	7ffb      	ldrb	r3, [r7, #31]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d9e5      	bls.n	80037be <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	410c0000 	.word	0x410c0000
 8003800:	418c0000 	.word	0x418c0000
 8003804:	420c0000 	.word	0x420c0000
 8003808:	428c0000 	.word	0x428c0000

0800380c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af04      	add	r7, sp, #16
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	9302      	str	r3, [sp, #8]
 800382c:	2301      	movs	r3, #1
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	1dfb      	adds	r3, r7, #7
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2301      	movs	r3, #1
 8003836:	2200      	movs	r2, #0
 8003838:	2178      	movs	r1, #120	; 0x78
 800383a:	4803      	ldr	r0, [pc, #12]	; (8003848 <ssd1306_WriteCommand+0x2c>)
 800383c:	f000 ffc6 	bl	80047cc <HAL_I2C_Mem_Write>
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000374 	.word	0x20000374

0800384c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af04      	add	r7, sp, #16
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f04f 32ff 	mov.w	r2, #4294967295
 800385e:	9202      	str	r2, [sp, #8]
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2301      	movs	r3, #1
 8003868:	2240      	movs	r2, #64	; 0x40
 800386a:	2178      	movs	r1, #120	; 0x78
 800386c:	4803      	ldr	r0, [pc, #12]	; (800387c <ssd1306_WriteData+0x30>)
 800386e:	f000 ffad 	bl	80047cc <HAL_I2C_Mem_Write>
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000374 	.word	0x20000374

08003880 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003884:	f7ff ffc2 	bl	800380c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003888:	2064      	movs	r0, #100	; 0x64
 800388a:	f000 fac5 	bl	8003e18 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800388e:	2000      	movs	r0, #0
 8003890:	f000 fa34 	bl	8003cfc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003894:	2020      	movs	r0, #32
 8003896:	f7ff ffc1 	bl	800381c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800389a:	2000      	movs	r0, #0
 800389c:	f7ff ffbe 	bl	800381c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80038a0:	20b0      	movs	r0, #176	; 0xb0
 80038a2:	f7ff ffbb 	bl	800381c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80038a6:	20c8      	movs	r0, #200	; 0xc8
 80038a8:	f7ff ffb8 	bl	800381c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80038ac:	2000      	movs	r0, #0
 80038ae:	f7ff ffb5 	bl	800381c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80038b2:	2010      	movs	r0, #16
 80038b4:	f7ff ffb2 	bl	800381c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80038b8:	2040      	movs	r0, #64	; 0x40
 80038ba:	f7ff ffaf 	bl	800381c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80038be:	20ff      	movs	r0, #255	; 0xff
 80038c0:	f000 fa09 	bl	8003cd6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80038c4:	20a1      	movs	r0, #161	; 0xa1
 80038c6:	f7ff ffa9 	bl	800381c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80038ca:	20a6      	movs	r0, #166	; 0xa6
 80038cc:	f7ff ffa6 	bl	800381c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80038d0:	20a8      	movs	r0, #168	; 0xa8
 80038d2:	f7ff ffa3 	bl	800381c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80038d6:	203f      	movs	r0, #63	; 0x3f
 80038d8:	f7ff ffa0 	bl	800381c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80038dc:	20a4      	movs	r0, #164	; 0xa4
 80038de:	f7ff ff9d 	bl	800381c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80038e2:	20d3      	movs	r0, #211	; 0xd3
 80038e4:	f7ff ff9a 	bl	800381c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80038e8:	2000      	movs	r0, #0
 80038ea:	f7ff ff97 	bl	800381c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80038ee:	20d5      	movs	r0, #213	; 0xd5
 80038f0:	f7ff ff94 	bl	800381c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80038f4:	20f0      	movs	r0, #240	; 0xf0
 80038f6:	f7ff ff91 	bl	800381c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80038fa:	20d9      	movs	r0, #217	; 0xd9
 80038fc:	f7ff ff8e 	bl	800381c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003900:	2022      	movs	r0, #34	; 0x22
 8003902:	f7ff ff8b 	bl	800381c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003906:	20da      	movs	r0, #218	; 0xda
 8003908:	f7ff ff88 	bl	800381c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800390c:	2012      	movs	r0, #18
 800390e:	f7ff ff85 	bl	800381c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003912:	20db      	movs	r0, #219	; 0xdb
 8003914:	f7ff ff82 	bl	800381c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003918:	2020      	movs	r0, #32
 800391a:	f7ff ff7f 	bl	800381c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800391e:	208d      	movs	r0, #141	; 0x8d
 8003920:	f7ff ff7c 	bl	800381c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003924:	2014      	movs	r0, #20
 8003926:	f7ff ff79 	bl	800381c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800392a:	2001      	movs	r0, #1
 800392c:	f000 f9e6 	bl	8003cfc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003930:	2000      	movs	r0, #0
 8003932:	f000 f80f 	bl	8003954 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003936:	f000 f831 	bl	800399c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <ssd1306_Init+0xd0>)
 800393c:	2200      	movs	r2, #0
 800393e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <ssd1306_Init+0xd0>)
 8003942:	2200      	movs	r2, #0
 8003944:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003946:	4b02      	ldr	r3, [pc, #8]	; (8003950 <ssd1306_Init+0xd0>)
 8003948:	2201      	movs	r2, #1
 800394a:	711a      	strb	r2, [r3, #4]
}
 800394c:	bf00      	nop
 800394e:	bd80      	pop	{r7, pc}
 8003950:	2000085c 	.word	0x2000085c

08003954 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e00d      	b.n	8003980 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <ssd1306_Fill+0x1a>
 800396a:	2100      	movs	r1, #0
 800396c:	e000      	b.n	8003970 <ssd1306_Fill+0x1c>
 800396e:	21ff      	movs	r1, #255	; 0xff
 8003970:	4a09      	ldr	r2, [pc, #36]	; (8003998 <ssd1306_Fill+0x44>)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	460a      	mov	r2, r1
 8003978:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3301      	adds	r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003986:	d3ed      	bcc.n	8003964 <ssd1306_Fill+0x10>
    }
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	2000045c 	.word	0x2000045c

0800399c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80039a2:	2300      	movs	r3, #0
 80039a4:	71fb      	strb	r3, [r7, #7]
 80039a6:	e016      	b.n	80039d6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	3b50      	subs	r3, #80	; 0x50
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff ff34 	bl	800381c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80039b4:	2000      	movs	r0, #0
 80039b6:	f7ff ff31 	bl	800381c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80039ba:	2010      	movs	r0, #16
 80039bc:	f7ff ff2e 	bl	800381c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	01db      	lsls	r3, r3, #7
 80039c4:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <ssd1306_UpdateScreen+0x4c>)
 80039c6:	4413      	add	r3, r2
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff3e 	bl	800384c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	3301      	adds	r3, #1
 80039d4:	71fb      	strb	r3, [r7, #7]
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	2b07      	cmp	r3, #7
 80039da:	d9e5      	bls.n	80039a8 <ssd1306_UpdateScreen+0xc>
    }
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	2000045c 	.word	0x2000045c

080039ec <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	71fb      	strb	r3, [r7, #7]
 80039f6:	460b      	mov	r3, r1
 80039f8:	71bb      	strb	r3, [r7, #6]
 80039fa:	4613      	mov	r3, r2
 80039fc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	db3d      	blt.n	8003a82 <ssd1306_DrawPixel+0x96>
 8003a06:	79bb      	ldrb	r3, [r7, #6]
 8003a08:	2b3f      	cmp	r3, #63	; 0x3f
 8003a0a:	d83a      	bhi.n	8003a82 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003a0c:	797b      	ldrb	r3, [r7, #5]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d11a      	bne.n	8003a48 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003a12:	79fa      	ldrb	r2, [r7, #7]
 8003a14:	79bb      	ldrb	r3, [r7, #6]
 8003a16:	08db      	lsrs	r3, r3, #3
 8003a18:	b2d8      	uxtb	r0, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	01db      	lsls	r3, r3, #7
 8003a1e:	4413      	add	r3, r2
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <ssd1306_DrawPixel+0xa4>)
 8003a22:	5cd3      	ldrb	r3, [r2, r3]
 8003a24:	b25a      	sxtb	r2, r3
 8003a26:	79bb      	ldrb	r3, [r7, #6]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	4313      	orrs	r3, r2
 8003a36:	b259      	sxtb	r1, r3
 8003a38:	79fa      	ldrb	r2, [r7, #7]
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	01db      	lsls	r3, r3, #7
 8003a3e:	4413      	add	r3, r2
 8003a40:	b2c9      	uxtb	r1, r1
 8003a42:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <ssd1306_DrawPixel+0xa4>)
 8003a44:	54d1      	strb	r1, [r2, r3]
 8003a46:	e01d      	b.n	8003a84 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003a48:	79fa      	ldrb	r2, [r7, #7]
 8003a4a:	79bb      	ldrb	r3, [r7, #6]
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	b2d8      	uxtb	r0, r3
 8003a50:	4603      	mov	r3, r0
 8003a52:	01db      	lsls	r3, r3, #7
 8003a54:	4413      	add	r3, r2
 8003a56:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <ssd1306_DrawPixel+0xa4>)
 8003a58:	5cd3      	ldrb	r3, [r2, r3]
 8003a5a:	b25a      	sxtb	r2, r3
 8003a5c:	79bb      	ldrb	r3, [r7, #6]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	b25b      	sxtb	r3, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	b25b      	sxtb	r3, r3
 8003a6e:	4013      	ands	r3, r2
 8003a70:	b259      	sxtb	r1, r3
 8003a72:	79fa      	ldrb	r2, [r7, #7]
 8003a74:	4603      	mov	r3, r0
 8003a76:	01db      	lsls	r3, r3, #7
 8003a78:	4413      	add	r3, r2
 8003a7a:	b2c9      	uxtb	r1, r1
 8003a7c:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <ssd1306_DrawPixel+0xa4>)
 8003a7e:	54d1      	strb	r1, [r2, r3]
 8003a80:	e000      	b.n	8003a84 <ssd1306_DrawPixel+0x98>
        return;
 8003a82:	bf00      	nop
    }
}
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	2000045c 	.word	0x2000045c

08003a94 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	1d38      	adds	r0, r7, #4
 8003a9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4623      	mov	r3, r4
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b1f      	cmp	r3, #31
 8003ab0:	d902      	bls.n	8003ab8 <ssd1306_WriteChar+0x24>
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b7e      	cmp	r3, #126	; 0x7e
 8003ab6:	d901      	bls.n	8003abc <ssd1306_WriteChar+0x28>
        return 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e06d      	b.n	8003b98 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003abc:	4b38      	ldr	r3, [pc, #224]	; (8003ba0 <ssd1306_WriteChar+0x10c>)
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	793b      	ldrb	r3, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	2b80      	cmp	r3, #128	; 0x80
 8003ac8:	dc06      	bgt.n	8003ad8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003aca:	4b35      	ldr	r3, [pc, #212]	; (8003ba0 <ssd1306_WriteChar+0x10c>)
 8003acc:	885b      	ldrh	r3, [r3, #2]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	797b      	ldrb	r3, [r7, #5]
 8003ad2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	dd01      	ble.n	8003adc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e05d      	b.n	8003b98 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	e04c      	b.n	8003b7c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	3b20      	subs	r3, #32
 8003ae8:	7979      	ldrb	r1, [r7, #5]
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	4619      	mov	r1, r3
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	440b      	add	r3, r1
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4413      	add	r3, r2
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003afc:	2300      	movs	r3, #0
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	e034      	b.n	8003b6c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d012      	beq.n	8003b38 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003b12:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <ssd1306_WriteChar+0x10c>)
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	b2d8      	uxtb	r0, r3
 8003b20:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <ssd1306_WriteChar+0x10c>)
 8003b22:	885b      	ldrh	r3, [r3, #2]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	7bba      	ldrb	r2, [r7, #14]
 8003b30:	4619      	mov	r1, r3
 8003b32:	f7ff ff5b 	bl	80039ec <ssd1306_DrawPixel>
 8003b36:	e016      	b.n	8003b66 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <ssd1306_WriteChar+0x10c>)
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	4413      	add	r3, r2
 8003b44:	b2d8      	uxtb	r0, r3
 8003b46:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <ssd1306_WriteChar+0x10c>)
 8003b48:	885b      	ldrh	r3, [r3, #2]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	b2d9      	uxtb	r1, r3
 8003b54:	7bbb      	ldrb	r3, [r7, #14]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bf0c      	ite	eq
 8003b5a:	2301      	moveq	r3, #1
 8003b5c:	2300      	movne	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	f7ff ff43 	bl	80039ec <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	793b      	ldrb	r3, [r7, #4]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d3c5      	bcc.n	8003b02 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	797b      	ldrb	r3, [r7, #5]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d3ad      	bcc.n	8003ae2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <ssd1306_WriteChar+0x10c>)
 8003b88:	881a      	ldrh	r2, [r3, #0]
 8003b8a:	793b      	ldrb	r3, [r7, #4]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <ssd1306_WriteChar+0x10c>)
 8003b94:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3724      	adds	r7, #36	; 0x24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd90      	pop	{r4, r7, pc}
 8003ba0:	2000085c 	.word	0x2000085c

08003ba4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	1d38      	adds	r0, r7, #4
 8003bae:	e880 0006 	stmia.w	r0, {r1, r2}
 8003bb2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003bb4:	e012      	b.n	8003bdc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	7818      	ldrb	r0, [r3, #0]
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	1d3a      	adds	r2, r7, #4
 8003bbe:	ca06      	ldmia	r2, {r1, r2}
 8003bc0:	f7ff ff68 	bl	8003a94 <ssd1306_WriteChar>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d002      	beq.n	8003bd6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	e008      	b.n	8003be8 <ssd1306_WriteString+0x44>
        }
        str++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e8      	bne.n	8003bb6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	781b      	ldrb	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	460a      	mov	r2, r1
 8003bfa:	71fb      	strb	r3, [r7, #7]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <ssd1306_SetCursor+0x2c>)
 8003c06:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003c08:	79bb      	ldrb	r3, [r7, #6]
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <ssd1306_SetCursor+0x2c>)
 8003c0e:	805a      	strh	r2, [r3, #2]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	2000085c 	.word	0x2000085c

08003c20 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	603a      	str	r2, [r7, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	71bb      	strb	r3, [r7, #6]
 8003c32:	4613      	mov	r3, r2
 8003c34:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003c36:	797b      	ldrb	r3, [r7, #5]
 8003c38:	3307      	adds	r3, #7
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	da00      	bge.n	8003c40 <ssd1306_DrawBitmap+0x20>
 8003c3e:	3307      	adds	r3, #7
 8003c40:	10db      	asrs	r3, r3, #3
 8003c42:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	db3e      	blt.n	8003cce <ssd1306_DrawBitmap+0xae>
 8003c50:	79bb      	ldrb	r3, [r7, #6]
 8003c52:	2b3f      	cmp	r3, #63	; 0x3f
 8003c54:	d83b      	bhi.n	8003cce <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8003c56:	2300      	movs	r3, #0
 8003c58:	73bb      	strb	r3, [r7, #14]
 8003c5a:	e033      	b.n	8003cc4 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	737b      	strb	r3, [r7, #13]
 8003c60:	e026      	b.n	8003cb0 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8003c62:	7b7b      	ldrb	r3, [r7, #13]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
 8003c72:	e00d      	b.n	8003c90 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003c74:	7bbb      	ldrb	r3, [r7, #14]
 8003c76:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	7b7a      	ldrb	r2, [r7, #13]
 8003c80:	08d2      	lsrs	r2, r2, #3
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	4413      	add	r3, r2
 8003c86:	461a      	mov	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8003c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	da08      	bge.n	8003caa <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8003c98:	79fa      	ldrb	r2, [r7, #7]
 8003c9a:	7b7b      	ldrb	r3, [r7, #13]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	7f3a      	ldrb	r2, [r7, #28]
 8003ca2:	79b9      	ldrb	r1, [r7, #6]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fea1 	bl	80039ec <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8003caa:	7b7b      	ldrb	r3, [r7, #13]
 8003cac:	3301      	adds	r3, #1
 8003cae:	737b      	strb	r3, [r7, #13]
 8003cb0:	7b7a      	ldrb	r2, [r7, #13]
 8003cb2:	797b      	ldrb	r3, [r7, #5]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d3d4      	bcc.n	8003c62 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003cb8:	7bbb      	ldrb	r3, [r7, #14]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	73bb      	strb	r3, [r7, #14]
 8003cbe:	79bb      	ldrb	r3, [r7, #6]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	71bb      	strb	r3, [r7, #6]
 8003cc4:	7bba      	ldrb	r2, [r7, #14]
 8003cc6:	7e3b      	ldrb	r3, [r7, #24]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3c7      	bcc.n	8003c5c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8003ccc:	e000      	b.n	8003cd0 <ssd1306_DrawBitmap+0xb0>
        return;
 8003cce:	bf00      	nop
}
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	4603      	mov	r3, r0
 8003cde:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003ce0:	2381      	movs	r3, #129	; 0x81
 8003ce2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fd98 	bl	800381c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fd94 	bl	800381c <ssd1306_WriteCommand>
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003d0c:	23af      	movs	r3, #175	; 0xaf
 8003d0e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003d10:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <ssd1306_SetDisplayOn+0x38>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	715a      	strb	r2, [r3, #5]
 8003d16:	e004      	b.n	8003d22 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003d18:	23ae      	movs	r3, #174	; 0xae
 8003d1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <ssd1306_SetDisplayOn+0x38>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fd79 	bl	800381c <ssd1306_WriteCommand>
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	2000085c 	.word	0x2000085c

08003d38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d42:	2003      	movs	r0, #3
 8003d44:	f000 f95a 	bl	8003ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f000 f80d 	bl	8003d68 <HAL_InitTick>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	71fb      	strb	r3, [r7, #7]
 8003d58:	e001      	b.n	8003d5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d5a:	f7fe fb37 	bl	80023cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003d74:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <HAL_InitTick+0x68>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d022      	beq.n	8003dc2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003d7c:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <HAL_InitTick+0x6c>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <HAL_InitTick+0x68>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f968 	bl	8004066 <HAL_SYSTICK_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10f      	bne.n	8003dbc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b0f      	cmp	r3, #15
 8003da0:	d809      	bhi.n	8003db6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003da2:	2200      	movs	r2, #0
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	f04f 30ff 	mov.w	r0, #4294967295
 8003daa:	f000 f932 	bl	8004012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <HAL_InitTick+0x70>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	e007      	b.n	8003dc6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
 8003dba:	e004      	b.n	8003dc6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
 8003dc0:	e001      	b.n	8003dc6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000100 	.word	0x20000100
 8003dd4:	2000001c 	.word	0x2000001c
 8003dd8:	200000fc 	.word	0x200000fc

08003ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_IncTick+0x1c>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_IncTick+0x20>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4413      	add	r3, r2
 8003dea:	4a03      	ldr	r2, [pc, #12]	; (8003df8 <HAL_IncTick+0x1c>)
 8003dec:	6013      	str	r3, [r2, #0]
}
 8003dee:	bf00      	nop
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	20000864 	.word	0x20000864
 8003dfc:	20000100 	.word	0x20000100

08003e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return uwTick;
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <HAL_GetTick+0x14>)
 8003e06:	681b      	ldr	r3, [r3, #0]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000864 	.word	0x20000864

08003e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e20:	f7ff ffee 	bl	8003e00 <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d004      	beq.n	8003e3c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_Delay+0x40>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e3c:	bf00      	nop
 8003e3e:	f7ff ffdf 	bl	8003e00 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d8f7      	bhi.n	8003e3e <HAL_Delay+0x26>
  {
  }
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000100 	.word	0x20000100

08003e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e8e:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	60d3      	str	r3, [r2, #12]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <__NVIC_GetPriorityGrouping+0x18>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	f003 0307 	and.w	r3, r3, #7
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	db0b      	blt.n	8003eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	f003 021f 	and.w	r2, r3, #31
 8003ed8:	4907      	ldr	r1, [pc, #28]	; (8003ef8 <__NVIC_EnableIRQ+0x38>)
 8003eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	e000e100 	.word	0xe000e100

08003efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	6039      	str	r1, [r7, #0]
 8003f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	db0a      	blt.n	8003f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	490c      	ldr	r1, [pc, #48]	; (8003f48 <__NVIC_SetPriority+0x4c>)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	0112      	lsls	r2, r2, #4
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	440b      	add	r3, r1
 8003f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f24:	e00a      	b.n	8003f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4908      	ldr	r1, [pc, #32]	; (8003f4c <__NVIC_SetPriority+0x50>)
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	3b04      	subs	r3, #4
 8003f34:	0112      	lsls	r2, r2, #4
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	440b      	add	r3, r1
 8003f3a:	761a      	strb	r2, [r3, #24]
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	e000e100 	.word	0xe000e100
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f1c3 0307 	rsb	r3, r3, #7
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	bf28      	it	cs
 8003f6e:	2304      	movcs	r3, #4
 8003f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3304      	adds	r3, #4
 8003f76:	2b06      	cmp	r3, #6
 8003f78:	d902      	bls.n	8003f80 <NVIC_EncodePriority+0x30>
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3b03      	subs	r3, #3
 8003f7e:	e000      	b.n	8003f82 <NVIC_EncodePriority+0x32>
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	401a      	ands	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f98:	f04f 31ff 	mov.w	r1, #4294967295
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	43d9      	mvns	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	4313      	orrs	r3, r2
         );
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3724      	adds	r7, #36	; 0x24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc8:	d301      	bcc.n	8003fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e00f      	b.n	8003fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <SysTick_Config+0x40>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fd6:	210f      	movs	r1, #15
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	f7ff ff8e 	bl	8003efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <SysTick_Config+0x40>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fe6:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <SysTick_Config+0x40>)
 8003fe8:	2207      	movs	r2, #7
 8003fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	e000e010 	.word	0xe000e010

08003ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff ff29 	bl	8003e5c <__NVIC_SetPriorityGrouping>
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	4603      	mov	r3, r0
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004024:	f7ff ff3e 	bl	8003ea4 <__NVIC_GetPriorityGrouping>
 8004028:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	6978      	ldr	r0, [r7, #20]
 8004030:	f7ff ff8e 	bl	8003f50 <NVIC_EncodePriority>
 8004034:	4602      	mov	r2, r0
 8004036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff ff5d 	bl	8003efc <__NVIC_SetPriority>
}
 8004042:	bf00      	nop
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	4603      	mov	r3, r0
 8004052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff31 	bl	8003ec0 <__NVIC_EnableIRQ>
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff ffa2 	bl	8003fb8 <SysTick_Config>
 8004074:	4603      	mov	r3, r0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800408e:	e17f      	b.n	8004390 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	2101      	movs	r1, #1
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	fa01 f303 	lsl.w	r3, r1, r3
 800409c:	4013      	ands	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8171 	beq.w	800438a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d00b      	beq.n	80040c8 <HAL_GPIO_Init+0x48>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d007      	beq.n	80040c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040bc:	2b11      	cmp	r3, #17
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b12      	cmp	r3, #18
 80040c6:	d130      	bne.n	800412a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	2203      	movs	r2, #3
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040fe:	2201      	movs	r2, #1
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4013      	ands	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	f003 0201 	and.w	r2, r3, #1
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b03      	cmp	r3, #3
 8004134:	d118      	bne.n	8004168 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800413c:	2201      	movs	r2, #1
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	08db      	lsrs	r3, r3, #3
 8004152:	f003 0201 	and.w	r2, r3, #1
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	2203      	movs	r2, #3
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4013      	ands	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d003      	beq.n	80041a8 <HAL_GPIO_Init+0x128>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b12      	cmp	r3, #18
 80041a6:	d123      	bne.n	80041f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	08da      	lsrs	r2, r3, #3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3208      	adds	r2, #8
 80041b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	220f      	movs	r2, #15
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	43db      	mvns	r3, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	08da      	lsrs	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3208      	adds	r2, #8
 80041ea:	6939      	ldr	r1, [r7, #16]
 80041ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	2203      	movs	r2, #3
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 0203 	and.w	r2, r3, #3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 80ac 	beq.w	800438a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004232:	4b5f      	ldr	r3, [pc, #380]	; (80043b0 <HAL_GPIO_Init+0x330>)
 8004234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004236:	4a5e      	ldr	r2, [pc, #376]	; (80043b0 <HAL_GPIO_Init+0x330>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	6613      	str	r3, [r2, #96]	; 0x60
 800423e:	4b5c      	ldr	r3, [pc, #368]	; (80043b0 <HAL_GPIO_Init+0x330>)
 8004240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800424a:	4a5a      	ldr	r2, [pc, #360]	; (80043b4 <HAL_GPIO_Init+0x334>)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	3302      	adds	r3, #2
 8004252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004256:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	220f      	movs	r2, #15
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4013      	ands	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004274:	d025      	beq.n	80042c2 <HAL_GPIO_Init+0x242>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4f      	ldr	r2, [pc, #316]	; (80043b8 <HAL_GPIO_Init+0x338>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01f      	beq.n	80042be <HAL_GPIO_Init+0x23e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a4e      	ldr	r2, [pc, #312]	; (80043bc <HAL_GPIO_Init+0x33c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d019      	beq.n	80042ba <HAL_GPIO_Init+0x23a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a4d      	ldr	r2, [pc, #308]	; (80043c0 <HAL_GPIO_Init+0x340>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <HAL_GPIO_Init+0x236>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a4c      	ldr	r2, [pc, #304]	; (80043c4 <HAL_GPIO_Init+0x344>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00d      	beq.n	80042b2 <HAL_GPIO_Init+0x232>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a4b      	ldr	r2, [pc, #300]	; (80043c8 <HAL_GPIO_Init+0x348>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d007      	beq.n	80042ae <HAL_GPIO_Init+0x22e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a4a      	ldr	r2, [pc, #296]	; (80043cc <HAL_GPIO_Init+0x34c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_GPIO_Init+0x22a>
 80042a6:	2306      	movs	r3, #6
 80042a8:	e00c      	b.n	80042c4 <HAL_GPIO_Init+0x244>
 80042aa:	2307      	movs	r3, #7
 80042ac:	e00a      	b.n	80042c4 <HAL_GPIO_Init+0x244>
 80042ae:	2305      	movs	r3, #5
 80042b0:	e008      	b.n	80042c4 <HAL_GPIO_Init+0x244>
 80042b2:	2304      	movs	r3, #4
 80042b4:	e006      	b.n	80042c4 <HAL_GPIO_Init+0x244>
 80042b6:	2303      	movs	r3, #3
 80042b8:	e004      	b.n	80042c4 <HAL_GPIO_Init+0x244>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e002      	b.n	80042c4 <HAL_GPIO_Init+0x244>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <HAL_GPIO_Init+0x244>
 80042c2:	2300      	movs	r3, #0
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	f002 0203 	and.w	r2, r2, #3
 80042ca:	0092      	lsls	r2, r2, #2
 80042cc:	4093      	lsls	r3, r2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042d4:	4937      	ldr	r1, [pc, #220]	; (80043b4 <HAL_GPIO_Init+0x334>)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	089b      	lsrs	r3, r3, #2
 80042da:	3302      	adds	r3, #2
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042e2:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <HAL_GPIO_Init+0x350>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4013      	ands	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004306:	4a32      	ldr	r2, [pc, #200]	; (80043d0 <HAL_GPIO_Init+0x350>)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800430c:	4b30      	ldr	r3, [pc, #192]	; (80043d0 <HAL_GPIO_Init+0x350>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	43db      	mvns	r3, r3
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4013      	ands	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004330:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <HAL_GPIO_Init+0x350>)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004336:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <HAL_GPIO_Init+0x350>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	43db      	mvns	r3, r3
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4013      	ands	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800435a:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <HAL_GPIO_Init+0x350>)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <HAL_GPIO_Init+0x350>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	43db      	mvns	r3, r3
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4013      	ands	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004384:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <HAL_GPIO_Init+0x350>)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	3301      	adds	r3, #1
 800438e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	fa22 f303 	lsr.w	r3, r2, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	f47f ae78 	bne.w	8004090 <HAL_GPIO_Init+0x10>
  }
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40010000 	.word	0x40010000
 80043b8:	48000400 	.word	0x48000400
 80043bc:	48000800 	.word	0x48000800
 80043c0:	48000c00 	.word	0x48000c00
 80043c4:	48001000 	.word	0x48001000
 80043c8:	48001400 	.word	0x48001400
 80043cc:	48001800 	.word	0x48001800
 80043d0:	40010400 	.word	0x40010400

080043d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80043e2:	e0cd      	b.n	8004580 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80043e4:	2201      	movs	r2, #1
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80c0 	beq.w	800457a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80043fa:	4a68      	ldr	r2, [pc, #416]	; (800459c <HAL_GPIO_DeInit+0x1c8>)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	089b      	lsrs	r3, r3, #2
 8004400:	3302      	adds	r3, #2
 8004402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004406:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	220f      	movs	r2, #15
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4013      	ands	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004422:	d025      	beq.n	8004470 <HAL_GPIO_DeInit+0x9c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a5e      	ldr	r2, [pc, #376]	; (80045a0 <HAL_GPIO_DeInit+0x1cc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d01f      	beq.n	800446c <HAL_GPIO_DeInit+0x98>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a5d      	ldr	r2, [pc, #372]	; (80045a4 <HAL_GPIO_DeInit+0x1d0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d019      	beq.n	8004468 <HAL_GPIO_DeInit+0x94>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a5c      	ldr	r2, [pc, #368]	; (80045a8 <HAL_GPIO_DeInit+0x1d4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <HAL_GPIO_DeInit+0x90>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a5b      	ldr	r2, [pc, #364]	; (80045ac <HAL_GPIO_DeInit+0x1d8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00d      	beq.n	8004460 <HAL_GPIO_DeInit+0x8c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a5a      	ldr	r2, [pc, #360]	; (80045b0 <HAL_GPIO_DeInit+0x1dc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d007      	beq.n	800445c <HAL_GPIO_DeInit+0x88>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a59      	ldr	r2, [pc, #356]	; (80045b4 <HAL_GPIO_DeInit+0x1e0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d101      	bne.n	8004458 <HAL_GPIO_DeInit+0x84>
 8004454:	2306      	movs	r3, #6
 8004456:	e00c      	b.n	8004472 <HAL_GPIO_DeInit+0x9e>
 8004458:	2307      	movs	r3, #7
 800445a:	e00a      	b.n	8004472 <HAL_GPIO_DeInit+0x9e>
 800445c:	2305      	movs	r3, #5
 800445e:	e008      	b.n	8004472 <HAL_GPIO_DeInit+0x9e>
 8004460:	2304      	movs	r3, #4
 8004462:	e006      	b.n	8004472 <HAL_GPIO_DeInit+0x9e>
 8004464:	2303      	movs	r3, #3
 8004466:	e004      	b.n	8004472 <HAL_GPIO_DeInit+0x9e>
 8004468:	2302      	movs	r3, #2
 800446a:	e002      	b.n	8004472 <HAL_GPIO_DeInit+0x9e>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <HAL_GPIO_DeInit+0x9e>
 8004470:	2300      	movs	r3, #0
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	f002 0203 	and.w	r2, r2, #3
 8004478:	0092      	lsls	r2, r2, #2
 800447a:	4093      	lsls	r3, r2
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	429a      	cmp	r2, r3
 8004480:	d132      	bne.n	80044e8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004482:	4b4d      	ldr	r3, [pc, #308]	; (80045b8 <HAL_GPIO_DeInit+0x1e4>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	43db      	mvns	r3, r3
 800448a:	494b      	ldr	r1, [pc, #300]	; (80045b8 <HAL_GPIO_DeInit+0x1e4>)
 800448c:	4013      	ands	r3, r2
 800448e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004490:	4b49      	ldr	r3, [pc, #292]	; (80045b8 <HAL_GPIO_DeInit+0x1e4>)
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	43db      	mvns	r3, r3
 8004498:	4947      	ldr	r1, [pc, #284]	; (80045b8 <HAL_GPIO_DeInit+0x1e4>)
 800449a:	4013      	ands	r3, r2
 800449c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800449e:	4b46      	ldr	r3, [pc, #280]	; (80045b8 <HAL_GPIO_DeInit+0x1e4>)
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	43db      	mvns	r3, r3
 80044a6:	4944      	ldr	r1, [pc, #272]	; (80045b8 <HAL_GPIO_DeInit+0x1e4>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80044ac:	4b42      	ldr	r3, [pc, #264]	; (80045b8 <HAL_GPIO_DeInit+0x1e4>)
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	43db      	mvns	r3, r3
 80044b4:	4940      	ldr	r1, [pc, #256]	; (80045b8 <HAL_GPIO_DeInit+0x1e4>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	220f      	movs	r2, #15
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80044ca:	4a34      	ldr	r2, [pc, #208]	; (800459c <HAL_GPIO_DeInit+0x1c8>)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	3302      	adds	r3, #2
 80044d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	43da      	mvns	r2, r3
 80044da:	4830      	ldr	r0, [pc, #192]	; (800459c <HAL_GPIO_DeInit+0x1c8>)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	400a      	ands	r2, r1
 80044e2:	3302      	adds	r3, #2
 80044e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	2103      	movs	r1, #3
 80044f2:	fa01 f303 	lsl.w	r3, r1, r3
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	08da      	lsrs	r2, r3, #3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3208      	adds	r2, #8
 8004504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	08d2      	lsrs	r2, r2, #3
 800451c:	4019      	ands	r1, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3208      	adds	r2, #8
 8004522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	2103      	movs	r1, #3
 8004530:	fa01 f303 	lsl.w	r3, r1, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	401a      	ands	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	2101      	movs	r1, #1
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	401a      	ands	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	2103      	movs	r1, #3
 800455a:	fa01 f303 	lsl.w	r3, r1, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	401a      	ands	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	2101      	movs	r1, #1
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	fa01 f303 	lsl.w	r3, r1, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	401a      	ands	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	3301      	adds	r3, #1
 800457e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	f47f af2b 	bne.w	80043e4 <HAL_GPIO_DeInit+0x10>
  }
}
 800458e:	bf00      	nop
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40010000 	.word	0x40010000
 80045a0:	48000400 	.word	0x48000400
 80045a4:	48000800 	.word	0x48000800
 80045a8:	48000c00 	.word	0x48000c00
 80045ac:	48001000 	.word	0x48001000
 80045b0:	48001400 	.word	0x48001400
 80045b4:	48001800 	.word	0x48001800
 80045b8:	40010400 	.word	0x40010400

080045bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	807b      	strh	r3, [r7, #2]
 80045c8:	4613      	mov	r3, r2
 80045ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045cc:	787b      	ldrb	r3, [r7, #1]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045d2:	887a      	ldrh	r2, [r7, #2]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045d8:	e002      	b.n	80045e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045da:	887a      	ldrh	r2, [r7, #2]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004604:	887a      	ldrh	r2, [r7, #2]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800460a:	e002      	b.n	8004612 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800460c:	887a      	ldrh	r2, [r7, #2]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	619a      	str	r2, [r3, #24]
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d006      	beq.n	8004644 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004636:	4a05      	ldr	r2, [pc, #20]	; (800464c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004638:	88fb      	ldrh	r3, [r7, #6]
 800463a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	4618      	mov	r0, r3
 8004640:	f7fc fdec 	bl	800121c <HAL_GPIO_EXTI_Callback>
  }
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40010400 	.word	0x40010400

08004650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e081      	b.n	8004766 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fd fecc 	bl	8002414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	; 0x24
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d107      	bne.n	80046ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	e006      	b.n	80046d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d104      	bne.n	80046ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800470c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	ea42 0103 	orr.w	r1, r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	021a      	lsls	r2, r3, #8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69d9      	ldr	r1, [r3, #28]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1a      	ldr	r2, [r3, #32]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e021      	b.n	80047c4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2224      	movs	r2, #36	; 0x24
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fd fe7f 	bl	800249c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	4608      	mov	r0, r1
 80047d6:	4611      	mov	r1, r2
 80047d8:	461a      	mov	r2, r3
 80047da:	4603      	mov	r3, r0
 80047dc:	817b      	strh	r3, [r7, #10]
 80047de:	460b      	mov	r3, r1
 80047e0:	813b      	strh	r3, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	f040 80f9 	bne.w	80049e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HAL_I2C_Mem_Write+0x34>
 80047fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004806:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0ed      	b.n	80049e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_I2C_Mem_Write+0x4e>
 8004816:	2302      	movs	r3, #2
 8004818:	e0e6      	b.n	80049e8 <HAL_I2C_Mem_Write+0x21c>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004822:	f7ff faed 	bl	8003e00 <HAL_GetTick>
 8004826:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	2319      	movs	r3, #25
 800482e:	2201      	movs	r2, #1
 8004830:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fac3 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0d1      	b.n	80049e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2221      	movs	r2, #33	; 0x21
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2240      	movs	r2, #64	; 0x40
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a3a      	ldr	r2, [r7, #32]
 800485e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004864:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800486c:	88f8      	ldrh	r0, [r7, #6]
 800486e:	893a      	ldrh	r2, [r7, #8]
 8004870:	8979      	ldrh	r1, [r7, #10]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	4603      	mov	r3, r0
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f9d3 	bl	8004c28 <I2C_RequestMemoryWrite>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0a9      	b.n	80049e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2bff      	cmp	r3, #255	; 0xff
 800489c:	d90e      	bls.n	80048bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	22ff      	movs	r2, #255	; 0xff
 80048a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	8979      	ldrh	r1, [r7, #10]
 80048ac:	2300      	movs	r3, #0
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fba5 	bl	8005004 <I2C_TransferConfig>
 80048ba:	e00f      	b.n	80048dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	8979      	ldrh	r1, [r7, #10]
 80048ce:	2300      	movs	r3, #0
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fb94 	bl	8005004 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 faad 	bl	8004e40 <I2C_WaitOnTXISFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e07b      	b.n	80049e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	781a      	ldrb	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d034      	beq.n	8004994 <HAL_I2C_Mem_Write+0x1c8>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d130      	bne.n	8004994 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	2200      	movs	r2, #0
 800493a:	2180      	movs	r1, #128	; 0x80
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fa3f 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e04d      	b.n	80049e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2bff      	cmp	r3, #255	; 0xff
 8004954:	d90e      	bls.n	8004974 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	22ff      	movs	r2, #255	; 0xff
 800495a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004960:	b2da      	uxtb	r2, r3
 8004962:	8979      	ldrh	r1, [r7, #10]
 8004964:	2300      	movs	r3, #0
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fb49 	bl	8005004 <I2C_TransferConfig>
 8004972:	e00f      	b.n	8004994 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	b2da      	uxtb	r2, r3
 8004984:	8979      	ldrh	r1, [r7, #10]
 8004986:	2300      	movs	r3, #0
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fb38 	bl	8005004 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d19e      	bne.n	80048dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fa8c 	bl	8004ec0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e01a      	b.n	80049e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2220      	movs	r2, #32
 80049b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <HAL_I2C_Mem_Write+0x224>)
 80049c6:	400b      	ands	r3, r1
 80049c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
  }
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	fe00e800 	.word	0xfe00e800

080049f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	4608      	mov	r0, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	461a      	mov	r2, r3
 8004a02:	4603      	mov	r3, r0
 8004a04:	817b      	strh	r3, [r7, #10]
 8004a06:	460b      	mov	r3, r1
 8004a08:	813b      	strh	r3, [r7, #8]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	f040 80fd 	bne.w	8004c16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_I2C_Mem_Read+0x34>
 8004a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0f1      	b.n	8004c18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2C_Mem_Read+0x4e>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e0ea      	b.n	8004c18 <HAL_I2C_Mem_Read+0x224>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a4a:	f7ff f9d9 	bl	8003e00 <HAL_GetTick>
 8004a4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2319      	movs	r3, #25
 8004a56:	2201      	movs	r2, #1
 8004a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f9af 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0d5      	b.n	8004c18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2222      	movs	r2, #34	; 0x22
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2240      	movs	r2, #64	; 0x40
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a3a      	ldr	r2, [r7, #32]
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a94:	88f8      	ldrh	r0, [r7, #6]
 8004a96:	893a      	ldrh	r2, [r7, #8]
 8004a98:	8979      	ldrh	r1, [r7, #10]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f913 	bl	8004cd0 <I2C_RequestMemoryRead>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0ad      	b.n	8004c18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2bff      	cmp	r3, #255	; 0xff
 8004ac4:	d90e      	bls.n	8004ae4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	22ff      	movs	r2, #255	; 0xff
 8004aca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	8979      	ldrh	r1, [r7, #10]
 8004ad4:	4b52      	ldr	r3, [pc, #328]	; (8004c20 <HAL_I2C_Mem_Read+0x22c>)
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fa91 	bl	8005004 <I2C_TransferConfig>
 8004ae2:	e00f      	b.n	8004b04 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	8979      	ldrh	r1, [r7, #10]
 8004af6:	4b4a      	ldr	r3, [pc, #296]	; (8004c20 <HAL_I2C_Mem_Read+0x22c>)
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fa80 	bl	8005004 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2104      	movs	r1, #4
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f956 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e07c      	b.n	8004c18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d034      	beq.n	8004bc4 <HAL_I2C_Mem_Read+0x1d0>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d130      	bne.n	8004bc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2180      	movs	r1, #128	; 0x80
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f927 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e04d      	b.n	8004c18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2bff      	cmp	r3, #255	; 0xff
 8004b84:	d90e      	bls.n	8004ba4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	22ff      	movs	r2, #255	; 0xff
 8004b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	8979      	ldrh	r1, [r7, #10]
 8004b94:	2300      	movs	r3, #0
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fa31 	bl	8005004 <I2C_TransferConfig>
 8004ba2:	e00f      	b.n	8004bc4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	8979      	ldrh	r1, [r7, #10]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fa20 	bl	8005004 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d19a      	bne.n	8004b04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f974 	bl	8004ec0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e01a      	b.n	8004c18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2220      	movs	r2, #32
 8004be8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6859      	ldr	r1, [r3, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_I2C_Mem_Read+0x230>)
 8004bf6:	400b      	ands	r3, r1
 8004bf8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e000      	b.n	8004c18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
  }
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	80002400 	.word	0x80002400
 8004c24:	fe00e800 	.word	0xfe00e800

08004c28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	4608      	mov	r0, r1
 8004c32:	4611      	mov	r1, r2
 8004c34:	461a      	mov	r2, r3
 8004c36:	4603      	mov	r3, r0
 8004c38:	817b      	strh	r3, [r7, #10]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	813b      	strh	r3, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	8979      	ldrh	r1, [r7, #10]
 8004c48:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <I2C_RequestMemoryWrite+0xa4>)
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f9d7 	bl	8005004 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	69b9      	ldr	r1, [r7, #24]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f8f0 	bl	8004e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e02c      	b.n	8004cc4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d105      	bne.n	8004c7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c70:	893b      	ldrh	r3, [r7, #8]
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	629a      	str	r2, [r3, #40]	; 0x28
 8004c7a:	e015      	b.n	8004ca8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c7c:	893b      	ldrh	r3, [r7, #8]
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	69b9      	ldr	r1, [r7, #24]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f8d6 	bl	8004e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e012      	b.n	8004cc4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c9e:	893b      	ldrh	r3, [r7, #8]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2180      	movs	r1, #128	; 0x80
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f884 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	80002000 	.word	0x80002000

08004cd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	817b      	strh	r3, [r7, #10]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	813b      	strh	r3, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	8979      	ldrh	r1, [r7, #10]
 8004cf0:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <I2C_RequestMemoryRead+0xa4>)
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f984 	bl	8005004 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	69b9      	ldr	r1, [r7, #24]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f89d 	bl	8004e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e02c      	b.n	8004d6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d105      	bne.n	8004d22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d16:	893b      	ldrh	r3, [r7, #8]
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d20:	e015      	b.n	8004d4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d22:	893b      	ldrh	r3, [r7, #8]
 8004d24:	0a1b      	lsrs	r3, r3, #8
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	69b9      	ldr	r1, [r7, #24]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f883 	bl	8004e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e012      	b.n	8004d6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d44:	893b      	ldrh	r3, [r7, #8]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2200      	movs	r2, #0
 8004d56:	2140      	movs	r1, #64	; 0x40
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f831 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	80002000 	.word	0x80002000

08004d78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d103      	bne.n	8004d96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d007      	beq.n	8004db4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	619a      	str	r2, [r3, #24]
  }
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dd0:	e022      	b.n	8004e18 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d01e      	beq.n	8004e18 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dda:	f7ff f811 	bl	8003e00 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d113      	bne.n	8004e18 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	f043 0220 	orr.w	r2, r3, #32
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e00f      	b.n	8004e38 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4013      	ands	r3, r2
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d0cd      	beq.n	8004dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e4c:	e02c      	b.n	8004ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f870 	bl	8004f38 <I2C_IsAcknowledgeFailed>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e02a      	b.n	8004eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d01e      	beq.n	8004ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6a:	f7fe ffc9 	bl	8003e00 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d113      	bne.n	8004ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	f043 0220 	orr.w	r2, r3, #32
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e007      	b.n	8004eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d1cb      	bne.n	8004e4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ecc:	e028      	b.n	8004f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f830 	bl	8004f38 <I2C_IsAcknowledgeFailed>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e026      	b.n	8004f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee2:	f7fe ff8d 	bl	8003e00 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d302      	bcc.n	8004ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d113      	bne.n	8004f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efc:	f043 0220 	orr.w	r2, r3, #32
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e007      	b.n	8004f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d1cf      	bne.n	8004ece <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d151      	bne.n	8004ff6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f52:	e022      	b.n	8004f9a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	d01e      	beq.n	8004f9a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5c:	f7fe ff50 	bl	8003e00 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d302      	bcc.n	8004f72 <I2C_IsAcknowledgeFailed+0x3a>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d113      	bne.n	8004f9a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e02e      	b.n	8004ff8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d1d5      	bne.n	8004f54 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2210      	movs	r2, #16
 8004fae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff fedd 	bl	8004d78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <I2C_IsAcknowledgeFailed+0xc8>)
 8004fca:	400b      	ands	r3, r1
 8004fcc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	f043 0204 	orr.w	r2, r3, #4
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	fe00e800 	.word	0xfe00e800

08005004 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	817b      	strh	r3, [r7, #10]
 8005012:	4613      	mov	r3, r2
 8005014:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	0d5b      	lsrs	r3, r3, #21
 8005020:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005024:	4b0d      	ldr	r3, [pc, #52]	; (800505c <I2C_TransferConfig+0x58>)
 8005026:	430b      	orrs	r3, r1
 8005028:	43db      	mvns	r3, r3
 800502a:	ea02 0103 	and.w	r1, r2, r3
 800502e:	897b      	ldrh	r3, [r7, #10]
 8005030:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005034:	7a7b      	ldrb	r3, [r7, #9]
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	431a      	orrs	r2, r3
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	431a      	orrs	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	03ff63ff 	.word	0x03ff63ff

08005060 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b20      	cmp	r3, #32
 8005074:	d138      	bne.n	80050e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005080:	2302      	movs	r3, #2
 8005082:	e032      	b.n	80050ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2224      	movs	r2, #36	; 0x24
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0201 	bic.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6819      	ldr	r1, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b20      	cmp	r3, #32
 800510a:	d139      	bne.n	8005180 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005116:	2302      	movs	r3, #2
 8005118:	e033      	b.n	8005182 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2224      	movs	r2, #36	; 0x24
 8005126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005148:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	e000      	b.n	8005182 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005180:	2302      	movs	r3, #2
  }
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005190:	b480      	push	{r7}
 8005192:	b089      	sub	sp, #36	; 0x24
 8005194:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800519e:	4b3e      	ldr	r3, [pc, #248]	; (8005298 <HAL_RCC_GetSysClockFreq+0x108>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 030c 	and.w	r3, r3, #12
 80051a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051a8:	4b3b      	ldr	r3, [pc, #236]	; (8005298 <HAL_RCC_GetSysClockFreq+0x108>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x34>
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b0c      	cmp	r3, #12
 80051bc:	d121      	bne.n	8005202 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d11e      	bne.n	8005202 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051c4:	4b34      	ldr	r3, [pc, #208]	; (8005298 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d107      	bne.n	80051e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051d0:	4b31      	ldr	r3, [pc, #196]	; (8005298 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	e005      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051e0:	4b2d      	ldr	r3, [pc, #180]	; (8005298 <HAL_RCC_GetSysClockFreq+0x108>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051ec:	4a2b      	ldr	r2, [pc, #172]	; (800529c <HAL_RCC_GetSysClockFreq+0x10c>)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10d      	bne.n	8005218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005200:	e00a      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b04      	cmp	r3, #4
 8005206:	d102      	bne.n	800520e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005208:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800520a:	61bb      	str	r3, [r7, #24]
 800520c:	e004      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d101      	bne.n	8005218 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005214:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005216:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b0c      	cmp	r3, #12
 800521c:	d134      	bne.n	8005288 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800521e:	4b1e      	ldr	r3, [pc, #120]	; (8005298 <HAL_RCC_GetSysClockFreq+0x108>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d003      	beq.n	8005236 <HAL_RCC_GetSysClockFreq+0xa6>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b03      	cmp	r3, #3
 8005232:	d003      	beq.n	800523c <HAL_RCC_GetSysClockFreq+0xac>
 8005234:	e005      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005238:	617b      	str	r3, [r7, #20]
      break;
 800523a:	e005      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800523c:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800523e:	617b      	str	r3, [r7, #20]
      break;
 8005240:	e002      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	617b      	str	r3, [r7, #20]
      break;
 8005246:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005248:	4b13      	ldr	r3, [pc, #76]	; (8005298 <HAL_RCC_GetSysClockFreq+0x108>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	091b      	lsrs	r3, r3, #4
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	3301      	adds	r3, #1
 8005254:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <HAL_RCC_GetSysClockFreq+0x108>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	fb03 f202 	mul.w	r2, r3, r2
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800526e:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <HAL_RCC_GetSysClockFreq+0x108>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	0e5b      	lsrs	r3, r3, #25
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	3301      	adds	r3, #1
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	fbb2 f3f3 	udiv	r3, r2, r3
 8005286:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005288:	69bb      	ldr	r3, [r7, #24]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3724      	adds	r7, #36	; 0x24
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000
 800529c:	0800c0b8 	.word	0x0800c0b8
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	007a1200 	.word	0x007a1200

080052a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052ac:	4b03      	ldr	r3, [pc, #12]	; (80052bc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ae:	681b      	ldr	r3, [r3, #0]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	2000001c 	.word	0x2000001c

080052c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052c4:	f7ff fff0 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	0a1b      	lsrs	r3, r3, #8
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4904      	ldr	r1, [pc, #16]	; (80052e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40021000 	.word	0x40021000
 80052e8:	0800c0b0 	.word	0x0800c0b0

080052ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052f0:	f7ff ffda 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	0adb      	lsrs	r3, r3, #11
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	4904      	ldr	r1, [pc, #16]	; (8005314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005302:	5ccb      	ldrb	r3, [r1, r3]
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000
 8005314:	0800c0b0 	.word	0x0800c0b0

08005318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e040      	b.n	80053ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fd f8cc 	bl	80024d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0201 	bic.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f8c0 	bl	80054dc <UART_SetConfig>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e022      	b.n	80053ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fc54 	bl	8005c1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005382:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fcdb 	bl	8005d60 <UART_CheckIdleState>
 80053aa:	4603      	mov	r3, r0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4613      	mov	r3, r2
 80053c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	f040 8081 	bne.w	80054d0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <HAL_UART_Transmit+0x26>
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e079      	b.n	80054d2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_UART_Transmit+0x38>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e072      	b.n	80054d2 <HAL_UART_Transmit+0x11e>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2221      	movs	r2, #33	; 0x21
 80053fe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005400:	f7fe fcfe 	bl	8003e00 <HAL_GetTick>
 8005404:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	88fa      	ldrh	r2, [r7, #6]
 800540a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	88fa      	ldrh	r2, [r7, #6]
 8005412:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	d108      	bne.n	8005432 <HAL_UART_Transmit+0x7e>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	e003      	b.n	800543a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005442:	e02d      	b.n	80054a0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2200      	movs	r2, #0
 800544c:	2180      	movs	r1, #128	; 0x80
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fccb 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e039      	b.n	80054d2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10b      	bne.n	800547c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	881a      	ldrh	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005470:	b292      	uxth	r2, r2
 8005472:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	3302      	adds	r3, #2
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	e008      	b.n	800548e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	781a      	ldrb	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	b292      	uxth	r2, r2
 8005486:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	3301      	adds	r3, #1
 800548c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1cb      	bne.n	8005444 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2200      	movs	r2, #0
 80054b4:	2140      	movs	r1, #64	; 0x40
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fc97 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e005      	b.n	80054d2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e0:	b0a0      	sub	sp, #128	; 0x80
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	431a      	orrs	r2, r3
 8005504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	4313      	orrs	r3, r2
 800550a:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800550c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	49a4      	ldr	r1, [pc, #656]	; (80057a4 <UART_SetConfig+0x2c8>)
 8005514:	4019      	ands	r1, r3
 8005516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800551c:	430b      	orrs	r3, r1
 800551e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800552a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800552c:	68d9      	ldr	r1, [r3, #12]
 800552e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	ea40 0301 	orr.w	r3, r0, r1
 8005536:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800553e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b99      	ldr	r3, [pc, #612]	; (80057a8 <UART_SetConfig+0x2cc>)
 8005544:	429a      	cmp	r2, r3
 8005546:	d004      	beq.n	8005552 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800554a:	6a1a      	ldr	r2, [r3, #32]
 800554c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800554e:	4313      	orrs	r3, r2
 8005550:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800555c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005562:	430b      	orrs	r3, r1
 8005564:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b90      	ldr	r3, [pc, #576]	; (80057ac <UART_SetConfig+0x2d0>)
 800556c:	429a      	cmp	r2, r3
 800556e:	d125      	bne.n	80055bc <UART_SetConfig+0xe0>
 8005570:	4b8f      	ldr	r3, [pc, #572]	; (80057b0 <UART_SetConfig+0x2d4>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	2b03      	cmp	r3, #3
 800557c:	d81a      	bhi.n	80055b4 <UART_SetConfig+0xd8>
 800557e:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <UART_SetConfig+0xa8>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	08005595 	.word	0x08005595
 8005588:	080055a5 	.word	0x080055a5
 800558c:	0800559d 	.word	0x0800559d
 8005590:	080055ad 	.word	0x080055ad
 8005594:	2301      	movs	r3, #1
 8005596:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800559a:	e116      	b.n	80057ca <UART_SetConfig+0x2ee>
 800559c:	2302      	movs	r3, #2
 800559e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80055a2:	e112      	b.n	80057ca <UART_SetConfig+0x2ee>
 80055a4:	2304      	movs	r3, #4
 80055a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80055aa:	e10e      	b.n	80057ca <UART_SetConfig+0x2ee>
 80055ac:	2308      	movs	r3, #8
 80055ae:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80055b2:	e10a      	b.n	80057ca <UART_SetConfig+0x2ee>
 80055b4:	2310      	movs	r3, #16
 80055b6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80055ba:	e106      	b.n	80057ca <UART_SetConfig+0x2ee>
 80055bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b7c      	ldr	r3, [pc, #496]	; (80057b4 <UART_SetConfig+0x2d8>)
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d138      	bne.n	8005638 <UART_SetConfig+0x15c>
 80055c6:	4b7a      	ldr	r3, [pc, #488]	; (80057b0 <UART_SetConfig+0x2d4>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	f003 030c 	and.w	r3, r3, #12
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	d82d      	bhi.n	8005630 <UART_SetConfig+0x154>
 80055d4:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <UART_SetConfig+0x100>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	08005611 	.word	0x08005611
 80055e0:	08005631 	.word	0x08005631
 80055e4:	08005631 	.word	0x08005631
 80055e8:	08005631 	.word	0x08005631
 80055ec:	08005621 	.word	0x08005621
 80055f0:	08005631 	.word	0x08005631
 80055f4:	08005631 	.word	0x08005631
 80055f8:	08005631 	.word	0x08005631
 80055fc:	08005619 	.word	0x08005619
 8005600:	08005631 	.word	0x08005631
 8005604:	08005631 	.word	0x08005631
 8005608:	08005631 	.word	0x08005631
 800560c:	08005629 	.word	0x08005629
 8005610:	2300      	movs	r3, #0
 8005612:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005616:	e0d8      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005618:	2302      	movs	r3, #2
 800561a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800561e:	e0d4      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005620:	2304      	movs	r3, #4
 8005622:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005626:	e0d0      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005628:	2308      	movs	r3, #8
 800562a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800562e:	e0cc      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005630:	2310      	movs	r3, #16
 8005632:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005636:	e0c8      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4b5e      	ldr	r3, [pc, #376]	; (80057b8 <UART_SetConfig+0x2dc>)
 800563e:	429a      	cmp	r2, r3
 8005640:	d125      	bne.n	800568e <UART_SetConfig+0x1b2>
 8005642:	4b5b      	ldr	r3, [pc, #364]	; (80057b0 <UART_SetConfig+0x2d4>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800564c:	2b30      	cmp	r3, #48	; 0x30
 800564e:	d016      	beq.n	800567e <UART_SetConfig+0x1a2>
 8005650:	2b30      	cmp	r3, #48	; 0x30
 8005652:	d818      	bhi.n	8005686 <UART_SetConfig+0x1aa>
 8005654:	2b20      	cmp	r3, #32
 8005656:	d00a      	beq.n	800566e <UART_SetConfig+0x192>
 8005658:	2b20      	cmp	r3, #32
 800565a:	d814      	bhi.n	8005686 <UART_SetConfig+0x1aa>
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <UART_SetConfig+0x18a>
 8005660:	2b10      	cmp	r3, #16
 8005662:	d008      	beq.n	8005676 <UART_SetConfig+0x19a>
 8005664:	e00f      	b.n	8005686 <UART_SetConfig+0x1aa>
 8005666:	2300      	movs	r3, #0
 8005668:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800566c:	e0ad      	b.n	80057ca <UART_SetConfig+0x2ee>
 800566e:	2302      	movs	r3, #2
 8005670:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005674:	e0a9      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005676:	2304      	movs	r3, #4
 8005678:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800567c:	e0a5      	b.n	80057ca <UART_SetConfig+0x2ee>
 800567e:	2308      	movs	r3, #8
 8005680:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005684:	e0a1      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005686:	2310      	movs	r3, #16
 8005688:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800568c:	e09d      	b.n	80057ca <UART_SetConfig+0x2ee>
 800568e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b4a      	ldr	r3, [pc, #296]	; (80057bc <UART_SetConfig+0x2e0>)
 8005694:	429a      	cmp	r2, r3
 8005696:	d125      	bne.n	80056e4 <UART_SetConfig+0x208>
 8005698:	4b45      	ldr	r3, [pc, #276]	; (80057b0 <UART_SetConfig+0x2d4>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056a2:	2bc0      	cmp	r3, #192	; 0xc0
 80056a4:	d016      	beq.n	80056d4 <UART_SetConfig+0x1f8>
 80056a6:	2bc0      	cmp	r3, #192	; 0xc0
 80056a8:	d818      	bhi.n	80056dc <UART_SetConfig+0x200>
 80056aa:	2b80      	cmp	r3, #128	; 0x80
 80056ac:	d00a      	beq.n	80056c4 <UART_SetConfig+0x1e8>
 80056ae:	2b80      	cmp	r3, #128	; 0x80
 80056b0:	d814      	bhi.n	80056dc <UART_SetConfig+0x200>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <UART_SetConfig+0x1e0>
 80056b6:	2b40      	cmp	r3, #64	; 0x40
 80056b8:	d008      	beq.n	80056cc <UART_SetConfig+0x1f0>
 80056ba:	e00f      	b.n	80056dc <UART_SetConfig+0x200>
 80056bc:	2300      	movs	r3, #0
 80056be:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80056c2:	e082      	b.n	80057ca <UART_SetConfig+0x2ee>
 80056c4:	2302      	movs	r3, #2
 80056c6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80056ca:	e07e      	b.n	80057ca <UART_SetConfig+0x2ee>
 80056cc:	2304      	movs	r3, #4
 80056ce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80056d2:	e07a      	b.n	80057ca <UART_SetConfig+0x2ee>
 80056d4:	2308      	movs	r3, #8
 80056d6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80056da:	e076      	b.n	80057ca <UART_SetConfig+0x2ee>
 80056dc:	2310      	movs	r3, #16
 80056de:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80056e2:	e072      	b.n	80057ca <UART_SetConfig+0x2ee>
 80056e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4b35      	ldr	r3, [pc, #212]	; (80057c0 <UART_SetConfig+0x2e4>)
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d12a      	bne.n	8005744 <UART_SetConfig+0x268>
 80056ee:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <UART_SetConfig+0x2d4>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056fc:	d01a      	beq.n	8005734 <UART_SetConfig+0x258>
 80056fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005702:	d81b      	bhi.n	800573c <UART_SetConfig+0x260>
 8005704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005708:	d00c      	beq.n	8005724 <UART_SetConfig+0x248>
 800570a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800570e:	d815      	bhi.n	800573c <UART_SetConfig+0x260>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <UART_SetConfig+0x240>
 8005714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005718:	d008      	beq.n	800572c <UART_SetConfig+0x250>
 800571a:	e00f      	b.n	800573c <UART_SetConfig+0x260>
 800571c:	2300      	movs	r3, #0
 800571e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005722:	e052      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005724:	2302      	movs	r3, #2
 8005726:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800572a:	e04e      	b.n	80057ca <UART_SetConfig+0x2ee>
 800572c:	2304      	movs	r3, #4
 800572e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005732:	e04a      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005734:	2308      	movs	r3, #8
 8005736:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800573a:	e046      	b.n	80057ca <UART_SetConfig+0x2ee>
 800573c:	2310      	movs	r3, #16
 800573e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005742:	e042      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b17      	ldr	r3, [pc, #92]	; (80057a8 <UART_SetConfig+0x2cc>)
 800574a:	429a      	cmp	r2, r3
 800574c:	d13a      	bne.n	80057c4 <UART_SetConfig+0x2e8>
 800574e:	4b18      	ldr	r3, [pc, #96]	; (80057b0 <UART_SetConfig+0x2d4>)
 8005750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005754:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800575c:	d01a      	beq.n	8005794 <UART_SetConfig+0x2b8>
 800575e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005762:	d81b      	bhi.n	800579c <UART_SetConfig+0x2c0>
 8005764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005768:	d00c      	beq.n	8005784 <UART_SetConfig+0x2a8>
 800576a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800576e:	d815      	bhi.n	800579c <UART_SetConfig+0x2c0>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <UART_SetConfig+0x2a0>
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005778:	d008      	beq.n	800578c <UART_SetConfig+0x2b0>
 800577a:	e00f      	b.n	800579c <UART_SetConfig+0x2c0>
 800577c:	2300      	movs	r3, #0
 800577e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005782:	e022      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005784:	2302      	movs	r3, #2
 8005786:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800578a:	e01e      	b.n	80057ca <UART_SetConfig+0x2ee>
 800578c:	2304      	movs	r3, #4
 800578e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8005792:	e01a      	b.n	80057ca <UART_SetConfig+0x2ee>
 8005794:	2308      	movs	r3, #8
 8005796:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800579a:	e016      	b.n	80057ca <UART_SetConfig+0x2ee>
 800579c:	2310      	movs	r3, #16
 800579e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80057a2:	e012      	b.n	80057ca <UART_SetConfig+0x2ee>
 80057a4:	efff69f3 	.word	0xefff69f3
 80057a8:	40008000 	.word	0x40008000
 80057ac:	40013800 	.word	0x40013800
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40004400 	.word	0x40004400
 80057b8:	40004800 	.word	0x40004800
 80057bc:	40004c00 	.word	0x40004c00
 80057c0:	40005000 	.word	0x40005000
 80057c4:	2310      	movs	r3, #16
 80057c6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4bb6      	ldr	r3, [pc, #728]	; (8005aa8 <UART_SetConfig+0x5cc>)
 80057d0:	429a      	cmp	r2, r3
 80057d2:	f040 810c 	bne.w	80059ee <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057d6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d823      	bhi.n	8005826 <UART_SetConfig+0x34a>
 80057de:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <UART_SetConfig+0x308>)
 80057e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005827 	.word	0x08005827
 80057ec:	08005811 	.word	0x08005811
 80057f0:	08005827 	.word	0x08005827
 80057f4:	08005817 	.word	0x08005817
 80057f8:	08005827 	.word	0x08005827
 80057fc:	08005827 	.word	0x08005827
 8005800:	08005827 	.word	0x08005827
 8005804:	0800581f 	.word	0x0800581f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005808:	f7ff fd5a 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 800580c:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800580e:	e00e      	b.n	800582e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005810:	4ba6      	ldr	r3, [pc, #664]	; (8005aac <UART_SetConfig+0x5d0>)
 8005812:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005814:	e00b      	b.n	800582e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005816:	f7ff fcbb 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 800581a:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800581c:	e007      	b.n	800582e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800581e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005822:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005824:	e003      	b.n	800582e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 800582c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800582e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 81e5 	beq.w	8005c00 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	441a      	add	r2, r3
 8005840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005842:	4293      	cmp	r3, r2
 8005844:	d305      	bcc.n	8005852 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800584c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584e:	4293      	cmp	r3, r2
 8005850:	d903      	bls.n	800585a <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8005858:	e1d2      	b.n	8005c00 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 800585a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800585e:	2b08      	cmp	r3, #8
 8005860:	f200 80b0 	bhi.w	80059c4 <UART_SetConfig+0x4e8>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <UART_SetConfig+0x390>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	08005891 	.word	0x08005891
 8005870:	080059c5 	.word	0x080059c5
 8005874:	080058f1 	.word	0x080058f1
 8005878:	080059c5 	.word	0x080059c5
 800587c:	08005931 	.word	0x08005931
 8005880:	080059c5 	.word	0x080059c5
 8005884:	080059c5 	.word	0x080059c5
 8005888:	080059c5 	.word	0x080059c5
 800588c:	0800598d 	.word	0x0800598d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005890:	f7ff fd16 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8005894:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005898:	2200      	movs	r2, #0
 800589a:	4698      	mov	r8, r3
 800589c:	4691      	mov	r9, r2
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80058aa:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80058ae:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80058b2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80058b4:	6849      	ldr	r1, [r1, #4]
 80058b6:	0849      	lsrs	r1, r1, #1
 80058b8:	2000      	movs	r0, #0
 80058ba:	6539      	str	r1, [r7, #80]	; 0x50
 80058bc:	6578      	str	r0, [r7, #84]	; 0x54
 80058be:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80058c2:	4621      	mov	r1, r4
 80058c4:	1851      	adds	r1, r2, r1
 80058c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80058c8:	4629      	mov	r1, r5
 80058ca:	eb43 0101 	adc.w	r1, r3, r1
 80058ce:	64f9      	str	r1, [r7, #76]	; 0x4c
 80058d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	643b      	str	r3, [r7, #64]	; 0x40
 80058d8:	647a      	str	r2, [r7, #68]	; 0x44
 80058da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80058e2:	f7fb f9d1 	bl	8000c88 <__aeabi_uldivmod>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4613      	mov	r3, r2
 80058ec:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80058ee:	e06d      	b.n	80059cc <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80058f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	2200      	movs	r2, #0
 80058f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80058fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058fc:	4b6c      	ldr	r3, [pc, #432]	; (8005ab0 <UART_SetConfig+0x5d4>)
 80058fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005902:	4602      	mov	r2, r0
 8005904:	18d3      	adds	r3, r2, r3
 8005906:	633b      	str	r3, [r7, #48]	; 0x30
 8005908:	460b      	mov	r3, r1
 800590a:	f143 0300 	adc.w	r3, r3, #0
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
 8005910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	62bb      	str	r3, [r7, #40]	; 0x28
 8005918:	62fa      	str	r2, [r7, #44]	; 0x2c
 800591a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800591e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005922:	f7fb f9b1 	bl	8000c88 <__aeabi_uldivmod>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4613      	mov	r3, r2
 800592c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800592e:	e04d      	b.n	80059cc <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005930:	f7ff fc2e 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 8005934:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005938:	2200      	movs	r2, #0
 800593a:	461c      	mov	r4, r3
 800593c:	4615      	mov	r5, r2
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	022b      	lsls	r3, r5, #8
 8005948:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800594c:	0222      	lsls	r2, r4, #8
 800594e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005950:	6849      	ldr	r1, [r1, #4]
 8005952:	0849      	lsrs	r1, r1, #1
 8005954:	2000      	movs	r0, #0
 8005956:	6239      	str	r1, [r7, #32]
 8005958:	6278      	str	r0, [r7, #36]	; 0x24
 800595a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800595e:	4621      	mov	r1, r4
 8005960:	1851      	adds	r1, r2, r1
 8005962:	61b9      	str	r1, [r7, #24]
 8005964:	4629      	mov	r1, r5
 8005966:	eb43 0101 	adc.w	r1, r3, r1
 800596a:	61f9      	str	r1, [r7, #28]
 800596c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	617a      	str	r2, [r7, #20]
 8005976:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800597a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800597e:	f7fb f983 	bl	8000c88 <__aeabi_uldivmod>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4613      	mov	r3, r2
 8005988:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800598a:	e01f      	b.n	80059cc <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800598c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	2200      	movs	r2, #0
 8005994:	469a      	mov	sl, r3
 8005996:	4693      	mov	fp, r2
 8005998:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	f14b 0300 	adc.w	r3, fp, #0
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	607a      	str	r2, [r7, #4]
 80059ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059b6:	f7fb f967 	bl	8000c88 <__aeabi_uldivmod>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4613      	mov	r3, r2
 80059c0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80059c2:	e003      	b.n	80059cc <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 80059ca:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d2:	d308      	bcc.n	80059e6 <UART_SetConfig+0x50a>
 80059d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059da:	d204      	bcs.n	80059e6 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 80059dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80059e2:	60da      	str	r2, [r3, #12]
 80059e4:	e10c      	b.n	8005c00 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80059ec:	e108      	b.n	8005c00 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059f6:	f040 808f 	bne.w	8005b18 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 80059fa:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d864      	bhi.n	8005acc <UART_SetConfig+0x5f0>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <UART_SetConfig+0x52c>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a2d 	.word	0x08005a2d
 8005a0c:	08005a4d 	.word	0x08005a4d
 8005a10:	08005a6d 	.word	0x08005a6d
 8005a14:	08005acd 	.word	0x08005acd
 8005a18:	08005a89 	.word	0x08005a89
 8005a1c:	08005acd 	.word	0x08005acd
 8005a20:	08005acd 	.word	0x08005acd
 8005a24:	08005acd 	.word	0x08005acd
 8005a28:	08005ab5 	.word	0x08005ab5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a2c:	f7ff fc48 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8005a30:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a34:	005a      	lsls	r2, r3, #1
 8005a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	441a      	add	r2, r3
 8005a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a4a:	e043      	b.n	8005ad4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a4c:	f7ff fc4e 	bl	80052ec <HAL_RCC_GetPCLK2Freq>
 8005a50:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a54:	005a      	lsls	r2, r3, #1
 8005a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	441a      	add	r2, r3
 8005a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a6a:	e033      	b.n	8005ad4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005a76:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005a7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a7c:	6852      	ldr	r2, [r2, #4]
 8005a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a86:	e025      	b.n	8005ad4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a88:	f7ff fb82 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 8005a8c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a90:	005a      	lsls	r2, r3, #1
 8005a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	441a      	add	r2, r3
 8005a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005aa6:	e015      	b.n	8005ad4 <UART_SetConfig+0x5f8>
 8005aa8:	40008000 	.word	0x40008000
 8005aac:	00f42400 	.word	0x00f42400
 8005ab0:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005aca:	e003      	b.n	8005ad4 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8005ad2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad6:	2b0f      	cmp	r3, #15
 8005ad8:	d91a      	bls.n	8005b10 <UART_SetConfig+0x634>
 8005ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae0:	d216      	bcs.n	8005b10 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f023 030f 	bic.w	r3, r3, #15
 8005aea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8005b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	e077      	b.n	8005c00 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8005b16:	e073      	b.n	8005c00 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8005b18:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d85c      	bhi.n	8005bda <UART_SetConfig+0x6fe>
 8005b20:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <UART_SetConfig+0x64c>)
 8005b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b26:	bf00      	nop
 8005b28:	08005b4d 	.word	0x08005b4d
 8005b2c:	08005b6b 	.word	0x08005b6b
 8005b30:	08005b89 	.word	0x08005b89
 8005b34:	08005bdb 	.word	0x08005bdb
 8005b38:	08005ba5 	.word	0x08005ba5
 8005b3c:	08005bdb 	.word	0x08005bdb
 8005b40:	08005bdb 	.word	0x08005bdb
 8005b44:	08005bdb 	.word	0x08005bdb
 8005b48:	08005bc3 	.word	0x08005bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b4c:	f7ff fbb8 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8005b50:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	085a      	lsrs	r2, r3, #1
 8005b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b5a:	441a      	add	r2, r3
 8005b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b68:	e03b      	b.n	8005be2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b6a:	f7ff fbbf 	bl	80052ec <HAL_RCC_GetPCLK2Freq>
 8005b6e:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	085a      	lsrs	r2, r3, #1
 8005b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b78:	441a      	add	r2, r3
 8005b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b86:	e02c      	b.n	8005be2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	085b      	lsrs	r3, r3, #1
 8005b8e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005b92:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005b96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b98:	6852      	ldr	r2, [r2, #4]
 8005b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ba2:	e01e      	b.n	8005be2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba4:	f7ff faf4 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 8005ba8:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	085a      	lsrs	r2, r3, #1
 8005bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bb2:	441a      	add	r2, r3
 8005bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bc0:	e00f      	b.n	8005be2 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bd8:	e003      	b.n	8005be2 <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8005be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be4:	2b0f      	cmp	r3, #15
 8005be6:	d908      	bls.n	8005bfa <UART_SetConfig+0x71e>
 8005be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bee:	d204      	bcs.n	8005bfa <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8005bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005bf6:	60da      	str	r2, [r3, #12]
 8005bf8:	e002      	b.n	8005c00 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c02:	2200      	movs	r2, #0
 8005c04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c08:	2200      	movs	r2, #0
 8005c0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005c0c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3780      	adds	r7, #128	; 0x80
 8005c14:	46bd      	mov	sp, r7
 8005c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c1a:	bf00      	nop

08005c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01a      	beq.n	8005d32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d1a:	d10a      	bne.n	8005d32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	605a      	str	r2, [r3, #4]
  }
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005d6e:	f7fe f847 	bl	8003e00 <HAL_GetTick>
 8005d72:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d10e      	bne.n	8005da0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f82a 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e020      	b.n	8005de2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d10e      	bne.n	8005dcc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f814 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e00a      	b.n	8005de2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	4613      	mov	r3, r2
 8005df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfa:	e05d      	b.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d059      	beq.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e04:	f7fd fffc 	bl	8003e00 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d302      	bcc.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d11b      	bne.n	8005e52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e28:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2220      	movs	r2, #32
 8005e44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e042      	b.n	8005ed8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d02b      	beq.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6e:	d123      	bne.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e78:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e88:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0201 	bic.w	r2, r2, #1
 8005e98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e00f      	b.n	8005ed8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69da      	ldr	r2, [r3, #28]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d092      	beq.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <findslot>:
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <findslot+0x2c>)
 8005ee2:	b510      	push	{r4, lr}
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	b118      	cbz	r0, 8005ef2 <findslot+0x12>
 8005eea:	6983      	ldr	r3, [r0, #24]
 8005eec:	b90b      	cbnz	r3, 8005ef2 <findslot+0x12>
 8005eee:	f000 f9b5 	bl	800625c <__sinit>
 8005ef2:	2c13      	cmp	r4, #19
 8005ef4:	d807      	bhi.n	8005f06 <findslot+0x26>
 8005ef6:	4806      	ldr	r0, [pc, #24]	; (8005f10 <findslot+0x30>)
 8005ef8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005efc:	3201      	adds	r2, #1
 8005efe:	d002      	beq.n	8005f06 <findslot+0x26>
 8005f00:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	2000      	movs	r0, #0
 8005f08:	e7fc      	b.n	8005f04 <findslot+0x24>
 8005f0a:	bf00      	nop
 8005f0c:	20000104 	.word	0x20000104
 8005f10:	20000868 	.word	0x20000868

08005f14 <error>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	4604      	mov	r4, r0
 8005f18:	f000 f92e 	bl	8006178 <__errno>
 8005f1c:	2613      	movs	r6, #19
 8005f1e:	4605      	mov	r5, r0
 8005f20:	2700      	movs	r7, #0
 8005f22:	4630      	mov	r0, r6
 8005f24:	4639      	mov	r1, r7
 8005f26:	beab      	bkpt	0x00ab
 8005f28:	4606      	mov	r6, r0
 8005f2a:	602e      	str	r6, [r5, #0]
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f30 <checkerror>:
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d101      	bne.n	8005f38 <checkerror+0x8>
 8005f34:	f7ff bfee 	b.w	8005f14 <error>
 8005f38:	4770      	bx	lr

08005f3a <_swiread>:
 8005f3a:	b530      	push	{r4, r5, lr}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005f42:	9203      	str	r2, [sp, #12]
 8005f44:	2406      	movs	r4, #6
 8005f46:	ad01      	add	r5, sp, #4
 8005f48:	4620      	mov	r0, r4
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	beab      	bkpt	0x00ab
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4620      	mov	r0, r4
 8005f52:	f7ff ffed 	bl	8005f30 <checkerror>
 8005f56:	b005      	add	sp, #20
 8005f58:	bd30      	pop	{r4, r5, pc}

08005f5a <_read>:
 8005f5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f5c:	4615      	mov	r5, r2
 8005f5e:	9101      	str	r1, [sp, #4]
 8005f60:	f7ff ffbe 	bl	8005ee0 <findslot>
 8005f64:	9901      	ldr	r1, [sp, #4]
 8005f66:	4604      	mov	r4, r0
 8005f68:	b938      	cbnz	r0, 8005f7a <_read+0x20>
 8005f6a:	f000 f905 	bl	8006178 <__errno>
 8005f6e:	2309      	movs	r3, #9
 8005f70:	6003      	str	r3, [r0, #0]
 8005f72:	f04f 30ff 	mov.w	r0, #4294967295
 8005f76:	b003      	add	sp, #12
 8005f78:	bd30      	pop	{r4, r5, pc}
 8005f7a:	6800      	ldr	r0, [r0, #0]
 8005f7c:	462a      	mov	r2, r5
 8005f7e:	f7ff ffdc 	bl	8005f3a <_swiread>
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	d0f7      	beq.n	8005f76 <_read+0x1c>
 8005f86:	6863      	ldr	r3, [r4, #4]
 8005f88:	1a2a      	subs	r2, r5, r0
 8005f8a:	4413      	add	r3, r2
 8005f8c:	6063      	str	r3, [r4, #4]
 8005f8e:	4610      	mov	r0, r2
 8005f90:	e7f1      	b.n	8005f76 <_read+0x1c>

08005f92 <_swilseek>:
 8005f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f94:	460c      	mov	r4, r1
 8005f96:	4616      	mov	r6, r2
 8005f98:	f7ff ffa2 	bl	8005ee0 <findslot>
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	b940      	cbnz	r0, 8005fb2 <_swilseek+0x20>
 8005fa0:	f000 f8ea 	bl	8006178 <__errno>
 8005fa4:	2309      	movs	r3, #9
 8005fa6:	6003      	str	r3, [r0, #0]
 8005fa8:	f04f 34ff 	mov.w	r4, #4294967295
 8005fac:	4620      	mov	r0, r4
 8005fae:	b003      	add	sp, #12
 8005fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb2:	2e02      	cmp	r6, #2
 8005fb4:	d903      	bls.n	8005fbe <_swilseek+0x2c>
 8005fb6:	f000 f8df 	bl	8006178 <__errno>
 8005fba:	2316      	movs	r3, #22
 8005fbc:	e7f3      	b.n	8005fa6 <_swilseek+0x14>
 8005fbe:	2e01      	cmp	r6, #1
 8005fc0:	d112      	bne.n	8005fe8 <_swilseek+0x56>
 8005fc2:	6843      	ldr	r3, [r0, #4]
 8005fc4:	18e4      	adds	r4, r4, r3
 8005fc6:	d4f6      	bmi.n	8005fb6 <_swilseek+0x24>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	260a      	movs	r6, #10
 8005fcc:	e9cd 3400 	strd	r3, r4, [sp]
 8005fd0:	466f      	mov	r7, sp
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	beab      	bkpt	0x00ab
 8005fd8:	4606      	mov	r6, r0
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7ff ffa8 	bl	8005f30 <checkerror>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	dbe1      	blt.n	8005fa8 <_swilseek+0x16>
 8005fe4:	606c      	str	r4, [r5, #4]
 8005fe6:	e7e1      	b.n	8005fac <_swilseek+0x1a>
 8005fe8:	2e02      	cmp	r6, #2
 8005fea:	d1ed      	bne.n	8005fc8 <_swilseek+0x36>
 8005fec:	6803      	ldr	r3, [r0, #0]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	260c      	movs	r6, #12
 8005ff2:	466f      	mov	r7, sp
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	beab      	bkpt	0x00ab
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f7ff ff97 	bl	8005f30 <checkerror>
 8006002:	1c43      	adds	r3, r0, #1
 8006004:	d0d0      	beq.n	8005fa8 <_swilseek+0x16>
 8006006:	4404      	add	r4, r0
 8006008:	e7de      	b.n	8005fc8 <_swilseek+0x36>

0800600a <_lseek>:
 800600a:	f7ff bfc2 	b.w	8005f92 <_swilseek>

0800600e <_swiwrite>:
 800600e:	b530      	push	{r4, r5, lr}
 8006010:	b085      	sub	sp, #20
 8006012:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006016:	9203      	str	r2, [sp, #12]
 8006018:	2405      	movs	r4, #5
 800601a:	ad01      	add	r5, sp, #4
 800601c:	4620      	mov	r0, r4
 800601e:	4629      	mov	r1, r5
 8006020:	beab      	bkpt	0x00ab
 8006022:	4604      	mov	r4, r0
 8006024:	4620      	mov	r0, r4
 8006026:	f7ff ff83 	bl	8005f30 <checkerror>
 800602a:	b005      	add	sp, #20
 800602c:	bd30      	pop	{r4, r5, pc}

0800602e <_write>:
 800602e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006030:	4615      	mov	r5, r2
 8006032:	9101      	str	r1, [sp, #4]
 8006034:	f7ff ff54 	bl	8005ee0 <findslot>
 8006038:	9901      	ldr	r1, [sp, #4]
 800603a:	4604      	mov	r4, r0
 800603c:	b930      	cbnz	r0, 800604c <_write+0x1e>
 800603e:	f000 f89b 	bl	8006178 <__errno>
 8006042:	2309      	movs	r3, #9
 8006044:	6003      	str	r3, [r0, #0]
 8006046:	f04f 30ff 	mov.w	r0, #4294967295
 800604a:	e012      	b.n	8006072 <_write+0x44>
 800604c:	6800      	ldr	r0, [r0, #0]
 800604e:	462a      	mov	r2, r5
 8006050:	f7ff ffdd 	bl	800600e <_swiwrite>
 8006054:	2800      	cmp	r0, #0
 8006056:	dbf6      	blt.n	8006046 <_write+0x18>
 8006058:	6862      	ldr	r2, [r4, #4]
 800605a:	1a2b      	subs	r3, r5, r0
 800605c:	441a      	add	r2, r3
 800605e:	42a8      	cmp	r0, r5
 8006060:	6062      	str	r2, [r4, #4]
 8006062:	d105      	bne.n	8006070 <_write+0x42>
 8006064:	2000      	movs	r0, #0
 8006066:	b003      	add	sp, #12
 8006068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800606c:	f7ff bf52 	b.w	8005f14 <error>
 8006070:	4618      	mov	r0, r3
 8006072:	b003      	add	sp, #12
 8006074:	bd30      	pop	{r4, r5, pc}

08006076 <_swiclose>:
 8006076:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006078:	2402      	movs	r4, #2
 800607a:	9001      	str	r0, [sp, #4]
 800607c:	ad01      	add	r5, sp, #4
 800607e:	4620      	mov	r0, r4
 8006080:	4629      	mov	r1, r5
 8006082:	beab      	bkpt	0x00ab
 8006084:	4604      	mov	r4, r0
 8006086:	4620      	mov	r0, r4
 8006088:	f7ff ff52 	bl	8005f30 <checkerror>
 800608c:	b003      	add	sp, #12
 800608e:	bd30      	pop	{r4, r5, pc}

08006090 <_close>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4605      	mov	r5, r0
 8006094:	f7ff ff24 	bl	8005ee0 <findslot>
 8006098:	4604      	mov	r4, r0
 800609a:	b930      	cbnz	r0, 80060aa <_close+0x1a>
 800609c:	f000 f86c 	bl	8006178 <__errno>
 80060a0:	2309      	movs	r3, #9
 80060a2:	6003      	str	r3, [r0, #0]
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	bd38      	pop	{r3, r4, r5, pc}
 80060aa:	3d01      	subs	r5, #1
 80060ac:	2d01      	cmp	r5, #1
 80060ae:	d809      	bhi.n	80060c4 <_close+0x34>
 80060b0:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <_close+0x48>)
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d104      	bne.n	80060c4 <_close+0x34>
 80060ba:	f04f 33ff 	mov.w	r3, #4294967295
 80060be:	6003      	str	r3, [r0, #0]
 80060c0:	2000      	movs	r0, #0
 80060c2:	e7f1      	b.n	80060a8 <_close+0x18>
 80060c4:	6820      	ldr	r0, [r4, #0]
 80060c6:	f7ff ffd6 	bl	8006076 <_swiclose>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d1ec      	bne.n	80060a8 <_close+0x18>
 80060ce:	f04f 33ff 	mov.w	r3, #4294967295
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	e7e8      	b.n	80060a8 <_close+0x18>
 80060d6:	bf00      	nop
 80060d8:	20000868 	.word	0x20000868

080060dc <_getpid>:
 80060dc:	2001      	movs	r0, #1
 80060de:	4770      	bx	lr

080060e0 <_swistat>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	460c      	mov	r4, r1
 80060e4:	f7ff fefc 	bl	8005ee0 <findslot>
 80060e8:	4605      	mov	r5, r0
 80060ea:	b930      	cbnz	r0, 80060fa <_swistat+0x1a>
 80060ec:	f000 f844 	bl	8006178 <__errno>
 80060f0:	2309      	movs	r3, #9
 80060f2:	6003      	str	r3, [r0, #0]
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	bd70      	pop	{r4, r5, r6, pc}
 80060fa:	6863      	ldr	r3, [r4, #4]
 80060fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006106:	64a3      	str	r3, [r4, #72]	; 0x48
 8006108:	260c      	movs	r6, #12
 800610a:	4630      	mov	r0, r6
 800610c:	4629      	mov	r1, r5
 800610e:	beab      	bkpt	0x00ab
 8006110:	4605      	mov	r5, r0
 8006112:	4628      	mov	r0, r5
 8006114:	f7ff ff0c 	bl	8005f30 <checkerror>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	bf1c      	itt	ne
 800611c:	6120      	strne	r0, [r4, #16]
 800611e:	2000      	movne	r0, #0
 8006120:	e7ea      	b.n	80060f8 <_swistat+0x18>

08006122 <_fstat>:
 8006122:	460b      	mov	r3, r1
 8006124:	b510      	push	{r4, lr}
 8006126:	2100      	movs	r1, #0
 8006128:	4604      	mov	r4, r0
 800612a:	2258      	movs	r2, #88	; 0x58
 800612c:	4618      	mov	r0, r3
 800612e:	f000 f982 	bl	8006436 <memset>
 8006132:	4601      	mov	r1, r0
 8006134:	4620      	mov	r0, r4
 8006136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800613a:	f7ff bfd1 	b.w	80060e0 <_swistat>

0800613e <_isatty>:
 800613e:	b570      	push	{r4, r5, r6, lr}
 8006140:	f7ff fece 	bl	8005ee0 <findslot>
 8006144:	2509      	movs	r5, #9
 8006146:	4604      	mov	r4, r0
 8006148:	b920      	cbnz	r0, 8006154 <_isatty+0x16>
 800614a:	f000 f815 	bl	8006178 <__errno>
 800614e:	6005      	str	r5, [r0, #0]
 8006150:	4620      	mov	r0, r4
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	4628      	mov	r0, r5
 8006156:	4621      	mov	r1, r4
 8006158:	beab      	bkpt	0x00ab
 800615a:	4604      	mov	r4, r0
 800615c:	2c01      	cmp	r4, #1
 800615e:	d0f7      	beq.n	8006150 <_isatty+0x12>
 8006160:	f000 f80a 	bl	8006178 <__errno>
 8006164:	2400      	movs	r4, #0
 8006166:	4605      	mov	r5, r0
 8006168:	2613      	movs	r6, #19
 800616a:	4630      	mov	r0, r6
 800616c:	4621      	mov	r1, r4
 800616e:	beab      	bkpt	0x00ab
 8006170:	4606      	mov	r6, r0
 8006172:	602e      	str	r6, [r5, #0]
 8006174:	e7ec      	b.n	8006150 <_isatty+0x12>
	...

08006178 <__errno>:
 8006178:	4b01      	ldr	r3, [pc, #4]	; (8006180 <__errno+0x8>)
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20000104 	.word	0x20000104

08006184 <exit>:
 8006184:	b508      	push	{r3, lr}
 8006186:	4b07      	ldr	r3, [pc, #28]	; (80061a4 <exit+0x20>)
 8006188:	4604      	mov	r4, r0
 800618a:	b113      	cbz	r3, 8006192 <exit+0xe>
 800618c:	2100      	movs	r1, #0
 800618e:	f3af 8000 	nop.w
 8006192:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <exit+0x24>)
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006198:	b103      	cbz	r3, 800619c <exit+0x18>
 800619a:	4798      	blx	r3
 800619c:	4620      	mov	r0, r4
 800619e:	f005 fbf1 	bl	800b984 <_exit>
 80061a2:	bf00      	nop
 80061a4:	00000000 	.word	0x00000000
 80061a8:	0800e95c 	.word	0x0800e95c

080061ac <std>:
 80061ac:	2300      	movs	r3, #0
 80061ae:	b510      	push	{r4, lr}
 80061b0:	4604      	mov	r4, r0
 80061b2:	e9c0 3300 	strd	r3, r3, [r0]
 80061b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ba:	6083      	str	r3, [r0, #8]
 80061bc:	8181      	strh	r1, [r0, #12]
 80061be:	6643      	str	r3, [r0, #100]	; 0x64
 80061c0:	81c2      	strh	r2, [r0, #14]
 80061c2:	6183      	str	r3, [r0, #24]
 80061c4:	4619      	mov	r1, r3
 80061c6:	2208      	movs	r2, #8
 80061c8:	305c      	adds	r0, #92	; 0x5c
 80061ca:	f000 f934 	bl	8006436 <memset>
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <std+0x38>)
 80061d0:	6263      	str	r3, [r4, #36]	; 0x24
 80061d2:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <std+0x3c>)
 80061d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <std+0x40>)
 80061d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <std+0x44>)
 80061dc:	6224      	str	r4, [r4, #32]
 80061de:	6323      	str	r3, [r4, #48]	; 0x30
 80061e0:	bd10      	pop	{r4, pc}
 80061e2:	bf00      	nop
 80061e4:	080072d1 	.word	0x080072d1
 80061e8:	080072f3 	.word	0x080072f3
 80061ec:	0800732b 	.word	0x0800732b
 80061f0:	0800734f 	.word	0x0800734f

080061f4 <_cleanup_r>:
 80061f4:	4901      	ldr	r1, [pc, #4]	; (80061fc <_cleanup_r+0x8>)
 80061f6:	f000 b8af 	b.w	8006358 <_fwalk_reent>
 80061fa:	bf00      	nop
 80061fc:	080090b1 	.word	0x080090b1

08006200 <__sfmoreglue>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	2268      	movs	r2, #104	; 0x68
 8006204:	1e4d      	subs	r5, r1, #1
 8006206:	4355      	muls	r5, r2
 8006208:	460e      	mov	r6, r1
 800620a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800620e:	f000 f93b 	bl	8006488 <_malloc_r>
 8006212:	4604      	mov	r4, r0
 8006214:	b140      	cbz	r0, 8006228 <__sfmoreglue+0x28>
 8006216:	2100      	movs	r1, #0
 8006218:	e9c0 1600 	strd	r1, r6, [r0]
 800621c:	300c      	adds	r0, #12
 800621e:	60a0      	str	r0, [r4, #8]
 8006220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006224:	f000 f907 	bl	8006436 <memset>
 8006228:	4620      	mov	r0, r4
 800622a:	bd70      	pop	{r4, r5, r6, pc}

0800622c <__sfp_lock_acquire>:
 800622c:	4801      	ldr	r0, [pc, #4]	; (8006234 <__sfp_lock_acquire+0x8>)
 800622e:	f000 b8d8 	b.w	80063e2 <__retarget_lock_acquire_recursive>
 8006232:	bf00      	nop
 8006234:	20000909 	.word	0x20000909

08006238 <__sfp_lock_release>:
 8006238:	4801      	ldr	r0, [pc, #4]	; (8006240 <__sfp_lock_release+0x8>)
 800623a:	f000 b8d3 	b.w	80063e4 <__retarget_lock_release_recursive>
 800623e:	bf00      	nop
 8006240:	20000909 	.word	0x20000909

08006244 <__sinit_lock_acquire>:
 8006244:	4801      	ldr	r0, [pc, #4]	; (800624c <__sinit_lock_acquire+0x8>)
 8006246:	f000 b8cc 	b.w	80063e2 <__retarget_lock_acquire_recursive>
 800624a:	bf00      	nop
 800624c:	2000090a 	.word	0x2000090a

08006250 <__sinit_lock_release>:
 8006250:	4801      	ldr	r0, [pc, #4]	; (8006258 <__sinit_lock_release+0x8>)
 8006252:	f000 b8c7 	b.w	80063e4 <__retarget_lock_release_recursive>
 8006256:	bf00      	nop
 8006258:	2000090a 	.word	0x2000090a

0800625c <__sinit>:
 800625c:	b510      	push	{r4, lr}
 800625e:	4604      	mov	r4, r0
 8006260:	f7ff fff0 	bl	8006244 <__sinit_lock_acquire>
 8006264:	69a3      	ldr	r3, [r4, #24]
 8006266:	b11b      	cbz	r3, 8006270 <__sinit+0x14>
 8006268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800626c:	f7ff bff0 	b.w	8006250 <__sinit_lock_release>
 8006270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006274:	6523      	str	r3, [r4, #80]	; 0x50
 8006276:	4b13      	ldr	r3, [pc, #76]	; (80062c4 <__sinit+0x68>)
 8006278:	4a13      	ldr	r2, [pc, #76]	; (80062c8 <__sinit+0x6c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	62a2      	str	r2, [r4, #40]	; 0x28
 800627e:	42a3      	cmp	r3, r4
 8006280:	bf04      	itt	eq
 8006282:	2301      	moveq	r3, #1
 8006284:	61a3      	streq	r3, [r4, #24]
 8006286:	4620      	mov	r0, r4
 8006288:	f000 f820 	bl	80062cc <__sfp>
 800628c:	6060      	str	r0, [r4, #4]
 800628e:	4620      	mov	r0, r4
 8006290:	f000 f81c 	bl	80062cc <__sfp>
 8006294:	60a0      	str	r0, [r4, #8]
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f818 	bl	80062cc <__sfp>
 800629c:	2200      	movs	r2, #0
 800629e:	60e0      	str	r0, [r4, #12]
 80062a0:	2104      	movs	r1, #4
 80062a2:	6860      	ldr	r0, [r4, #4]
 80062a4:	f7ff ff82 	bl	80061ac <std>
 80062a8:	68a0      	ldr	r0, [r4, #8]
 80062aa:	2201      	movs	r2, #1
 80062ac:	2109      	movs	r1, #9
 80062ae:	f7ff ff7d 	bl	80061ac <std>
 80062b2:	68e0      	ldr	r0, [r4, #12]
 80062b4:	2202      	movs	r2, #2
 80062b6:	2112      	movs	r1, #18
 80062b8:	f7ff ff78 	bl	80061ac <std>
 80062bc:	2301      	movs	r3, #1
 80062be:	61a3      	str	r3, [r4, #24]
 80062c0:	e7d2      	b.n	8006268 <__sinit+0xc>
 80062c2:	bf00      	nop
 80062c4:	0800e95c 	.word	0x0800e95c
 80062c8:	080061f5 	.word	0x080061f5

080062cc <__sfp>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	4607      	mov	r7, r0
 80062d0:	f7ff ffac 	bl	800622c <__sfp_lock_acquire>
 80062d4:	4b1e      	ldr	r3, [pc, #120]	; (8006350 <__sfp+0x84>)
 80062d6:	681e      	ldr	r6, [r3, #0]
 80062d8:	69b3      	ldr	r3, [r6, #24]
 80062da:	b913      	cbnz	r3, 80062e2 <__sfp+0x16>
 80062dc:	4630      	mov	r0, r6
 80062de:	f7ff ffbd 	bl	800625c <__sinit>
 80062e2:	3648      	adds	r6, #72	; 0x48
 80062e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	d503      	bpl.n	80062f4 <__sfp+0x28>
 80062ec:	6833      	ldr	r3, [r6, #0]
 80062ee:	b30b      	cbz	r3, 8006334 <__sfp+0x68>
 80062f0:	6836      	ldr	r6, [r6, #0]
 80062f2:	e7f7      	b.n	80062e4 <__sfp+0x18>
 80062f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062f8:	b9d5      	cbnz	r5, 8006330 <__sfp+0x64>
 80062fa:	4b16      	ldr	r3, [pc, #88]	; (8006354 <__sfp+0x88>)
 80062fc:	60e3      	str	r3, [r4, #12]
 80062fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006302:	6665      	str	r5, [r4, #100]	; 0x64
 8006304:	f000 f86c 	bl	80063e0 <__retarget_lock_init_recursive>
 8006308:	f7ff ff96 	bl	8006238 <__sfp_lock_release>
 800630c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006310:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006314:	6025      	str	r5, [r4, #0]
 8006316:	61a5      	str	r5, [r4, #24]
 8006318:	2208      	movs	r2, #8
 800631a:	4629      	mov	r1, r5
 800631c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006320:	f000 f889 	bl	8006436 <memset>
 8006324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800632c:	4620      	mov	r0, r4
 800632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006330:	3468      	adds	r4, #104	; 0x68
 8006332:	e7d9      	b.n	80062e8 <__sfp+0x1c>
 8006334:	2104      	movs	r1, #4
 8006336:	4638      	mov	r0, r7
 8006338:	f7ff ff62 	bl	8006200 <__sfmoreglue>
 800633c:	4604      	mov	r4, r0
 800633e:	6030      	str	r0, [r6, #0]
 8006340:	2800      	cmp	r0, #0
 8006342:	d1d5      	bne.n	80062f0 <__sfp+0x24>
 8006344:	f7ff ff78 	bl	8006238 <__sfp_lock_release>
 8006348:	230c      	movs	r3, #12
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	e7ee      	b.n	800632c <__sfp+0x60>
 800634e:	bf00      	nop
 8006350:	0800e95c 	.word	0x0800e95c
 8006354:	ffff0001 	.word	0xffff0001

08006358 <_fwalk_reent>:
 8006358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800635c:	4606      	mov	r6, r0
 800635e:	4688      	mov	r8, r1
 8006360:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006364:	2700      	movs	r7, #0
 8006366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800636a:	f1b9 0901 	subs.w	r9, r9, #1
 800636e:	d505      	bpl.n	800637c <_fwalk_reent+0x24>
 8006370:	6824      	ldr	r4, [r4, #0]
 8006372:	2c00      	cmp	r4, #0
 8006374:	d1f7      	bne.n	8006366 <_fwalk_reent+0xe>
 8006376:	4638      	mov	r0, r7
 8006378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800637c:	89ab      	ldrh	r3, [r5, #12]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d907      	bls.n	8006392 <_fwalk_reent+0x3a>
 8006382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006386:	3301      	adds	r3, #1
 8006388:	d003      	beq.n	8006392 <_fwalk_reent+0x3a>
 800638a:	4629      	mov	r1, r5
 800638c:	4630      	mov	r0, r6
 800638e:	47c0      	blx	r8
 8006390:	4307      	orrs	r7, r0
 8006392:	3568      	adds	r5, #104	; 0x68
 8006394:	e7e9      	b.n	800636a <_fwalk_reent+0x12>
	...

08006398 <__libc_init_array>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	4d0d      	ldr	r5, [pc, #52]	; (80063d0 <__libc_init_array+0x38>)
 800639c:	4c0d      	ldr	r4, [pc, #52]	; (80063d4 <__libc_init_array+0x3c>)
 800639e:	1b64      	subs	r4, r4, r5
 80063a0:	10a4      	asrs	r4, r4, #2
 80063a2:	2600      	movs	r6, #0
 80063a4:	42a6      	cmp	r6, r4
 80063a6:	d109      	bne.n	80063bc <__libc_init_array+0x24>
 80063a8:	4d0b      	ldr	r5, [pc, #44]	; (80063d8 <__libc_init_array+0x40>)
 80063aa:	4c0c      	ldr	r4, [pc, #48]	; (80063dc <__libc_init_array+0x44>)
 80063ac:	f005 faec 	bl	800b988 <_init>
 80063b0:	1b64      	subs	r4, r4, r5
 80063b2:	10a4      	asrs	r4, r4, #2
 80063b4:	2600      	movs	r6, #0
 80063b6:	42a6      	cmp	r6, r4
 80063b8:	d105      	bne.n	80063c6 <__libc_init_array+0x2e>
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c0:	4798      	blx	r3
 80063c2:	3601      	adds	r6, #1
 80063c4:	e7ee      	b.n	80063a4 <__libc_init_array+0xc>
 80063c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ca:	4798      	blx	r3
 80063cc:	3601      	adds	r6, #1
 80063ce:	e7f2      	b.n	80063b6 <__libc_init_array+0x1e>
 80063d0:	0800ede0 	.word	0x0800ede0
 80063d4:	0800ede0 	.word	0x0800ede0
 80063d8:	0800ede0 	.word	0x0800ede0
 80063dc:	0800ede4 	.word	0x0800ede4

080063e0 <__retarget_lock_init_recursive>:
 80063e0:	4770      	bx	lr

080063e2 <__retarget_lock_acquire_recursive>:
 80063e2:	4770      	bx	lr

080063e4 <__retarget_lock_release_recursive>:
 80063e4:	4770      	bx	lr

080063e6 <memcpy>:
 80063e6:	440a      	add	r2, r1
 80063e8:	4291      	cmp	r1, r2
 80063ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80063ee:	d100      	bne.n	80063f2 <memcpy+0xc>
 80063f0:	4770      	bx	lr
 80063f2:	b510      	push	{r4, lr}
 80063f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063fc:	4291      	cmp	r1, r2
 80063fe:	d1f9      	bne.n	80063f4 <memcpy+0xe>
 8006400:	bd10      	pop	{r4, pc}

08006402 <memmove>:
 8006402:	4288      	cmp	r0, r1
 8006404:	b510      	push	{r4, lr}
 8006406:	eb01 0402 	add.w	r4, r1, r2
 800640a:	d902      	bls.n	8006412 <memmove+0x10>
 800640c:	4284      	cmp	r4, r0
 800640e:	4623      	mov	r3, r4
 8006410:	d807      	bhi.n	8006422 <memmove+0x20>
 8006412:	1e43      	subs	r3, r0, #1
 8006414:	42a1      	cmp	r1, r4
 8006416:	d008      	beq.n	800642a <memmove+0x28>
 8006418:	f811 2b01 	ldrb.w	r2, [r1], #1
 800641c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006420:	e7f8      	b.n	8006414 <memmove+0x12>
 8006422:	4402      	add	r2, r0
 8006424:	4601      	mov	r1, r0
 8006426:	428a      	cmp	r2, r1
 8006428:	d100      	bne.n	800642c <memmove+0x2a>
 800642a:	bd10      	pop	{r4, pc}
 800642c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006430:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006434:	e7f7      	b.n	8006426 <memmove+0x24>

08006436 <memset>:
 8006436:	4402      	add	r2, r0
 8006438:	4603      	mov	r3, r0
 800643a:	4293      	cmp	r3, r2
 800643c:	d100      	bne.n	8006440 <memset+0xa>
 800643e:	4770      	bx	lr
 8006440:	f803 1b01 	strb.w	r1, [r3], #1
 8006444:	e7f9      	b.n	800643a <memset+0x4>
	...

08006448 <sbrk_aligned>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	4e0e      	ldr	r6, [pc, #56]	; (8006484 <sbrk_aligned+0x3c>)
 800644c:	460c      	mov	r4, r1
 800644e:	6831      	ldr	r1, [r6, #0]
 8006450:	4605      	mov	r5, r0
 8006452:	b911      	cbnz	r1, 800645a <sbrk_aligned+0x12>
 8006454:	f000 ff06 	bl	8007264 <_sbrk_r>
 8006458:	6030      	str	r0, [r6, #0]
 800645a:	4621      	mov	r1, r4
 800645c:	4628      	mov	r0, r5
 800645e:	f000 ff01 	bl	8007264 <_sbrk_r>
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	d00a      	beq.n	800647c <sbrk_aligned+0x34>
 8006466:	1cc4      	adds	r4, r0, #3
 8006468:	f024 0403 	bic.w	r4, r4, #3
 800646c:	42a0      	cmp	r0, r4
 800646e:	d007      	beq.n	8006480 <sbrk_aligned+0x38>
 8006470:	1a21      	subs	r1, r4, r0
 8006472:	4628      	mov	r0, r5
 8006474:	f000 fef6 	bl	8007264 <_sbrk_r>
 8006478:	3001      	adds	r0, #1
 800647a:	d101      	bne.n	8006480 <sbrk_aligned+0x38>
 800647c:	f04f 34ff 	mov.w	r4, #4294967295
 8006480:	4620      	mov	r0, r4
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	20000910 	.word	0x20000910

08006488 <_malloc_r>:
 8006488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800648c:	1ccd      	adds	r5, r1, #3
 800648e:	f025 0503 	bic.w	r5, r5, #3
 8006492:	3508      	adds	r5, #8
 8006494:	2d0c      	cmp	r5, #12
 8006496:	bf38      	it	cc
 8006498:	250c      	movcc	r5, #12
 800649a:	2d00      	cmp	r5, #0
 800649c:	4607      	mov	r7, r0
 800649e:	db01      	blt.n	80064a4 <_malloc_r+0x1c>
 80064a0:	42a9      	cmp	r1, r5
 80064a2:	d905      	bls.n	80064b0 <_malloc_r+0x28>
 80064a4:	230c      	movs	r3, #12
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	2600      	movs	r6, #0
 80064aa:	4630      	mov	r0, r6
 80064ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b0:	4e2e      	ldr	r6, [pc, #184]	; (800656c <_malloc_r+0xe4>)
 80064b2:	f003 fa51 	bl	8009958 <__malloc_lock>
 80064b6:	6833      	ldr	r3, [r6, #0]
 80064b8:	461c      	mov	r4, r3
 80064ba:	bb34      	cbnz	r4, 800650a <_malloc_r+0x82>
 80064bc:	4629      	mov	r1, r5
 80064be:	4638      	mov	r0, r7
 80064c0:	f7ff ffc2 	bl	8006448 <sbrk_aligned>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	4604      	mov	r4, r0
 80064c8:	d14d      	bne.n	8006566 <_malloc_r+0xde>
 80064ca:	6834      	ldr	r4, [r6, #0]
 80064cc:	4626      	mov	r6, r4
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	d140      	bne.n	8006554 <_malloc_r+0xcc>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	4631      	mov	r1, r6
 80064d6:	4638      	mov	r0, r7
 80064d8:	eb04 0803 	add.w	r8, r4, r3
 80064dc:	f000 fec2 	bl	8007264 <_sbrk_r>
 80064e0:	4580      	cmp	r8, r0
 80064e2:	d13a      	bne.n	800655a <_malloc_r+0xd2>
 80064e4:	6821      	ldr	r1, [r4, #0]
 80064e6:	3503      	adds	r5, #3
 80064e8:	1a6d      	subs	r5, r5, r1
 80064ea:	f025 0503 	bic.w	r5, r5, #3
 80064ee:	3508      	adds	r5, #8
 80064f0:	2d0c      	cmp	r5, #12
 80064f2:	bf38      	it	cc
 80064f4:	250c      	movcc	r5, #12
 80064f6:	4629      	mov	r1, r5
 80064f8:	4638      	mov	r0, r7
 80064fa:	f7ff ffa5 	bl	8006448 <sbrk_aligned>
 80064fe:	3001      	adds	r0, #1
 8006500:	d02b      	beq.n	800655a <_malloc_r+0xd2>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	442b      	add	r3, r5
 8006506:	6023      	str	r3, [r4, #0]
 8006508:	e00e      	b.n	8006528 <_malloc_r+0xa0>
 800650a:	6822      	ldr	r2, [r4, #0]
 800650c:	1b52      	subs	r2, r2, r5
 800650e:	d41e      	bmi.n	800654e <_malloc_r+0xc6>
 8006510:	2a0b      	cmp	r2, #11
 8006512:	d916      	bls.n	8006542 <_malloc_r+0xba>
 8006514:	1961      	adds	r1, r4, r5
 8006516:	42a3      	cmp	r3, r4
 8006518:	6025      	str	r5, [r4, #0]
 800651a:	bf18      	it	ne
 800651c:	6059      	strne	r1, [r3, #4]
 800651e:	6863      	ldr	r3, [r4, #4]
 8006520:	bf08      	it	eq
 8006522:	6031      	streq	r1, [r6, #0]
 8006524:	5162      	str	r2, [r4, r5]
 8006526:	604b      	str	r3, [r1, #4]
 8006528:	4638      	mov	r0, r7
 800652a:	f104 060b 	add.w	r6, r4, #11
 800652e:	f003 fa19 	bl	8009964 <__malloc_unlock>
 8006532:	f026 0607 	bic.w	r6, r6, #7
 8006536:	1d23      	adds	r3, r4, #4
 8006538:	1af2      	subs	r2, r6, r3
 800653a:	d0b6      	beq.n	80064aa <_malloc_r+0x22>
 800653c:	1b9b      	subs	r3, r3, r6
 800653e:	50a3      	str	r3, [r4, r2]
 8006540:	e7b3      	b.n	80064aa <_malloc_r+0x22>
 8006542:	6862      	ldr	r2, [r4, #4]
 8006544:	42a3      	cmp	r3, r4
 8006546:	bf0c      	ite	eq
 8006548:	6032      	streq	r2, [r6, #0]
 800654a:	605a      	strne	r2, [r3, #4]
 800654c:	e7ec      	b.n	8006528 <_malloc_r+0xa0>
 800654e:	4623      	mov	r3, r4
 8006550:	6864      	ldr	r4, [r4, #4]
 8006552:	e7b2      	b.n	80064ba <_malloc_r+0x32>
 8006554:	4634      	mov	r4, r6
 8006556:	6876      	ldr	r6, [r6, #4]
 8006558:	e7b9      	b.n	80064ce <_malloc_r+0x46>
 800655a:	230c      	movs	r3, #12
 800655c:	603b      	str	r3, [r7, #0]
 800655e:	4638      	mov	r0, r7
 8006560:	f003 fa00 	bl	8009964 <__malloc_unlock>
 8006564:	e7a1      	b.n	80064aa <_malloc_r+0x22>
 8006566:	6025      	str	r5, [r4, #0]
 8006568:	e7de      	b.n	8006528 <_malloc_r+0xa0>
 800656a:	bf00      	nop
 800656c:	2000090c 	.word	0x2000090c

08006570 <__cvt>:
 8006570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	ec55 4b10 	vmov	r4, r5, d0
 8006578:	2d00      	cmp	r5, #0
 800657a:	460e      	mov	r6, r1
 800657c:	4619      	mov	r1, r3
 800657e:	462b      	mov	r3, r5
 8006580:	bfbb      	ittet	lt
 8006582:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006586:	461d      	movlt	r5, r3
 8006588:	2300      	movge	r3, #0
 800658a:	232d      	movlt	r3, #45	; 0x2d
 800658c:	700b      	strb	r3, [r1, #0]
 800658e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006590:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006594:	4691      	mov	r9, r2
 8006596:	f023 0820 	bic.w	r8, r3, #32
 800659a:	bfbc      	itt	lt
 800659c:	4622      	movlt	r2, r4
 800659e:	4614      	movlt	r4, r2
 80065a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065a4:	d005      	beq.n	80065b2 <__cvt+0x42>
 80065a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065aa:	d100      	bne.n	80065ae <__cvt+0x3e>
 80065ac:	3601      	adds	r6, #1
 80065ae:	2102      	movs	r1, #2
 80065b0:	e000      	b.n	80065b4 <__cvt+0x44>
 80065b2:	2103      	movs	r1, #3
 80065b4:	ab03      	add	r3, sp, #12
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	ab02      	add	r3, sp, #8
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	ec45 4b10 	vmov	d0, r4, r5
 80065c0:	4653      	mov	r3, sl
 80065c2:	4632      	mov	r2, r6
 80065c4:	f001 ff00 	bl	80083c8 <_dtoa_r>
 80065c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065cc:	4607      	mov	r7, r0
 80065ce:	d102      	bne.n	80065d6 <__cvt+0x66>
 80065d0:	f019 0f01 	tst.w	r9, #1
 80065d4:	d022      	beq.n	800661c <__cvt+0xac>
 80065d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065da:	eb07 0906 	add.w	r9, r7, r6
 80065de:	d110      	bne.n	8006602 <__cvt+0x92>
 80065e0:	783b      	ldrb	r3, [r7, #0]
 80065e2:	2b30      	cmp	r3, #48	; 0x30
 80065e4:	d10a      	bne.n	80065fc <__cvt+0x8c>
 80065e6:	2200      	movs	r2, #0
 80065e8:	2300      	movs	r3, #0
 80065ea:	4620      	mov	r0, r4
 80065ec:	4629      	mov	r1, r5
 80065ee:	f7fa fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80065f2:	b918      	cbnz	r0, 80065fc <__cvt+0x8c>
 80065f4:	f1c6 0601 	rsb	r6, r6, #1
 80065f8:	f8ca 6000 	str.w	r6, [sl]
 80065fc:	f8da 3000 	ldr.w	r3, [sl]
 8006600:	4499      	add	r9, r3
 8006602:	2200      	movs	r2, #0
 8006604:	2300      	movs	r3, #0
 8006606:	4620      	mov	r0, r4
 8006608:	4629      	mov	r1, r5
 800660a:	f7fa fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800660e:	b108      	cbz	r0, 8006614 <__cvt+0xa4>
 8006610:	f8cd 900c 	str.w	r9, [sp, #12]
 8006614:	2230      	movs	r2, #48	; 0x30
 8006616:	9b03      	ldr	r3, [sp, #12]
 8006618:	454b      	cmp	r3, r9
 800661a:	d307      	bcc.n	800662c <__cvt+0xbc>
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006620:	1bdb      	subs	r3, r3, r7
 8006622:	4638      	mov	r0, r7
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	b004      	add	sp, #16
 8006628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662c:	1c59      	adds	r1, r3, #1
 800662e:	9103      	str	r1, [sp, #12]
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e7f0      	b.n	8006616 <__cvt+0xa6>

08006634 <__exponent>:
 8006634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006636:	4603      	mov	r3, r0
 8006638:	2900      	cmp	r1, #0
 800663a:	bfb8      	it	lt
 800663c:	4249      	neglt	r1, r1
 800663e:	f803 2b02 	strb.w	r2, [r3], #2
 8006642:	bfb4      	ite	lt
 8006644:	222d      	movlt	r2, #45	; 0x2d
 8006646:	222b      	movge	r2, #43	; 0x2b
 8006648:	2909      	cmp	r1, #9
 800664a:	7042      	strb	r2, [r0, #1]
 800664c:	dd2a      	ble.n	80066a4 <__exponent+0x70>
 800664e:	f10d 0407 	add.w	r4, sp, #7
 8006652:	46a4      	mov	ip, r4
 8006654:	270a      	movs	r7, #10
 8006656:	46a6      	mov	lr, r4
 8006658:	460a      	mov	r2, r1
 800665a:	fb91 f6f7 	sdiv	r6, r1, r7
 800665e:	fb07 1516 	mls	r5, r7, r6, r1
 8006662:	3530      	adds	r5, #48	; 0x30
 8006664:	2a63      	cmp	r2, #99	; 0x63
 8006666:	f104 34ff 	add.w	r4, r4, #4294967295
 800666a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800666e:	4631      	mov	r1, r6
 8006670:	dcf1      	bgt.n	8006656 <__exponent+0x22>
 8006672:	3130      	adds	r1, #48	; 0x30
 8006674:	f1ae 0502 	sub.w	r5, lr, #2
 8006678:	f804 1c01 	strb.w	r1, [r4, #-1]
 800667c:	1c44      	adds	r4, r0, #1
 800667e:	4629      	mov	r1, r5
 8006680:	4561      	cmp	r1, ip
 8006682:	d30a      	bcc.n	800669a <__exponent+0x66>
 8006684:	f10d 0209 	add.w	r2, sp, #9
 8006688:	eba2 020e 	sub.w	r2, r2, lr
 800668c:	4565      	cmp	r5, ip
 800668e:	bf88      	it	hi
 8006690:	2200      	movhi	r2, #0
 8006692:	4413      	add	r3, r2
 8006694:	1a18      	subs	r0, r3, r0
 8006696:	b003      	add	sp, #12
 8006698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800669a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800669e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066a2:	e7ed      	b.n	8006680 <__exponent+0x4c>
 80066a4:	2330      	movs	r3, #48	; 0x30
 80066a6:	3130      	adds	r1, #48	; 0x30
 80066a8:	7083      	strb	r3, [r0, #2]
 80066aa:	70c1      	strb	r1, [r0, #3]
 80066ac:	1d03      	adds	r3, r0, #4
 80066ae:	e7f1      	b.n	8006694 <__exponent+0x60>

080066b0 <_printf_float>:
 80066b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	ed2d 8b02 	vpush	{d8}
 80066b8:	b08d      	sub	sp, #52	; 0x34
 80066ba:	460c      	mov	r4, r1
 80066bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066c0:	4616      	mov	r6, r2
 80066c2:	461f      	mov	r7, r3
 80066c4:	4605      	mov	r5, r0
 80066c6:	f003 f8b1 	bl	800982c <_localeconv_r>
 80066ca:	f8d0 a000 	ldr.w	sl, [r0]
 80066ce:	4650      	mov	r0, sl
 80066d0:	f7f9 fd7e 	bl	80001d0 <strlen>
 80066d4:	2300      	movs	r3, #0
 80066d6:	930a      	str	r3, [sp, #40]	; 0x28
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	9305      	str	r3, [sp, #20]
 80066dc:	f8d8 3000 	ldr.w	r3, [r8]
 80066e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066e4:	3307      	adds	r3, #7
 80066e6:	f023 0307 	bic.w	r3, r3, #7
 80066ea:	f103 0208 	add.w	r2, r3, #8
 80066ee:	f8c8 2000 	str.w	r2, [r8]
 80066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006702:	9307      	str	r3, [sp, #28]
 8006704:	f8cd 8018 	str.w	r8, [sp, #24]
 8006708:	ee08 0a10 	vmov	s16, r0
 800670c:	4b9f      	ldr	r3, [pc, #636]	; (800698c <_printf_float+0x2dc>)
 800670e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006712:	f04f 32ff 	mov.w	r2, #4294967295
 8006716:	f7fa fa09 	bl	8000b2c <__aeabi_dcmpun>
 800671a:	bb88      	cbnz	r0, 8006780 <_printf_float+0xd0>
 800671c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006720:	4b9a      	ldr	r3, [pc, #616]	; (800698c <_printf_float+0x2dc>)
 8006722:	f04f 32ff 	mov.w	r2, #4294967295
 8006726:	f7fa f9e3 	bl	8000af0 <__aeabi_dcmple>
 800672a:	bb48      	cbnz	r0, 8006780 <_printf_float+0xd0>
 800672c:	2200      	movs	r2, #0
 800672e:	2300      	movs	r3, #0
 8006730:	4640      	mov	r0, r8
 8006732:	4649      	mov	r1, r9
 8006734:	f7fa f9d2 	bl	8000adc <__aeabi_dcmplt>
 8006738:	b110      	cbz	r0, 8006740 <_printf_float+0x90>
 800673a:	232d      	movs	r3, #45	; 0x2d
 800673c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006740:	4b93      	ldr	r3, [pc, #588]	; (8006990 <_printf_float+0x2e0>)
 8006742:	4894      	ldr	r0, [pc, #592]	; (8006994 <_printf_float+0x2e4>)
 8006744:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006748:	bf94      	ite	ls
 800674a:	4698      	movls	r8, r3
 800674c:	4680      	movhi	r8, r0
 800674e:	2303      	movs	r3, #3
 8006750:	6123      	str	r3, [r4, #16]
 8006752:	9b05      	ldr	r3, [sp, #20]
 8006754:	f023 0204 	bic.w	r2, r3, #4
 8006758:	6022      	str	r2, [r4, #0]
 800675a:	f04f 0900 	mov.w	r9, #0
 800675e:	9700      	str	r7, [sp, #0]
 8006760:	4633      	mov	r3, r6
 8006762:	aa0b      	add	r2, sp, #44	; 0x2c
 8006764:	4621      	mov	r1, r4
 8006766:	4628      	mov	r0, r5
 8006768:	f000 f9d8 	bl	8006b1c <_printf_common>
 800676c:	3001      	adds	r0, #1
 800676e:	f040 8090 	bne.w	8006892 <_printf_float+0x1e2>
 8006772:	f04f 30ff 	mov.w	r0, #4294967295
 8006776:	b00d      	add	sp, #52	; 0x34
 8006778:	ecbd 8b02 	vpop	{d8}
 800677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006780:	4642      	mov	r2, r8
 8006782:	464b      	mov	r3, r9
 8006784:	4640      	mov	r0, r8
 8006786:	4649      	mov	r1, r9
 8006788:	f7fa f9d0 	bl	8000b2c <__aeabi_dcmpun>
 800678c:	b140      	cbz	r0, 80067a0 <_printf_float+0xf0>
 800678e:	464b      	mov	r3, r9
 8006790:	2b00      	cmp	r3, #0
 8006792:	bfbc      	itt	lt
 8006794:	232d      	movlt	r3, #45	; 0x2d
 8006796:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800679a:	487f      	ldr	r0, [pc, #508]	; (8006998 <_printf_float+0x2e8>)
 800679c:	4b7f      	ldr	r3, [pc, #508]	; (800699c <_printf_float+0x2ec>)
 800679e:	e7d1      	b.n	8006744 <_printf_float+0x94>
 80067a0:	6863      	ldr	r3, [r4, #4]
 80067a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067a6:	9206      	str	r2, [sp, #24]
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	d13f      	bne.n	800682c <_printf_float+0x17c>
 80067ac:	2306      	movs	r3, #6
 80067ae:	6063      	str	r3, [r4, #4]
 80067b0:	9b05      	ldr	r3, [sp, #20]
 80067b2:	6861      	ldr	r1, [r4, #4]
 80067b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067b8:	2300      	movs	r3, #0
 80067ba:	9303      	str	r3, [sp, #12]
 80067bc:	ab0a      	add	r3, sp, #40	; 0x28
 80067be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067c2:	ab09      	add	r3, sp, #36	; 0x24
 80067c4:	ec49 8b10 	vmov	d0, r8, r9
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	6022      	str	r2, [r4, #0]
 80067cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067d0:	4628      	mov	r0, r5
 80067d2:	f7ff fecd 	bl	8006570 <__cvt>
 80067d6:	9b06      	ldr	r3, [sp, #24]
 80067d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067da:	2b47      	cmp	r3, #71	; 0x47
 80067dc:	4680      	mov	r8, r0
 80067de:	d108      	bne.n	80067f2 <_printf_float+0x142>
 80067e0:	1cc8      	adds	r0, r1, #3
 80067e2:	db02      	blt.n	80067ea <_printf_float+0x13a>
 80067e4:	6863      	ldr	r3, [r4, #4]
 80067e6:	4299      	cmp	r1, r3
 80067e8:	dd41      	ble.n	800686e <_printf_float+0x1be>
 80067ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80067ee:	fa5f fb8b 	uxtb.w	fp, fp
 80067f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067f6:	d820      	bhi.n	800683a <_printf_float+0x18a>
 80067f8:	3901      	subs	r1, #1
 80067fa:	465a      	mov	r2, fp
 80067fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006800:	9109      	str	r1, [sp, #36]	; 0x24
 8006802:	f7ff ff17 	bl	8006634 <__exponent>
 8006806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006808:	1813      	adds	r3, r2, r0
 800680a:	2a01      	cmp	r2, #1
 800680c:	4681      	mov	r9, r0
 800680e:	6123      	str	r3, [r4, #16]
 8006810:	dc02      	bgt.n	8006818 <_printf_float+0x168>
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	07d2      	lsls	r2, r2, #31
 8006816:	d501      	bpl.n	800681c <_printf_float+0x16c>
 8006818:	3301      	adds	r3, #1
 800681a:	6123      	str	r3, [r4, #16]
 800681c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006820:	2b00      	cmp	r3, #0
 8006822:	d09c      	beq.n	800675e <_printf_float+0xae>
 8006824:	232d      	movs	r3, #45	; 0x2d
 8006826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800682a:	e798      	b.n	800675e <_printf_float+0xae>
 800682c:	9a06      	ldr	r2, [sp, #24]
 800682e:	2a47      	cmp	r2, #71	; 0x47
 8006830:	d1be      	bne.n	80067b0 <_printf_float+0x100>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1bc      	bne.n	80067b0 <_printf_float+0x100>
 8006836:	2301      	movs	r3, #1
 8006838:	e7b9      	b.n	80067ae <_printf_float+0xfe>
 800683a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800683e:	d118      	bne.n	8006872 <_printf_float+0x1c2>
 8006840:	2900      	cmp	r1, #0
 8006842:	6863      	ldr	r3, [r4, #4]
 8006844:	dd0b      	ble.n	800685e <_printf_float+0x1ae>
 8006846:	6121      	str	r1, [r4, #16]
 8006848:	b913      	cbnz	r3, 8006850 <_printf_float+0x1a0>
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	07d0      	lsls	r0, r2, #31
 800684e:	d502      	bpl.n	8006856 <_printf_float+0x1a6>
 8006850:	3301      	adds	r3, #1
 8006852:	440b      	add	r3, r1
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	65a1      	str	r1, [r4, #88]	; 0x58
 8006858:	f04f 0900 	mov.w	r9, #0
 800685c:	e7de      	b.n	800681c <_printf_float+0x16c>
 800685e:	b913      	cbnz	r3, 8006866 <_printf_float+0x1b6>
 8006860:	6822      	ldr	r2, [r4, #0]
 8006862:	07d2      	lsls	r2, r2, #31
 8006864:	d501      	bpl.n	800686a <_printf_float+0x1ba>
 8006866:	3302      	adds	r3, #2
 8006868:	e7f4      	b.n	8006854 <_printf_float+0x1a4>
 800686a:	2301      	movs	r3, #1
 800686c:	e7f2      	b.n	8006854 <_printf_float+0x1a4>
 800686e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006874:	4299      	cmp	r1, r3
 8006876:	db05      	blt.n	8006884 <_printf_float+0x1d4>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	6121      	str	r1, [r4, #16]
 800687c:	07d8      	lsls	r0, r3, #31
 800687e:	d5ea      	bpl.n	8006856 <_printf_float+0x1a6>
 8006880:	1c4b      	adds	r3, r1, #1
 8006882:	e7e7      	b.n	8006854 <_printf_float+0x1a4>
 8006884:	2900      	cmp	r1, #0
 8006886:	bfd4      	ite	le
 8006888:	f1c1 0202 	rsble	r2, r1, #2
 800688c:	2201      	movgt	r2, #1
 800688e:	4413      	add	r3, r2
 8006890:	e7e0      	b.n	8006854 <_printf_float+0x1a4>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	055a      	lsls	r2, r3, #21
 8006896:	d407      	bmi.n	80068a8 <_printf_float+0x1f8>
 8006898:	6923      	ldr	r3, [r4, #16]
 800689a:	4642      	mov	r2, r8
 800689c:	4631      	mov	r1, r6
 800689e:	4628      	mov	r0, r5
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	d12c      	bne.n	8006900 <_printf_float+0x250>
 80068a6:	e764      	b.n	8006772 <_printf_float+0xc2>
 80068a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068ac:	f240 80e0 	bls.w	8006a70 <_printf_float+0x3c0>
 80068b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068b4:	2200      	movs	r2, #0
 80068b6:	2300      	movs	r3, #0
 80068b8:	f7fa f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d034      	beq.n	800692a <_printf_float+0x27a>
 80068c0:	4a37      	ldr	r2, [pc, #220]	; (80069a0 <_printf_float+0x2f0>)
 80068c2:	2301      	movs	r3, #1
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	f43f af51 	beq.w	8006772 <_printf_float+0xc2>
 80068d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068d4:	429a      	cmp	r2, r3
 80068d6:	db02      	blt.n	80068de <_printf_float+0x22e>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	07d8      	lsls	r0, r3, #31
 80068dc:	d510      	bpl.n	8006900 <_printf_float+0x250>
 80068de:	ee18 3a10 	vmov	r3, s16
 80068e2:	4652      	mov	r2, sl
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af41 	beq.w	8006772 <_printf_float+0xc2>
 80068f0:	f04f 0800 	mov.w	r8, #0
 80068f4:	f104 091a 	add.w	r9, r4, #26
 80068f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068fa:	3b01      	subs	r3, #1
 80068fc:	4543      	cmp	r3, r8
 80068fe:	dc09      	bgt.n	8006914 <_printf_float+0x264>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	079b      	lsls	r3, r3, #30
 8006904:	f100 8105 	bmi.w	8006b12 <_printf_float+0x462>
 8006908:	68e0      	ldr	r0, [r4, #12]
 800690a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800690c:	4298      	cmp	r0, r3
 800690e:	bfb8      	it	lt
 8006910:	4618      	movlt	r0, r3
 8006912:	e730      	b.n	8006776 <_printf_float+0xc6>
 8006914:	2301      	movs	r3, #1
 8006916:	464a      	mov	r2, r9
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	f43f af27 	beq.w	8006772 <_printf_float+0xc2>
 8006924:	f108 0801 	add.w	r8, r8, #1
 8006928:	e7e6      	b.n	80068f8 <_printf_float+0x248>
 800692a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692c:	2b00      	cmp	r3, #0
 800692e:	dc39      	bgt.n	80069a4 <_printf_float+0x2f4>
 8006930:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <_printf_float+0x2f0>)
 8006932:	2301      	movs	r3, #1
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af19 	beq.w	8006772 <_printf_float+0xc2>
 8006940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006944:	4313      	orrs	r3, r2
 8006946:	d102      	bne.n	800694e <_printf_float+0x29e>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	07d9      	lsls	r1, r3, #31
 800694c:	d5d8      	bpl.n	8006900 <_printf_float+0x250>
 800694e:	ee18 3a10 	vmov	r3, s16
 8006952:	4652      	mov	r2, sl
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f af09 	beq.w	8006772 <_printf_float+0xc2>
 8006960:	f04f 0900 	mov.w	r9, #0
 8006964:	f104 0a1a 	add.w	sl, r4, #26
 8006968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696a:	425b      	negs	r3, r3
 800696c:	454b      	cmp	r3, r9
 800696e:	dc01      	bgt.n	8006974 <_printf_float+0x2c4>
 8006970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006972:	e792      	b.n	800689a <_printf_float+0x1ea>
 8006974:	2301      	movs	r3, #1
 8006976:	4652      	mov	r2, sl
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f aef7 	beq.w	8006772 <_printf_float+0xc2>
 8006984:	f109 0901 	add.w	r9, r9, #1
 8006988:	e7ee      	b.n	8006968 <_printf_float+0x2b8>
 800698a:	bf00      	nop
 800698c:	7fefffff 	.word	0x7fefffff
 8006990:	0800e960 	.word	0x0800e960
 8006994:	0800e964 	.word	0x0800e964
 8006998:	0800e96c 	.word	0x0800e96c
 800699c:	0800e968 	.word	0x0800e968
 80069a0:	0800e970 	.word	0x0800e970
 80069a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069a8:	429a      	cmp	r2, r3
 80069aa:	bfa8      	it	ge
 80069ac:	461a      	movge	r2, r3
 80069ae:	2a00      	cmp	r2, #0
 80069b0:	4691      	mov	r9, r2
 80069b2:	dc37      	bgt.n	8006a24 <_printf_float+0x374>
 80069b4:	f04f 0b00 	mov.w	fp, #0
 80069b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069bc:	f104 021a 	add.w	r2, r4, #26
 80069c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069c2:	9305      	str	r3, [sp, #20]
 80069c4:	eba3 0309 	sub.w	r3, r3, r9
 80069c8:	455b      	cmp	r3, fp
 80069ca:	dc33      	bgt.n	8006a34 <_printf_float+0x384>
 80069cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069d0:	429a      	cmp	r2, r3
 80069d2:	db3b      	blt.n	8006a4c <_printf_float+0x39c>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	07da      	lsls	r2, r3, #31
 80069d8:	d438      	bmi.n	8006a4c <_printf_float+0x39c>
 80069da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069dc:	9a05      	ldr	r2, [sp, #20]
 80069de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069e0:	1a9a      	subs	r2, r3, r2
 80069e2:	eba3 0901 	sub.w	r9, r3, r1
 80069e6:	4591      	cmp	r9, r2
 80069e8:	bfa8      	it	ge
 80069ea:	4691      	movge	r9, r2
 80069ec:	f1b9 0f00 	cmp.w	r9, #0
 80069f0:	dc35      	bgt.n	8006a5e <_printf_float+0x3ae>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069fa:	f104 0a1a 	add.w	sl, r4, #26
 80069fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a02:	1a9b      	subs	r3, r3, r2
 8006a04:	eba3 0309 	sub.w	r3, r3, r9
 8006a08:	4543      	cmp	r3, r8
 8006a0a:	f77f af79 	ble.w	8006900 <_printf_float+0x250>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4652      	mov	r2, sl
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f43f aeaa 	beq.w	8006772 <_printf_float+0xc2>
 8006a1e:	f108 0801 	add.w	r8, r8, #1
 8006a22:	e7ec      	b.n	80069fe <_printf_float+0x34e>
 8006a24:	4613      	mov	r3, r2
 8006a26:	4631      	mov	r1, r6
 8006a28:	4642      	mov	r2, r8
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d1c0      	bne.n	80069b4 <_printf_float+0x304>
 8006a32:	e69e      	b.n	8006772 <_printf_float+0xc2>
 8006a34:	2301      	movs	r3, #1
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	9205      	str	r2, [sp, #20]
 8006a3c:	47b8      	blx	r7
 8006a3e:	3001      	adds	r0, #1
 8006a40:	f43f ae97 	beq.w	8006772 <_printf_float+0xc2>
 8006a44:	9a05      	ldr	r2, [sp, #20]
 8006a46:	f10b 0b01 	add.w	fp, fp, #1
 8006a4a:	e7b9      	b.n	80069c0 <_printf_float+0x310>
 8006a4c:	ee18 3a10 	vmov	r3, s16
 8006a50:	4652      	mov	r2, sl
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d1be      	bne.n	80069da <_printf_float+0x32a>
 8006a5c:	e689      	b.n	8006772 <_printf_float+0xc2>
 8006a5e:	9a05      	ldr	r2, [sp, #20]
 8006a60:	464b      	mov	r3, r9
 8006a62:	4442      	add	r2, r8
 8006a64:	4631      	mov	r1, r6
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b8      	blx	r7
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d1c1      	bne.n	80069f2 <_printf_float+0x342>
 8006a6e:	e680      	b.n	8006772 <_printf_float+0xc2>
 8006a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a72:	2a01      	cmp	r2, #1
 8006a74:	dc01      	bgt.n	8006a7a <_printf_float+0x3ca>
 8006a76:	07db      	lsls	r3, r3, #31
 8006a78:	d538      	bpl.n	8006aec <_printf_float+0x43c>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4628      	mov	r0, r5
 8006a82:	47b8      	blx	r7
 8006a84:	3001      	adds	r0, #1
 8006a86:	f43f ae74 	beq.w	8006772 <_printf_float+0xc2>
 8006a8a:	ee18 3a10 	vmov	r3, s16
 8006a8e:	4652      	mov	r2, sl
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f ae6b 	beq.w	8006772 <_printf_float+0xc2>
 8006a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f7fa f810 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aa8:	b9d8      	cbnz	r0, 8006ae2 <_printf_float+0x432>
 8006aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aac:	f108 0201 	add.w	r2, r8, #1
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d10e      	bne.n	8006ada <_printf_float+0x42a>
 8006abc:	e659      	b.n	8006772 <_printf_float+0xc2>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f ae52 	beq.w	8006772 <_printf_float+0xc2>
 8006ace:	f108 0801 	add.w	r8, r8, #1
 8006ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	4543      	cmp	r3, r8
 8006ad8:	dcf1      	bgt.n	8006abe <_printf_float+0x40e>
 8006ada:	464b      	mov	r3, r9
 8006adc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ae0:	e6dc      	b.n	800689c <_printf_float+0x1ec>
 8006ae2:	f04f 0800 	mov.w	r8, #0
 8006ae6:	f104 0a1a 	add.w	sl, r4, #26
 8006aea:	e7f2      	b.n	8006ad2 <_printf_float+0x422>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4642      	mov	r2, r8
 8006af0:	e7df      	b.n	8006ab2 <_printf_float+0x402>
 8006af2:	2301      	movs	r3, #1
 8006af4:	464a      	mov	r2, r9
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f ae38 	beq.w	8006772 <_printf_float+0xc2>
 8006b02:	f108 0801 	add.w	r8, r8, #1
 8006b06:	68e3      	ldr	r3, [r4, #12]
 8006b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b0a:	1a5b      	subs	r3, r3, r1
 8006b0c:	4543      	cmp	r3, r8
 8006b0e:	dcf0      	bgt.n	8006af2 <_printf_float+0x442>
 8006b10:	e6fa      	b.n	8006908 <_printf_float+0x258>
 8006b12:	f04f 0800 	mov.w	r8, #0
 8006b16:	f104 0919 	add.w	r9, r4, #25
 8006b1a:	e7f4      	b.n	8006b06 <_printf_float+0x456>

08006b1c <_printf_common>:
 8006b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	4616      	mov	r6, r2
 8006b22:	4699      	mov	r9, r3
 8006b24:	688a      	ldr	r2, [r1, #8]
 8006b26:	690b      	ldr	r3, [r1, #16]
 8006b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	bfb8      	it	lt
 8006b30:	4613      	movlt	r3, r2
 8006b32:	6033      	str	r3, [r6, #0]
 8006b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b38:	4607      	mov	r7, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	b10a      	cbz	r2, 8006b42 <_printf_common+0x26>
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6033      	str	r3, [r6, #0]
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	0699      	lsls	r1, r3, #26
 8006b46:	bf42      	ittt	mi
 8006b48:	6833      	ldrmi	r3, [r6, #0]
 8006b4a:	3302      	addmi	r3, #2
 8006b4c:	6033      	strmi	r3, [r6, #0]
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	f015 0506 	ands.w	r5, r5, #6
 8006b54:	d106      	bne.n	8006b64 <_printf_common+0x48>
 8006b56:	f104 0a19 	add.w	sl, r4, #25
 8006b5a:	68e3      	ldr	r3, [r4, #12]
 8006b5c:	6832      	ldr	r2, [r6, #0]
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dc26      	bgt.n	8006bb2 <_printf_common+0x96>
 8006b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b68:	1e13      	subs	r3, r2, #0
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	bf18      	it	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	0692      	lsls	r2, r2, #26
 8006b72:	d42b      	bmi.n	8006bcc <_printf_common+0xb0>
 8006b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b78:	4649      	mov	r1, r9
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	47c0      	blx	r8
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d01e      	beq.n	8006bc0 <_printf_common+0xa4>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	68e5      	ldr	r5, [r4, #12]
 8006b86:	6832      	ldr	r2, [r6, #0]
 8006b88:	f003 0306 	and.w	r3, r3, #6
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	bf08      	it	eq
 8006b90:	1aad      	subeq	r5, r5, r2
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	6922      	ldr	r2, [r4, #16]
 8006b96:	bf0c      	ite	eq
 8006b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b9c:	2500      	movne	r5, #0
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	bfc4      	itt	gt
 8006ba2:	1a9b      	subgt	r3, r3, r2
 8006ba4:	18ed      	addgt	r5, r5, r3
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	341a      	adds	r4, #26
 8006baa:	42b5      	cmp	r5, r6
 8006bac:	d11a      	bne.n	8006be4 <_printf_common+0xc8>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	e008      	b.n	8006bc4 <_printf_common+0xa8>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	4638      	mov	r0, r7
 8006bba:	47c0      	blx	r8
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d103      	bne.n	8006bc8 <_printf_common+0xac>
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc8:	3501      	adds	r5, #1
 8006bca:	e7c6      	b.n	8006b5a <_printf_common+0x3e>
 8006bcc:	18e1      	adds	r1, r4, r3
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	2030      	movs	r0, #48	; 0x30
 8006bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bd6:	4422      	add	r2, r4
 8006bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006be0:	3302      	adds	r3, #2
 8006be2:	e7c7      	b.n	8006b74 <_printf_common+0x58>
 8006be4:	2301      	movs	r3, #1
 8006be6:	4622      	mov	r2, r4
 8006be8:	4649      	mov	r1, r9
 8006bea:	4638      	mov	r0, r7
 8006bec:	47c0      	blx	r8
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d0e6      	beq.n	8006bc0 <_printf_common+0xa4>
 8006bf2:	3601      	adds	r6, #1
 8006bf4:	e7d9      	b.n	8006baa <_printf_common+0x8e>
	...

08006bf8 <_printf_i>:
 8006bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	7e0f      	ldrb	r7, [r1, #24]
 8006bfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c00:	2f78      	cmp	r7, #120	; 0x78
 8006c02:	4691      	mov	r9, r2
 8006c04:	4680      	mov	r8, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	469a      	mov	sl, r3
 8006c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c0e:	d807      	bhi.n	8006c20 <_printf_i+0x28>
 8006c10:	2f62      	cmp	r7, #98	; 0x62
 8006c12:	d80a      	bhi.n	8006c2a <_printf_i+0x32>
 8006c14:	2f00      	cmp	r7, #0
 8006c16:	f000 80d8 	beq.w	8006dca <_printf_i+0x1d2>
 8006c1a:	2f58      	cmp	r7, #88	; 0x58
 8006c1c:	f000 80a3 	beq.w	8006d66 <_printf_i+0x16e>
 8006c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c28:	e03a      	b.n	8006ca0 <_printf_i+0xa8>
 8006c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c2e:	2b15      	cmp	r3, #21
 8006c30:	d8f6      	bhi.n	8006c20 <_printf_i+0x28>
 8006c32:	a101      	add	r1, pc, #4	; (adr r1, 8006c38 <_printf_i+0x40>)
 8006c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c38:	08006c91 	.word	0x08006c91
 8006c3c:	08006ca5 	.word	0x08006ca5
 8006c40:	08006c21 	.word	0x08006c21
 8006c44:	08006c21 	.word	0x08006c21
 8006c48:	08006c21 	.word	0x08006c21
 8006c4c:	08006c21 	.word	0x08006c21
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006c21 	.word	0x08006c21
 8006c58:	08006c21 	.word	0x08006c21
 8006c5c:	08006c21 	.word	0x08006c21
 8006c60:	08006c21 	.word	0x08006c21
 8006c64:	08006db1 	.word	0x08006db1
 8006c68:	08006cd5 	.word	0x08006cd5
 8006c6c:	08006d93 	.word	0x08006d93
 8006c70:	08006c21 	.word	0x08006c21
 8006c74:	08006c21 	.word	0x08006c21
 8006c78:	08006dd3 	.word	0x08006dd3
 8006c7c:	08006c21 	.word	0x08006c21
 8006c80:	08006cd5 	.word	0x08006cd5
 8006c84:	08006c21 	.word	0x08006c21
 8006c88:	08006c21 	.word	0x08006c21
 8006c8c:	08006d9b 	.word	0x08006d9b
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	1d1a      	adds	r2, r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	602a      	str	r2, [r5, #0]
 8006c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e0a3      	b.n	8006dec <_printf_i+0x1f4>
 8006ca4:	6820      	ldr	r0, [r4, #0]
 8006ca6:	6829      	ldr	r1, [r5, #0]
 8006ca8:	0606      	lsls	r6, r0, #24
 8006caa:	f101 0304 	add.w	r3, r1, #4
 8006cae:	d50a      	bpl.n	8006cc6 <_printf_i+0xce>
 8006cb0:	680e      	ldr	r6, [r1, #0]
 8006cb2:	602b      	str	r3, [r5, #0]
 8006cb4:	2e00      	cmp	r6, #0
 8006cb6:	da03      	bge.n	8006cc0 <_printf_i+0xc8>
 8006cb8:	232d      	movs	r3, #45	; 0x2d
 8006cba:	4276      	negs	r6, r6
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc0:	485e      	ldr	r0, [pc, #376]	; (8006e3c <_printf_i+0x244>)
 8006cc2:	230a      	movs	r3, #10
 8006cc4:	e019      	b.n	8006cfa <_printf_i+0x102>
 8006cc6:	680e      	ldr	r6, [r1, #0]
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cce:	bf18      	it	ne
 8006cd0:	b236      	sxthne	r6, r6
 8006cd2:	e7ef      	b.n	8006cb4 <_printf_i+0xbc>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	6820      	ldr	r0, [r4, #0]
 8006cd8:	1d19      	adds	r1, r3, #4
 8006cda:	6029      	str	r1, [r5, #0]
 8006cdc:	0601      	lsls	r1, r0, #24
 8006cde:	d501      	bpl.n	8006ce4 <_printf_i+0xec>
 8006ce0:	681e      	ldr	r6, [r3, #0]
 8006ce2:	e002      	b.n	8006cea <_printf_i+0xf2>
 8006ce4:	0646      	lsls	r6, r0, #25
 8006ce6:	d5fb      	bpl.n	8006ce0 <_printf_i+0xe8>
 8006ce8:	881e      	ldrh	r6, [r3, #0]
 8006cea:	4854      	ldr	r0, [pc, #336]	; (8006e3c <_printf_i+0x244>)
 8006cec:	2f6f      	cmp	r7, #111	; 0x6f
 8006cee:	bf0c      	ite	eq
 8006cf0:	2308      	moveq	r3, #8
 8006cf2:	230a      	movne	r3, #10
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cfa:	6865      	ldr	r5, [r4, #4]
 8006cfc:	60a5      	str	r5, [r4, #8]
 8006cfe:	2d00      	cmp	r5, #0
 8006d00:	bfa2      	ittt	ge
 8006d02:	6821      	ldrge	r1, [r4, #0]
 8006d04:	f021 0104 	bicge.w	r1, r1, #4
 8006d08:	6021      	strge	r1, [r4, #0]
 8006d0a:	b90e      	cbnz	r6, 8006d10 <_printf_i+0x118>
 8006d0c:	2d00      	cmp	r5, #0
 8006d0e:	d04d      	beq.n	8006dac <_printf_i+0x1b4>
 8006d10:	4615      	mov	r5, r2
 8006d12:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d16:	fb03 6711 	mls	r7, r3, r1, r6
 8006d1a:	5dc7      	ldrb	r7, [r0, r7]
 8006d1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d20:	4637      	mov	r7, r6
 8006d22:	42bb      	cmp	r3, r7
 8006d24:	460e      	mov	r6, r1
 8006d26:	d9f4      	bls.n	8006d12 <_printf_i+0x11a>
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d10b      	bne.n	8006d44 <_printf_i+0x14c>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	07de      	lsls	r6, r3, #31
 8006d30:	d508      	bpl.n	8006d44 <_printf_i+0x14c>
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	6861      	ldr	r1, [r4, #4]
 8006d36:	4299      	cmp	r1, r3
 8006d38:	bfde      	ittt	le
 8006d3a:	2330      	movle	r3, #48	; 0x30
 8006d3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d44:	1b52      	subs	r2, r2, r5
 8006d46:	6122      	str	r2, [r4, #16]
 8006d48:	f8cd a000 	str.w	sl, [sp]
 8006d4c:	464b      	mov	r3, r9
 8006d4e:	aa03      	add	r2, sp, #12
 8006d50:	4621      	mov	r1, r4
 8006d52:	4640      	mov	r0, r8
 8006d54:	f7ff fee2 	bl	8006b1c <_printf_common>
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d14c      	bne.n	8006df6 <_printf_i+0x1fe>
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	b004      	add	sp, #16
 8006d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d66:	4835      	ldr	r0, [pc, #212]	; (8006e3c <_printf_i+0x244>)
 8006d68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d6c:	6829      	ldr	r1, [r5, #0]
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d74:	6029      	str	r1, [r5, #0]
 8006d76:	061d      	lsls	r5, r3, #24
 8006d78:	d514      	bpl.n	8006da4 <_printf_i+0x1ac>
 8006d7a:	07df      	lsls	r7, r3, #31
 8006d7c:	bf44      	itt	mi
 8006d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d82:	6023      	strmi	r3, [r4, #0]
 8006d84:	b91e      	cbnz	r6, 8006d8e <_printf_i+0x196>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	f023 0320 	bic.w	r3, r3, #32
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	2310      	movs	r3, #16
 8006d90:	e7b0      	b.n	8006cf4 <_printf_i+0xfc>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	f043 0320 	orr.w	r3, r3, #32
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	2378      	movs	r3, #120	; 0x78
 8006d9c:	4828      	ldr	r0, [pc, #160]	; (8006e40 <_printf_i+0x248>)
 8006d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006da2:	e7e3      	b.n	8006d6c <_printf_i+0x174>
 8006da4:	0659      	lsls	r1, r3, #25
 8006da6:	bf48      	it	mi
 8006da8:	b2b6      	uxthmi	r6, r6
 8006daa:	e7e6      	b.n	8006d7a <_printf_i+0x182>
 8006dac:	4615      	mov	r5, r2
 8006dae:	e7bb      	b.n	8006d28 <_printf_i+0x130>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	6826      	ldr	r6, [r4, #0]
 8006db4:	6961      	ldr	r1, [r4, #20]
 8006db6:	1d18      	adds	r0, r3, #4
 8006db8:	6028      	str	r0, [r5, #0]
 8006dba:	0635      	lsls	r5, r6, #24
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_i+0x1cc>
 8006dc0:	6019      	str	r1, [r3, #0]
 8006dc2:	e002      	b.n	8006dca <_printf_i+0x1d2>
 8006dc4:	0670      	lsls	r0, r6, #25
 8006dc6:	d5fb      	bpl.n	8006dc0 <_printf_i+0x1c8>
 8006dc8:	8019      	strh	r1, [r3, #0]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6123      	str	r3, [r4, #16]
 8006dce:	4615      	mov	r5, r2
 8006dd0:	e7ba      	b.n	8006d48 <_printf_i+0x150>
 8006dd2:	682b      	ldr	r3, [r5, #0]
 8006dd4:	1d1a      	adds	r2, r3, #4
 8006dd6:	602a      	str	r2, [r5, #0]
 8006dd8:	681d      	ldr	r5, [r3, #0]
 8006dda:	6862      	ldr	r2, [r4, #4]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4628      	mov	r0, r5
 8006de0:	f7f9 f9fe 	bl	80001e0 <memchr>
 8006de4:	b108      	cbz	r0, 8006dea <_printf_i+0x1f2>
 8006de6:	1b40      	subs	r0, r0, r5
 8006de8:	6060      	str	r0, [r4, #4]
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	2300      	movs	r3, #0
 8006df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df4:	e7a8      	b.n	8006d48 <_printf_i+0x150>
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	462a      	mov	r2, r5
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	47d0      	blx	sl
 8006e00:	3001      	adds	r0, #1
 8006e02:	d0ab      	beq.n	8006d5c <_printf_i+0x164>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	079b      	lsls	r3, r3, #30
 8006e08:	d413      	bmi.n	8006e32 <_printf_i+0x23a>
 8006e0a:	68e0      	ldr	r0, [r4, #12]
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	4298      	cmp	r0, r3
 8006e10:	bfb8      	it	lt
 8006e12:	4618      	movlt	r0, r3
 8006e14:	e7a4      	b.n	8006d60 <_printf_i+0x168>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4632      	mov	r2, r6
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	47d0      	blx	sl
 8006e20:	3001      	adds	r0, #1
 8006e22:	d09b      	beq.n	8006d5c <_printf_i+0x164>
 8006e24:	3501      	adds	r5, #1
 8006e26:	68e3      	ldr	r3, [r4, #12]
 8006e28:	9903      	ldr	r1, [sp, #12]
 8006e2a:	1a5b      	subs	r3, r3, r1
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	dcf2      	bgt.n	8006e16 <_printf_i+0x21e>
 8006e30:	e7eb      	b.n	8006e0a <_printf_i+0x212>
 8006e32:	2500      	movs	r5, #0
 8006e34:	f104 0619 	add.w	r6, r4, #25
 8006e38:	e7f5      	b.n	8006e26 <_printf_i+0x22e>
 8006e3a:	bf00      	nop
 8006e3c:	0800e972 	.word	0x0800e972
 8006e40:	0800e983 	.word	0x0800e983

08006e44 <_scanf_float>:
 8006e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e48:	b087      	sub	sp, #28
 8006e4a:	4617      	mov	r7, r2
 8006e4c:	9303      	str	r3, [sp, #12]
 8006e4e:	688b      	ldr	r3, [r1, #8]
 8006e50:	1e5a      	subs	r2, r3, #1
 8006e52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e56:	bf83      	ittte	hi
 8006e58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006e5c:	195b      	addhi	r3, r3, r5
 8006e5e:	9302      	strhi	r3, [sp, #8]
 8006e60:	2300      	movls	r3, #0
 8006e62:	bf86      	itte	hi
 8006e64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e68:	608b      	strhi	r3, [r1, #8]
 8006e6a:	9302      	strls	r3, [sp, #8]
 8006e6c:	680b      	ldr	r3, [r1, #0]
 8006e6e:	468b      	mov	fp, r1
 8006e70:	2500      	movs	r5, #0
 8006e72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e76:	f84b 3b1c 	str.w	r3, [fp], #28
 8006e7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e7e:	4680      	mov	r8, r0
 8006e80:	460c      	mov	r4, r1
 8006e82:	465e      	mov	r6, fp
 8006e84:	46aa      	mov	sl, r5
 8006e86:	46a9      	mov	r9, r5
 8006e88:	9501      	str	r5, [sp, #4]
 8006e8a:	68a2      	ldr	r2, [r4, #8]
 8006e8c:	b152      	cbz	r2, 8006ea4 <_scanf_float+0x60>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b4e      	cmp	r3, #78	; 0x4e
 8006e94:	d864      	bhi.n	8006f60 <_scanf_float+0x11c>
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	d83c      	bhi.n	8006f14 <_scanf_float+0xd0>
 8006e9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006e9e:	b2c8      	uxtb	r0, r1
 8006ea0:	280e      	cmp	r0, #14
 8006ea2:	d93a      	bls.n	8006f1a <_scanf_float+0xd6>
 8006ea4:	f1b9 0f00 	cmp.w	r9, #0
 8006ea8:	d003      	beq.n	8006eb2 <_scanf_float+0x6e>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eb6:	f1ba 0f01 	cmp.w	sl, #1
 8006eba:	f200 8113 	bhi.w	80070e4 <_scanf_float+0x2a0>
 8006ebe:	455e      	cmp	r6, fp
 8006ec0:	f200 8105 	bhi.w	80070ce <_scanf_float+0x28a>
 8006ec4:	2501      	movs	r5, #1
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	b007      	add	sp, #28
 8006eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ece:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006ed2:	2a0d      	cmp	r2, #13
 8006ed4:	d8e6      	bhi.n	8006ea4 <_scanf_float+0x60>
 8006ed6:	a101      	add	r1, pc, #4	; (adr r1, 8006edc <_scanf_float+0x98>)
 8006ed8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006edc:	0800701b 	.word	0x0800701b
 8006ee0:	08006ea5 	.word	0x08006ea5
 8006ee4:	08006ea5 	.word	0x08006ea5
 8006ee8:	08006ea5 	.word	0x08006ea5
 8006eec:	0800707b 	.word	0x0800707b
 8006ef0:	08007053 	.word	0x08007053
 8006ef4:	08006ea5 	.word	0x08006ea5
 8006ef8:	08006ea5 	.word	0x08006ea5
 8006efc:	08007029 	.word	0x08007029
 8006f00:	08006ea5 	.word	0x08006ea5
 8006f04:	08006ea5 	.word	0x08006ea5
 8006f08:	08006ea5 	.word	0x08006ea5
 8006f0c:	08006ea5 	.word	0x08006ea5
 8006f10:	08006fe1 	.word	0x08006fe1
 8006f14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f18:	e7db      	b.n	8006ed2 <_scanf_float+0x8e>
 8006f1a:	290e      	cmp	r1, #14
 8006f1c:	d8c2      	bhi.n	8006ea4 <_scanf_float+0x60>
 8006f1e:	a001      	add	r0, pc, #4	; (adr r0, 8006f24 <_scanf_float+0xe0>)
 8006f20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f24:	08006fd3 	.word	0x08006fd3
 8006f28:	08006ea5 	.word	0x08006ea5
 8006f2c:	08006fd3 	.word	0x08006fd3
 8006f30:	08007067 	.word	0x08007067
 8006f34:	08006ea5 	.word	0x08006ea5
 8006f38:	08006f81 	.word	0x08006f81
 8006f3c:	08006fbd 	.word	0x08006fbd
 8006f40:	08006fbd 	.word	0x08006fbd
 8006f44:	08006fbd 	.word	0x08006fbd
 8006f48:	08006fbd 	.word	0x08006fbd
 8006f4c:	08006fbd 	.word	0x08006fbd
 8006f50:	08006fbd 	.word	0x08006fbd
 8006f54:	08006fbd 	.word	0x08006fbd
 8006f58:	08006fbd 	.word	0x08006fbd
 8006f5c:	08006fbd 	.word	0x08006fbd
 8006f60:	2b6e      	cmp	r3, #110	; 0x6e
 8006f62:	d809      	bhi.n	8006f78 <_scanf_float+0x134>
 8006f64:	2b60      	cmp	r3, #96	; 0x60
 8006f66:	d8b2      	bhi.n	8006ece <_scanf_float+0x8a>
 8006f68:	2b54      	cmp	r3, #84	; 0x54
 8006f6a:	d077      	beq.n	800705c <_scanf_float+0x218>
 8006f6c:	2b59      	cmp	r3, #89	; 0x59
 8006f6e:	d199      	bne.n	8006ea4 <_scanf_float+0x60>
 8006f70:	2d07      	cmp	r5, #7
 8006f72:	d197      	bne.n	8006ea4 <_scanf_float+0x60>
 8006f74:	2508      	movs	r5, #8
 8006f76:	e029      	b.n	8006fcc <_scanf_float+0x188>
 8006f78:	2b74      	cmp	r3, #116	; 0x74
 8006f7a:	d06f      	beq.n	800705c <_scanf_float+0x218>
 8006f7c:	2b79      	cmp	r3, #121	; 0x79
 8006f7e:	e7f6      	b.n	8006f6e <_scanf_float+0x12a>
 8006f80:	6821      	ldr	r1, [r4, #0]
 8006f82:	05c8      	lsls	r0, r1, #23
 8006f84:	d51a      	bpl.n	8006fbc <_scanf_float+0x178>
 8006f86:	9b02      	ldr	r3, [sp, #8]
 8006f88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f8c:	6021      	str	r1, [r4, #0]
 8006f8e:	f109 0901 	add.w	r9, r9, #1
 8006f92:	b11b      	cbz	r3, 8006f9c <_scanf_float+0x158>
 8006f94:	3b01      	subs	r3, #1
 8006f96:	3201      	adds	r2, #1
 8006f98:	9302      	str	r3, [sp, #8]
 8006f9a:	60a2      	str	r2, [r4, #8]
 8006f9c:	68a3      	ldr	r3, [r4, #8]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	60a3      	str	r3, [r4, #8]
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	607b      	str	r3, [r7, #4]
 8006fb0:	f340 8084 	ble.w	80070bc <_scanf_float+0x278>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	603b      	str	r3, [r7, #0]
 8006fba:	e766      	b.n	8006e8a <_scanf_float+0x46>
 8006fbc:	eb1a 0f05 	cmn.w	sl, r5
 8006fc0:	f47f af70 	bne.w	8006ea4 <_scanf_float+0x60>
 8006fc4:	6822      	ldr	r2, [r4, #0]
 8006fc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006fca:	6022      	str	r2, [r4, #0]
 8006fcc:	f806 3b01 	strb.w	r3, [r6], #1
 8006fd0:	e7e4      	b.n	8006f9c <_scanf_float+0x158>
 8006fd2:	6822      	ldr	r2, [r4, #0]
 8006fd4:	0610      	lsls	r0, r2, #24
 8006fd6:	f57f af65 	bpl.w	8006ea4 <_scanf_float+0x60>
 8006fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fde:	e7f4      	b.n	8006fca <_scanf_float+0x186>
 8006fe0:	f1ba 0f00 	cmp.w	sl, #0
 8006fe4:	d10e      	bne.n	8007004 <_scanf_float+0x1c0>
 8006fe6:	f1b9 0f00 	cmp.w	r9, #0
 8006fea:	d10e      	bne.n	800700a <_scanf_float+0x1c6>
 8006fec:	6822      	ldr	r2, [r4, #0]
 8006fee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006ff2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006ff6:	d108      	bne.n	800700a <_scanf_float+0x1c6>
 8006ff8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ffc:	6022      	str	r2, [r4, #0]
 8006ffe:	f04f 0a01 	mov.w	sl, #1
 8007002:	e7e3      	b.n	8006fcc <_scanf_float+0x188>
 8007004:	f1ba 0f02 	cmp.w	sl, #2
 8007008:	d055      	beq.n	80070b6 <_scanf_float+0x272>
 800700a:	2d01      	cmp	r5, #1
 800700c:	d002      	beq.n	8007014 <_scanf_float+0x1d0>
 800700e:	2d04      	cmp	r5, #4
 8007010:	f47f af48 	bne.w	8006ea4 <_scanf_float+0x60>
 8007014:	3501      	adds	r5, #1
 8007016:	b2ed      	uxtb	r5, r5
 8007018:	e7d8      	b.n	8006fcc <_scanf_float+0x188>
 800701a:	f1ba 0f01 	cmp.w	sl, #1
 800701e:	f47f af41 	bne.w	8006ea4 <_scanf_float+0x60>
 8007022:	f04f 0a02 	mov.w	sl, #2
 8007026:	e7d1      	b.n	8006fcc <_scanf_float+0x188>
 8007028:	b97d      	cbnz	r5, 800704a <_scanf_float+0x206>
 800702a:	f1b9 0f00 	cmp.w	r9, #0
 800702e:	f47f af3c 	bne.w	8006eaa <_scanf_float+0x66>
 8007032:	6822      	ldr	r2, [r4, #0]
 8007034:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007038:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800703c:	f47f af39 	bne.w	8006eb2 <_scanf_float+0x6e>
 8007040:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007044:	6022      	str	r2, [r4, #0]
 8007046:	2501      	movs	r5, #1
 8007048:	e7c0      	b.n	8006fcc <_scanf_float+0x188>
 800704a:	2d03      	cmp	r5, #3
 800704c:	d0e2      	beq.n	8007014 <_scanf_float+0x1d0>
 800704e:	2d05      	cmp	r5, #5
 8007050:	e7de      	b.n	8007010 <_scanf_float+0x1cc>
 8007052:	2d02      	cmp	r5, #2
 8007054:	f47f af26 	bne.w	8006ea4 <_scanf_float+0x60>
 8007058:	2503      	movs	r5, #3
 800705a:	e7b7      	b.n	8006fcc <_scanf_float+0x188>
 800705c:	2d06      	cmp	r5, #6
 800705e:	f47f af21 	bne.w	8006ea4 <_scanf_float+0x60>
 8007062:	2507      	movs	r5, #7
 8007064:	e7b2      	b.n	8006fcc <_scanf_float+0x188>
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	0591      	lsls	r1, r2, #22
 800706a:	f57f af1b 	bpl.w	8006ea4 <_scanf_float+0x60>
 800706e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007072:	6022      	str	r2, [r4, #0]
 8007074:	f8cd 9004 	str.w	r9, [sp, #4]
 8007078:	e7a8      	b.n	8006fcc <_scanf_float+0x188>
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007080:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007084:	d006      	beq.n	8007094 <_scanf_float+0x250>
 8007086:	0550      	lsls	r0, r2, #21
 8007088:	f57f af0c 	bpl.w	8006ea4 <_scanf_float+0x60>
 800708c:	f1b9 0f00 	cmp.w	r9, #0
 8007090:	f43f af0f 	beq.w	8006eb2 <_scanf_float+0x6e>
 8007094:	0591      	lsls	r1, r2, #22
 8007096:	bf58      	it	pl
 8007098:	9901      	ldrpl	r1, [sp, #4]
 800709a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800709e:	bf58      	it	pl
 80070a0:	eba9 0101 	subpl.w	r1, r9, r1
 80070a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80070a8:	bf58      	it	pl
 80070aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80070ae:	6022      	str	r2, [r4, #0]
 80070b0:	f04f 0900 	mov.w	r9, #0
 80070b4:	e78a      	b.n	8006fcc <_scanf_float+0x188>
 80070b6:	f04f 0a03 	mov.w	sl, #3
 80070ba:	e787      	b.n	8006fcc <_scanf_float+0x188>
 80070bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80070c0:	4639      	mov	r1, r7
 80070c2:	4640      	mov	r0, r8
 80070c4:	4798      	blx	r3
 80070c6:	2800      	cmp	r0, #0
 80070c8:	f43f aedf 	beq.w	8006e8a <_scanf_float+0x46>
 80070cc:	e6ea      	b.n	8006ea4 <_scanf_float+0x60>
 80070ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070d6:	463a      	mov	r2, r7
 80070d8:	4640      	mov	r0, r8
 80070da:	4798      	blx	r3
 80070dc:	6923      	ldr	r3, [r4, #16]
 80070de:	3b01      	subs	r3, #1
 80070e0:	6123      	str	r3, [r4, #16]
 80070e2:	e6ec      	b.n	8006ebe <_scanf_float+0x7a>
 80070e4:	1e6b      	subs	r3, r5, #1
 80070e6:	2b06      	cmp	r3, #6
 80070e8:	d825      	bhi.n	8007136 <_scanf_float+0x2f2>
 80070ea:	2d02      	cmp	r5, #2
 80070ec:	d836      	bhi.n	800715c <_scanf_float+0x318>
 80070ee:	455e      	cmp	r6, fp
 80070f0:	f67f aee8 	bls.w	8006ec4 <_scanf_float+0x80>
 80070f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070fc:	463a      	mov	r2, r7
 80070fe:	4640      	mov	r0, r8
 8007100:	4798      	blx	r3
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	3b01      	subs	r3, #1
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	e7f1      	b.n	80070ee <_scanf_float+0x2aa>
 800710a:	9802      	ldr	r0, [sp, #8]
 800710c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007110:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007114:	9002      	str	r0, [sp, #8]
 8007116:	463a      	mov	r2, r7
 8007118:	4640      	mov	r0, r8
 800711a:	4798      	blx	r3
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	3b01      	subs	r3, #1
 8007120:	6123      	str	r3, [r4, #16]
 8007122:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007126:	fa5f fa8a 	uxtb.w	sl, sl
 800712a:	f1ba 0f02 	cmp.w	sl, #2
 800712e:	d1ec      	bne.n	800710a <_scanf_float+0x2c6>
 8007130:	3d03      	subs	r5, #3
 8007132:	b2ed      	uxtb	r5, r5
 8007134:	1b76      	subs	r6, r6, r5
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	05da      	lsls	r2, r3, #23
 800713a:	d52f      	bpl.n	800719c <_scanf_float+0x358>
 800713c:	055b      	lsls	r3, r3, #21
 800713e:	d510      	bpl.n	8007162 <_scanf_float+0x31e>
 8007140:	455e      	cmp	r6, fp
 8007142:	f67f aebf 	bls.w	8006ec4 <_scanf_float+0x80>
 8007146:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800714a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800714e:	463a      	mov	r2, r7
 8007150:	4640      	mov	r0, r8
 8007152:	4798      	blx	r3
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	3b01      	subs	r3, #1
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	e7f1      	b.n	8007140 <_scanf_float+0x2fc>
 800715c:	46aa      	mov	sl, r5
 800715e:	9602      	str	r6, [sp, #8]
 8007160:	e7df      	b.n	8007122 <_scanf_float+0x2de>
 8007162:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007166:	6923      	ldr	r3, [r4, #16]
 8007168:	2965      	cmp	r1, #101	; 0x65
 800716a:	f103 33ff 	add.w	r3, r3, #4294967295
 800716e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007172:	6123      	str	r3, [r4, #16]
 8007174:	d00c      	beq.n	8007190 <_scanf_float+0x34c>
 8007176:	2945      	cmp	r1, #69	; 0x45
 8007178:	d00a      	beq.n	8007190 <_scanf_float+0x34c>
 800717a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800717e:	463a      	mov	r2, r7
 8007180:	4640      	mov	r0, r8
 8007182:	4798      	blx	r3
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800718a:	3b01      	subs	r3, #1
 800718c:	1eb5      	subs	r5, r6, #2
 800718e:	6123      	str	r3, [r4, #16]
 8007190:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007194:	463a      	mov	r2, r7
 8007196:	4640      	mov	r0, r8
 8007198:	4798      	blx	r3
 800719a:	462e      	mov	r6, r5
 800719c:	6825      	ldr	r5, [r4, #0]
 800719e:	f015 0510 	ands.w	r5, r5, #16
 80071a2:	d159      	bne.n	8007258 <_scanf_float+0x414>
 80071a4:	7035      	strb	r5, [r6, #0]
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b0:	d11b      	bne.n	80071ea <_scanf_float+0x3a6>
 80071b2:	9b01      	ldr	r3, [sp, #4]
 80071b4:	454b      	cmp	r3, r9
 80071b6:	eba3 0209 	sub.w	r2, r3, r9
 80071ba:	d123      	bne.n	8007204 <_scanf_float+0x3c0>
 80071bc:	2200      	movs	r2, #0
 80071be:	4659      	mov	r1, fp
 80071c0:	4640      	mov	r0, r8
 80071c2:	f000 feeb 	bl	8007f9c <_strtod_r>
 80071c6:	6822      	ldr	r2, [r4, #0]
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	f012 0f02 	tst.w	r2, #2
 80071ce:	ec57 6b10 	vmov	r6, r7, d0
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	d021      	beq.n	800721a <_scanf_float+0x3d6>
 80071d6:	9903      	ldr	r1, [sp, #12]
 80071d8:	1d1a      	adds	r2, r3, #4
 80071da:	600a      	str	r2, [r1, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	e9c3 6700 	strd	r6, r7, [r3]
 80071e2:	68e3      	ldr	r3, [r4, #12]
 80071e4:	3301      	adds	r3, #1
 80071e6:	60e3      	str	r3, [r4, #12]
 80071e8:	e66d      	b.n	8006ec6 <_scanf_float+0x82>
 80071ea:	9b04      	ldr	r3, [sp, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0e5      	beq.n	80071bc <_scanf_float+0x378>
 80071f0:	9905      	ldr	r1, [sp, #20]
 80071f2:	230a      	movs	r3, #10
 80071f4:	462a      	mov	r2, r5
 80071f6:	3101      	adds	r1, #1
 80071f8:	4640      	mov	r0, r8
 80071fa:	f000 ff57 	bl	80080ac <_strtol_r>
 80071fe:	9b04      	ldr	r3, [sp, #16]
 8007200:	9e05      	ldr	r6, [sp, #20]
 8007202:	1ac2      	subs	r2, r0, r3
 8007204:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007208:	429e      	cmp	r6, r3
 800720a:	bf28      	it	cs
 800720c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007210:	4912      	ldr	r1, [pc, #72]	; (800725c <_scanf_float+0x418>)
 8007212:	4630      	mov	r0, r6
 8007214:	f000 f83c 	bl	8007290 <siprintf>
 8007218:	e7d0      	b.n	80071bc <_scanf_float+0x378>
 800721a:	9903      	ldr	r1, [sp, #12]
 800721c:	f012 0f04 	tst.w	r2, #4
 8007220:	f103 0204 	add.w	r2, r3, #4
 8007224:	600a      	str	r2, [r1, #0]
 8007226:	d1d9      	bne.n	80071dc <_scanf_float+0x398>
 8007228:	f8d3 8000 	ldr.w	r8, [r3]
 800722c:	ee10 2a10 	vmov	r2, s0
 8007230:	ee10 0a10 	vmov	r0, s0
 8007234:	463b      	mov	r3, r7
 8007236:	4639      	mov	r1, r7
 8007238:	f7f9 fc78 	bl	8000b2c <__aeabi_dcmpun>
 800723c:	b128      	cbz	r0, 800724a <_scanf_float+0x406>
 800723e:	4808      	ldr	r0, [pc, #32]	; (8007260 <_scanf_float+0x41c>)
 8007240:	f000 f820 	bl	8007284 <nanf>
 8007244:	ed88 0a00 	vstr	s0, [r8]
 8007248:	e7cb      	b.n	80071e2 <_scanf_float+0x39e>
 800724a:	4630      	mov	r0, r6
 800724c:	4639      	mov	r1, r7
 800724e:	f7f9 fccb 	bl	8000be8 <__aeabi_d2f>
 8007252:	f8c8 0000 	str.w	r0, [r8]
 8007256:	e7c4      	b.n	80071e2 <_scanf_float+0x39e>
 8007258:	2500      	movs	r5, #0
 800725a:	e634      	b.n	8006ec6 <_scanf_float+0x82>
 800725c:	0800e994 	.word	0x0800e994
 8007260:	0800ea2b 	.word	0x0800ea2b

08007264 <_sbrk_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d06      	ldr	r5, [pc, #24]	; (8007280 <_sbrk_r+0x1c>)
 8007268:	2300      	movs	r3, #0
 800726a:	4604      	mov	r4, r0
 800726c:	4608      	mov	r0, r1
 800726e:	602b      	str	r3, [r5, #0]
 8007270:	f7fb fa00 	bl	8002674 <_sbrk>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d102      	bne.n	800727e <_sbrk_r+0x1a>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	b103      	cbz	r3, 800727e <_sbrk_r+0x1a>
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	20000914 	.word	0x20000914

08007284 <nanf>:
 8007284:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800728c <nanf+0x8>
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	7fc00000 	.word	0x7fc00000

08007290 <siprintf>:
 8007290:	b40e      	push	{r1, r2, r3}
 8007292:	b500      	push	{lr}
 8007294:	b09c      	sub	sp, #112	; 0x70
 8007296:	ab1d      	add	r3, sp, #116	; 0x74
 8007298:	9002      	str	r0, [sp, #8]
 800729a:	9006      	str	r0, [sp, #24]
 800729c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072a0:	4809      	ldr	r0, [pc, #36]	; (80072c8 <siprintf+0x38>)
 80072a2:	9107      	str	r1, [sp, #28]
 80072a4:	9104      	str	r1, [sp, #16]
 80072a6:	4909      	ldr	r1, [pc, #36]	; (80072cc <siprintf+0x3c>)
 80072a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ac:	9105      	str	r1, [sp, #20]
 80072ae:	6800      	ldr	r0, [r0, #0]
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	a902      	add	r1, sp, #8
 80072b4:	f003 f8dc 	bl	800a470 <_svfiprintf_r>
 80072b8:	9b02      	ldr	r3, [sp, #8]
 80072ba:	2200      	movs	r2, #0
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	b01c      	add	sp, #112	; 0x70
 80072c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c4:	b003      	add	sp, #12
 80072c6:	4770      	bx	lr
 80072c8:	20000104 	.word	0x20000104
 80072cc:	ffff0208 	.word	0xffff0208

080072d0 <__sread>:
 80072d0:	b510      	push	{r4, lr}
 80072d2:	460c      	mov	r4, r1
 80072d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d8:	f003 fb24 	bl	800a924 <_read_r>
 80072dc:	2800      	cmp	r0, #0
 80072de:	bfab      	itete	ge
 80072e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072e2:	89a3      	ldrhlt	r3, [r4, #12]
 80072e4:	181b      	addge	r3, r3, r0
 80072e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072ea:	bfac      	ite	ge
 80072ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80072ee:	81a3      	strhlt	r3, [r4, #12]
 80072f0:	bd10      	pop	{r4, pc}

080072f2 <__swrite>:
 80072f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f6:	461f      	mov	r7, r3
 80072f8:	898b      	ldrh	r3, [r1, #12]
 80072fa:	05db      	lsls	r3, r3, #23
 80072fc:	4605      	mov	r5, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	4616      	mov	r6, r2
 8007302:	d505      	bpl.n	8007310 <__swrite+0x1e>
 8007304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007308:	2302      	movs	r3, #2
 800730a:	2200      	movs	r2, #0
 800730c:	f002 fa92 	bl	8009834 <_lseek_r>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800731a:	81a3      	strh	r3, [r4, #12]
 800731c:	4632      	mov	r2, r6
 800731e:	463b      	mov	r3, r7
 8007320:	4628      	mov	r0, r5
 8007322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007326:	f000 bf15 	b.w	8008154 <_write_r>

0800732a <__sseek>:
 800732a:	b510      	push	{r4, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007332:	f002 fa7f 	bl	8009834 <_lseek_r>
 8007336:	1c43      	adds	r3, r0, #1
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	bf15      	itete	ne
 800733c:	6560      	strne	r0, [r4, #84]	; 0x54
 800733e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007346:	81a3      	strheq	r3, [r4, #12]
 8007348:	bf18      	it	ne
 800734a:	81a3      	strhne	r3, [r4, #12]
 800734c:	bd10      	pop	{r4, pc}

0800734e <__sclose>:
 800734e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007352:	f000 bf9d 	b.w	8008290 <_close_r>

08007356 <sulp>:
 8007356:	b570      	push	{r4, r5, r6, lr}
 8007358:	4604      	mov	r4, r0
 800735a:	460d      	mov	r5, r1
 800735c:	ec45 4b10 	vmov	d0, r4, r5
 8007360:	4616      	mov	r6, r2
 8007362:	f002 fe77 	bl	800a054 <__ulp>
 8007366:	ec51 0b10 	vmov	r0, r1, d0
 800736a:	b17e      	cbz	r6, 800738c <sulp+0x36>
 800736c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007370:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007374:	2b00      	cmp	r3, #0
 8007376:	dd09      	ble.n	800738c <sulp+0x36>
 8007378:	051b      	lsls	r3, r3, #20
 800737a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800737e:	2400      	movs	r4, #0
 8007380:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007384:	4622      	mov	r2, r4
 8007386:	462b      	mov	r3, r5
 8007388:	f7f9 f936 	bl	80005f8 <__aeabi_dmul>
 800738c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007390 <_strtod_l>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	ed2d 8b02 	vpush	{d8}
 8007398:	b09d      	sub	sp, #116	; 0x74
 800739a:	461f      	mov	r7, r3
 800739c:	2300      	movs	r3, #0
 800739e:	9318      	str	r3, [sp, #96]	; 0x60
 80073a0:	4ba2      	ldr	r3, [pc, #648]	; (800762c <_strtod_l+0x29c>)
 80073a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	9305      	str	r3, [sp, #20]
 80073a8:	4604      	mov	r4, r0
 80073aa:	4618      	mov	r0, r3
 80073ac:	4688      	mov	r8, r1
 80073ae:	f7f8 ff0f 	bl	80001d0 <strlen>
 80073b2:	f04f 0a00 	mov.w	sl, #0
 80073b6:	4605      	mov	r5, r0
 80073b8:	f04f 0b00 	mov.w	fp, #0
 80073bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80073c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073c2:	781a      	ldrb	r2, [r3, #0]
 80073c4:	2a2b      	cmp	r2, #43	; 0x2b
 80073c6:	d04e      	beq.n	8007466 <_strtod_l+0xd6>
 80073c8:	d83b      	bhi.n	8007442 <_strtod_l+0xb2>
 80073ca:	2a0d      	cmp	r2, #13
 80073cc:	d834      	bhi.n	8007438 <_strtod_l+0xa8>
 80073ce:	2a08      	cmp	r2, #8
 80073d0:	d834      	bhi.n	800743c <_strtod_l+0xac>
 80073d2:	2a00      	cmp	r2, #0
 80073d4:	d03e      	beq.n	8007454 <_strtod_l+0xc4>
 80073d6:	2300      	movs	r3, #0
 80073d8:	930a      	str	r3, [sp, #40]	; 0x28
 80073da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80073dc:	7833      	ldrb	r3, [r6, #0]
 80073de:	2b30      	cmp	r3, #48	; 0x30
 80073e0:	f040 80b0 	bne.w	8007544 <_strtod_l+0x1b4>
 80073e4:	7873      	ldrb	r3, [r6, #1]
 80073e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80073ea:	2b58      	cmp	r3, #88	; 0x58
 80073ec:	d168      	bne.n	80074c0 <_strtod_l+0x130>
 80073ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	ab18      	add	r3, sp, #96	; 0x60
 80073f4:	9702      	str	r7, [sp, #8]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	4a8d      	ldr	r2, [pc, #564]	; (8007630 <_strtod_l+0x2a0>)
 80073fa:	ab19      	add	r3, sp, #100	; 0x64
 80073fc:	a917      	add	r1, sp, #92	; 0x5c
 80073fe:	4620      	mov	r0, r4
 8007400:	f001 ff0c 	bl	800921c <__gethex>
 8007404:	f010 0707 	ands.w	r7, r0, #7
 8007408:	4605      	mov	r5, r0
 800740a:	d005      	beq.n	8007418 <_strtod_l+0x88>
 800740c:	2f06      	cmp	r7, #6
 800740e:	d12c      	bne.n	800746a <_strtod_l+0xda>
 8007410:	3601      	adds	r6, #1
 8007412:	2300      	movs	r3, #0
 8007414:	9617      	str	r6, [sp, #92]	; 0x5c
 8007416:	930a      	str	r3, [sp, #40]	; 0x28
 8007418:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 8590 	bne.w	8007f40 <_strtod_l+0xbb0>
 8007420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007422:	b1eb      	cbz	r3, 8007460 <_strtod_l+0xd0>
 8007424:	4652      	mov	r2, sl
 8007426:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800742a:	ec43 2b10 	vmov	d0, r2, r3
 800742e:	b01d      	add	sp, #116	; 0x74
 8007430:	ecbd 8b02 	vpop	{d8}
 8007434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007438:	2a20      	cmp	r2, #32
 800743a:	d1cc      	bne.n	80073d6 <_strtod_l+0x46>
 800743c:	3301      	adds	r3, #1
 800743e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007440:	e7be      	b.n	80073c0 <_strtod_l+0x30>
 8007442:	2a2d      	cmp	r2, #45	; 0x2d
 8007444:	d1c7      	bne.n	80073d6 <_strtod_l+0x46>
 8007446:	2201      	movs	r2, #1
 8007448:	920a      	str	r2, [sp, #40]	; 0x28
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	9217      	str	r2, [sp, #92]	; 0x5c
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1c2      	bne.n	80073da <_strtod_l+0x4a>
 8007454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007456:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800745a:	2b00      	cmp	r3, #0
 800745c:	f040 856e 	bne.w	8007f3c <_strtod_l+0xbac>
 8007460:	4652      	mov	r2, sl
 8007462:	465b      	mov	r3, fp
 8007464:	e7e1      	b.n	800742a <_strtod_l+0x9a>
 8007466:	2200      	movs	r2, #0
 8007468:	e7ee      	b.n	8007448 <_strtod_l+0xb8>
 800746a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800746c:	b13a      	cbz	r2, 800747e <_strtod_l+0xee>
 800746e:	2135      	movs	r1, #53	; 0x35
 8007470:	a81a      	add	r0, sp, #104	; 0x68
 8007472:	f002 fefa 	bl	800a26a <__copybits>
 8007476:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007478:	4620      	mov	r0, r4
 800747a:	f002 fab9 	bl	80099f0 <_Bfree>
 800747e:	3f01      	subs	r7, #1
 8007480:	2f04      	cmp	r7, #4
 8007482:	d806      	bhi.n	8007492 <_strtod_l+0x102>
 8007484:	e8df f007 	tbb	[pc, r7]
 8007488:	1714030a 	.word	0x1714030a
 800748c:	0a          	.byte	0x0a
 800748d:	00          	.byte	0x00
 800748e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007492:	0728      	lsls	r0, r5, #28
 8007494:	d5c0      	bpl.n	8007418 <_strtod_l+0x88>
 8007496:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800749a:	e7bd      	b.n	8007418 <_strtod_l+0x88>
 800749c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80074a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80074a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80074ae:	e7f0      	b.n	8007492 <_strtod_l+0x102>
 80074b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007634 <_strtod_l+0x2a4>
 80074b4:	e7ed      	b.n	8007492 <_strtod_l+0x102>
 80074b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80074ba:	f04f 3aff 	mov.w	sl, #4294967295
 80074be:	e7e8      	b.n	8007492 <_strtod_l+0x102>
 80074c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	2b30      	cmp	r3, #48	; 0x30
 80074ca:	d0f9      	beq.n	80074c0 <_strtod_l+0x130>
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0a3      	beq.n	8007418 <_strtod_l+0x88>
 80074d0:	2301      	movs	r3, #1
 80074d2:	f04f 0900 	mov.w	r9, #0
 80074d6:	9304      	str	r3, [sp, #16]
 80074d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074da:	9308      	str	r3, [sp, #32]
 80074dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80074e0:	464f      	mov	r7, r9
 80074e2:	220a      	movs	r2, #10
 80074e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80074e6:	7806      	ldrb	r6, [r0, #0]
 80074e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80074ec:	b2d9      	uxtb	r1, r3
 80074ee:	2909      	cmp	r1, #9
 80074f0:	d92a      	bls.n	8007548 <_strtod_l+0x1b8>
 80074f2:	9905      	ldr	r1, [sp, #20]
 80074f4:	462a      	mov	r2, r5
 80074f6:	f003 fa2f 	bl	800a958 <strncmp>
 80074fa:	b398      	cbz	r0, 8007564 <_strtod_l+0x1d4>
 80074fc:	2000      	movs	r0, #0
 80074fe:	4632      	mov	r2, r6
 8007500:	463d      	mov	r5, r7
 8007502:	9005      	str	r0, [sp, #20]
 8007504:	4603      	mov	r3, r0
 8007506:	2a65      	cmp	r2, #101	; 0x65
 8007508:	d001      	beq.n	800750e <_strtod_l+0x17e>
 800750a:	2a45      	cmp	r2, #69	; 0x45
 800750c:	d118      	bne.n	8007540 <_strtod_l+0x1b0>
 800750e:	b91d      	cbnz	r5, 8007518 <_strtod_l+0x188>
 8007510:	9a04      	ldr	r2, [sp, #16]
 8007512:	4302      	orrs	r2, r0
 8007514:	d09e      	beq.n	8007454 <_strtod_l+0xc4>
 8007516:	2500      	movs	r5, #0
 8007518:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800751c:	f108 0201 	add.w	r2, r8, #1
 8007520:	9217      	str	r2, [sp, #92]	; 0x5c
 8007522:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007526:	2a2b      	cmp	r2, #43	; 0x2b
 8007528:	d075      	beq.n	8007616 <_strtod_l+0x286>
 800752a:	2a2d      	cmp	r2, #45	; 0x2d
 800752c:	d07b      	beq.n	8007626 <_strtod_l+0x296>
 800752e:	f04f 0c00 	mov.w	ip, #0
 8007532:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007536:	2909      	cmp	r1, #9
 8007538:	f240 8082 	bls.w	8007640 <_strtod_l+0x2b0>
 800753c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007540:	2600      	movs	r6, #0
 8007542:	e09d      	b.n	8007680 <_strtod_l+0x2f0>
 8007544:	2300      	movs	r3, #0
 8007546:	e7c4      	b.n	80074d2 <_strtod_l+0x142>
 8007548:	2f08      	cmp	r7, #8
 800754a:	bfd8      	it	le
 800754c:	9907      	ldrle	r1, [sp, #28]
 800754e:	f100 0001 	add.w	r0, r0, #1
 8007552:	bfda      	itte	le
 8007554:	fb02 3301 	mlale	r3, r2, r1, r3
 8007558:	9307      	strle	r3, [sp, #28]
 800755a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800755e:	3701      	adds	r7, #1
 8007560:	9017      	str	r0, [sp, #92]	; 0x5c
 8007562:	e7bf      	b.n	80074e4 <_strtod_l+0x154>
 8007564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007566:	195a      	adds	r2, r3, r5
 8007568:	9217      	str	r2, [sp, #92]	; 0x5c
 800756a:	5d5a      	ldrb	r2, [r3, r5]
 800756c:	2f00      	cmp	r7, #0
 800756e:	d037      	beq.n	80075e0 <_strtod_l+0x250>
 8007570:	9005      	str	r0, [sp, #20]
 8007572:	463d      	mov	r5, r7
 8007574:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007578:	2b09      	cmp	r3, #9
 800757a:	d912      	bls.n	80075a2 <_strtod_l+0x212>
 800757c:	2301      	movs	r3, #1
 800757e:	e7c2      	b.n	8007506 <_strtod_l+0x176>
 8007580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	9217      	str	r2, [sp, #92]	; 0x5c
 8007586:	785a      	ldrb	r2, [r3, #1]
 8007588:	3001      	adds	r0, #1
 800758a:	2a30      	cmp	r2, #48	; 0x30
 800758c:	d0f8      	beq.n	8007580 <_strtod_l+0x1f0>
 800758e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007592:	2b08      	cmp	r3, #8
 8007594:	f200 84d9 	bhi.w	8007f4a <_strtod_l+0xbba>
 8007598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800759a:	9005      	str	r0, [sp, #20]
 800759c:	2000      	movs	r0, #0
 800759e:	9308      	str	r3, [sp, #32]
 80075a0:	4605      	mov	r5, r0
 80075a2:	3a30      	subs	r2, #48	; 0x30
 80075a4:	f100 0301 	add.w	r3, r0, #1
 80075a8:	d014      	beq.n	80075d4 <_strtod_l+0x244>
 80075aa:	9905      	ldr	r1, [sp, #20]
 80075ac:	4419      	add	r1, r3
 80075ae:	9105      	str	r1, [sp, #20]
 80075b0:	462b      	mov	r3, r5
 80075b2:	eb00 0e05 	add.w	lr, r0, r5
 80075b6:	210a      	movs	r1, #10
 80075b8:	4573      	cmp	r3, lr
 80075ba:	d113      	bne.n	80075e4 <_strtod_l+0x254>
 80075bc:	182b      	adds	r3, r5, r0
 80075be:	2b08      	cmp	r3, #8
 80075c0:	f105 0501 	add.w	r5, r5, #1
 80075c4:	4405      	add	r5, r0
 80075c6:	dc1c      	bgt.n	8007602 <_strtod_l+0x272>
 80075c8:	9907      	ldr	r1, [sp, #28]
 80075ca:	230a      	movs	r3, #10
 80075cc:	fb03 2301 	mla	r3, r3, r1, r2
 80075d0:	9307      	str	r3, [sp, #28]
 80075d2:	2300      	movs	r3, #0
 80075d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075d6:	1c51      	adds	r1, r2, #1
 80075d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80075da:	7852      	ldrb	r2, [r2, #1]
 80075dc:	4618      	mov	r0, r3
 80075de:	e7c9      	b.n	8007574 <_strtod_l+0x1e4>
 80075e0:	4638      	mov	r0, r7
 80075e2:	e7d2      	b.n	800758a <_strtod_l+0x1fa>
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	dc04      	bgt.n	80075f2 <_strtod_l+0x262>
 80075e8:	9e07      	ldr	r6, [sp, #28]
 80075ea:	434e      	muls	r6, r1
 80075ec:	9607      	str	r6, [sp, #28]
 80075ee:	3301      	adds	r3, #1
 80075f0:	e7e2      	b.n	80075b8 <_strtod_l+0x228>
 80075f2:	f103 0c01 	add.w	ip, r3, #1
 80075f6:	f1bc 0f10 	cmp.w	ip, #16
 80075fa:	bfd8      	it	le
 80075fc:	fb01 f909 	mulle.w	r9, r1, r9
 8007600:	e7f5      	b.n	80075ee <_strtod_l+0x25e>
 8007602:	2d10      	cmp	r5, #16
 8007604:	bfdc      	itt	le
 8007606:	230a      	movle	r3, #10
 8007608:	fb03 2909 	mlale	r9, r3, r9, r2
 800760c:	e7e1      	b.n	80075d2 <_strtod_l+0x242>
 800760e:	2300      	movs	r3, #0
 8007610:	9305      	str	r3, [sp, #20]
 8007612:	2301      	movs	r3, #1
 8007614:	e77c      	b.n	8007510 <_strtod_l+0x180>
 8007616:	f04f 0c00 	mov.w	ip, #0
 800761a:	f108 0202 	add.w	r2, r8, #2
 800761e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007620:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007624:	e785      	b.n	8007532 <_strtod_l+0x1a2>
 8007626:	f04f 0c01 	mov.w	ip, #1
 800762a:	e7f6      	b.n	800761a <_strtod_l+0x28a>
 800762c:	0800ec24 	.word	0x0800ec24
 8007630:	0800e99c 	.word	0x0800e99c
 8007634:	7ff00000 	.word	0x7ff00000
 8007638:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800763a:	1c51      	adds	r1, r2, #1
 800763c:	9117      	str	r1, [sp, #92]	; 0x5c
 800763e:	7852      	ldrb	r2, [r2, #1]
 8007640:	2a30      	cmp	r2, #48	; 0x30
 8007642:	d0f9      	beq.n	8007638 <_strtod_l+0x2a8>
 8007644:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007648:	2908      	cmp	r1, #8
 800764a:	f63f af79 	bhi.w	8007540 <_strtod_l+0x1b0>
 800764e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007652:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007654:	9206      	str	r2, [sp, #24]
 8007656:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007658:	1c51      	adds	r1, r2, #1
 800765a:	9117      	str	r1, [sp, #92]	; 0x5c
 800765c:	7852      	ldrb	r2, [r2, #1]
 800765e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007662:	2e09      	cmp	r6, #9
 8007664:	d937      	bls.n	80076d6 <_strtod_l+0x346>
 8007666:	9e06      	ldr	r6, [sp, #24]
 8007668:	1b89      	subs	r1, r1, r6
 800766a:	2908      	cmp	r1, #8
 800766c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007670:	dc02      	bgt.n	8007678 <_strtod_l+0x2e8>
 8007672:	4576      	cmp	r6, lr
 8007674:	bfa8      	it	ge
 8007676:	4676      	movge	r6, lr
 8007678:	f1bc 0f00 	cmp.w	ip, #0
 800767c:	d000      	beq.n	8007680 <_strtod_l+0x2f0>
 800767e:	4276      	negs	r6, r6
 8007680:	2d00      	cmp	r5, #0
 8007682:	d14d      	bne.n	8007720 <_strtod_l+0x390>
 8007684:	9904      	ldr	r1, [sp, #16]
 8007686:	4301      	orrs	r1, r0
 8007688:	f47f aec6 	bne.w	8007418 <_strtod_l+0x88>
 800768c:	2b00      	cmp	r3, #0
 800768e:	f47f aee1 	bne.w	8007454 <_strtod_l+0xc4>
 8007692:	2a69      	cmp	r2, #105	; 0x69
 8007694:	d027      	beq.n	80076e6 <_strtod_l+0x356>
 8007696:	dc24      	bgt.n	80076e2 <_strtod_l+0x352>
 8007698:	2a49      	cmp	r2, #73	; 0x49
 800769a:	d024      	beq.n	80076e6 <_strtod_l+0x356>
 800769c:	2a4e      	cmp	r2, #78	; 0x4e
 800769e:	f47f aed9 	bne.w	8007454 <_strtod_l+0xc4>
 80076a2:	499f      	ldr	r1, [pc, #636]	; (8007920 <_strtod_l+0x590>)
 80076a4:	a817      	add	r0, sp, #92	; 0x5c
 80076a6:	f002 f811 	bl	80096cc <__match>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	f43f aed2 	beq.w	8007454 <_strtod_l+0xc4>
 80076b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b28      	cmp	r3, #40	; 0x28
 80076b6:	d12d      	bne.n	8007714 <_strtod_l+0x384>
 80076b8:	499a      	ldr	r1, [pc, #616]	; (8007924 <_strtod_l+0x594>)
 80076ba:	aa1a      	add	r2, sp, #104	; 0x68
 80076bc:	a817      	add	r0, sp, #92	; 0x5c
 80076be:	f002 f819 	bl	80096f4 <__hexnan>
 80076c2:	2805      	cmp	r0, #5
 80076c4:	d126      	bne.n	8007714 <_strtod_l+0x384>
 80076c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80076cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80076d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80076d4:	e6a0      	b.n	8007418 <_strtod_l+0x88>
 80076d6:	210a      	movs	r1, #10
 80076d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80076dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80076e0:	e7b9      	b.n	8007656 <_strtod_l+0x2c6>
 80076e2:	2a6e      	cmp	r2, #110	; 0x6e
 80076e4:	e7db      	b.n	800769e <_strtod_l+0x30e>
 80076e6:	4990      	ldr	r1, [pc, #576]	; (8007928 <_strtod_l+0x598>)
 80076e8:	a817      	add	r0, sp, #92	; 0x5c
 80076ea:	f001 ffef 	bl	80096cc <__match>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f43f aeb0 	beq.w	8007454 <_strtod_l+0xc4>
 80076f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076f6:	498d      	ldr	r1, [pc, #564]	; (800792c <_strtod_l+0x59c>)
 80076f8:	3b01      	subs	r3, #1
 80076fa:	a817      	add	r0, sp, #92	; 0x5c
 80076fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80076fe:	f001 ffe5 	bl	80096cc <__match>
 8007702:	b910      	cbnz	r0, 800770a <_strtod_l+0x37a>
 8007704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007706:	3301      	adds	r3, #1
 8007708:	9317      	str	r3, [sp, #92]	; 0x5c
 800770a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800793c <_strtod_l+0x5ac>
 800770e:	f04f 0a00 	mov.w	sl, #0
 8007712:	e681      	b.n	8007418 <_strtod_l+0x88>
 8007714:	4886      	ldr	r0, [pc, #536]	; (8007930 <_strtod_l+0x5a0>)
 8007716:	f003 f917 	bl	800a948 <nan>
 800771a:	ec5b ab10 	vmov	sl, fp, d0
 800771e:	e67b      	b.n	8007418 <_strtod_l+0x88>
 8007720:	9b05      	ldr	r3, [sp, #20]
 8007722:	9807      	ldr	r0, [sp, #28]
 8007724:	1af3      	subs	r3, r6, r3
 8007726:	2f00      	cmp	r7, #0
 8007728:	bf08      	it	eq
 800772a:	462f      	moveq	r7, r5
 800772c:	2d10      	cmp	r5, #16
 800772e:	9306      	str	r3, [sp, #24]
 8007730:	46a8      	mov	r8, r5
 8007732:	bfa8      	it	ge
 8007734:	f04f 0810 	movge.w	r8, #16
 8007738:	f7f8 fee4 	bl	8000504 <__aeabi_ui2d>
 800773c:	2d09      	cmp	r5, #9
 800773e:	4682      	mov	sl, r0
 8007740:	468b      	mov	fp, r1
 8007742:	dd13      	ble.n	800776c <_strtod_l+0x3dc>
 8007744:	4b7b      	ldr	r3, [pc, #492]	; (8007934 <_strtod_l+0x5a4>)
 8007746:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800774a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800774e:	f7f8 ff53 	bl	80005f8 <__aeabi_dmul>
 8007752:	4682      	mov	sl, r0
 8007754:	4648      	mov	r0, r9
 8007756:	468b      	mov	fp, r1
 8007758:	f7f8 fed4 	bl	8000504 <__aeabi_ui2d>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4650      	mov	r0, sl
 8007762:	4659      	mov	r1, fp
 8007764:	f7f8 fd92 	bl	800028c <__adddf3>
 8007768:	4682      	mov	sl, r0
 800776a:	468b      	mov	fp, r1
 800776c:	2d0f      	cmp	r5, #15
 800776e:	dc38      	bgt.n	80077e2 <_strtod_l+0x452>
 8007770:	9b06      	ldr	r3, [sp, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	f43f ae50 	beq.w	8007418 <_strtod_l+0x88>
 8007778:	dd24      	ble.n	80077c4 <_strtod_l+0x434>
 800777a:	2b16      	cmp	r3, #22
 800777c:	dc0b      	bgt.n	8007796 <_strtod_l+0x406>
 800777e:	496d      	ldr	r1, [pc, #436]	; (8007934 <_strtod_l+0x5a4>)
 8007780:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007788:	4652      	mov	r2, sl
 800778a:	465b      	mov	r3, fp
 800778c:	f7f8 ff34 	bl	80005f8 <__aeabi_dmul>
 8007790:	4682      	mov	sl, r0
 8007792:	468b      	mov	fp, r1
 8007794:	e640      	b.n	8007418 <_strtod_l+0x88>
 8007796:	9a06      	ldr	r2, [sp, #24]
 8007798:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800779c:	4293      	cmp	r3, r2
 800779e:	db20      	blt.n	80077e2 <_strtod_l+0x452>
 80077a0:	4c64      	ldr	r4, [pc, #400]	; (8007934 <_strtod_l+0x5a4>)
 80077a2:	f1c5 050f 	rsb	r5, r5, #15
 80077a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80077aa:	4652      	mov	r2, sl
 80077ac:	465b      	mov	r3, fp
 80077ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077b2:	f7f8 ff21 	bl	80005f8 <__aeabi_dmul>
 80077b6:	9b06      	ldr	r3, [sp, #24]
 80077b8:	1b5d      	subs	r5, r3, r5
 80077ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80077be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80077c2:	e7e3      	b.n	800778c <_strtod_l+0x3fc>
 80077c4:	9b06      	ldr	r3, [sp, #24]
 80077c6:	3316      	adds	r3, #22
 80077c8:	db0b      	blt.n	80077e2 <_strtod_l+0x452>
 80077ca:	9b05      	ldr	r3, [sp, #20]
 80077cc:	1b9e      	subs	r6, r3, r6
 80077ce:	4b59      	ldr	r3, [pc, #356]	; (8007934 <_strtod_l+0x5a4>)
 80077d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80077d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077d8:	4650      	mov	r0, sl
 80077da:	4659      	mov	r1, fp
 80077dc:	f7f9 f836 	bl	800084c <__aeabi_ddiv>
 80077e0:	e7d6      	b.n	8007790 <_strtod_l+0x400>
 80077e2:	9b06      	ldr	r3, [sp, #24]
 80077e4:	eba5 0808 	sub.w	r8, r5, r8
 80077e8:	4498      	add	r8, r3
 80077ea:	f1b8 0f00 	cmp.w	r8, #0
 80077ee:	dd74      	ble.n	80078da <_strtod_l+0x54a>
 80077f0:	f018 030f 	ands.w	r3, r8, #15
 80077f4:	d00a      	beq.n	800780c <_strtod_l+0x47c>
 80077f6:	494f      	ldr	r1, [pc, #316]	; (8007934 <_strtod_l+0x5a4>)
 80077f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077fc:	4652      	mov	r2, sl
 80077fe:	465b      	mov	r3, fp
 8007800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007804:	f7f8 fef8 	bl	80005f8 <__aeabi_dmul>
 8007808:	4682      	mov	sl, r0
 800780a:	468b      	mov	fp, r1
 800780c:	f038 080f 	bics.w	r8, r8, #15
 8007810:	d04f      	beq.n	80078b2 <_strtod_l+0x522>
 8007812:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007816:	dd22      	ble.n	800785e <_strtod_l+0x4ce>
 8007818:	2500      	movs	r5, #0
 800781a:	462e      	mov	r6, r5
 800781c:	9507      	str	r5, [sp, #28]
 800781e:	9505      	str	r5, [sp, #20]
 8007820:	2322      	movs	r3, #34	; 0x22
 8007822:	f8df b118 	ldr.w	fp, [pc, #280]	; 800793c <_strtod_l+0x5ac>
 8007826:	6023      	str	r3, [r4, #0]
 8007828:	f04f 0a00 	mov.w	sl, #0
 800782c:	9b07      	ldr	r3, [sp, #28]
 800782e:	2b00      	cmp	r3, #0
 8007830:	f43f adf2 	beq.w	8007418 <_strtod_l+0x88>
 8007834:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007836:	4620      	mov	r0, r4
 8007838:	f002 f8da 	bl	80099f0 <_Bfree>
 800783c:	9905      	ldr	r1, [sp, #20]
 800783e:	4620      	mov	r0, r4
 8007840:	f002 f8d6 	bl	80099f0 <_Bfree>
 8007844:	4631      	mov	r1, r6
 8007846:	4620      	mov	r0, r4
 8007848:	f002 f8d2 	bl	80099f0 <_Bfree>
 800784c:	9907      	ldr	r1, [sp, #28]
 800784e:	4620      	mov	r0, r4
 8007850:	f002 f8ce 	bl	80099f0 <_Bfree>
 8007854:	4629      	mov	r1, r5
 8007856:	4620      	mov	r0, r4
 8007858:	f002 f8ca 	bl	80099f0 <_Bfree>
 800785c:	e5dc      	b.n	8007418 <_strtod_l+0x88>
 800785e:	4b36      	ldr	r3, [pc, #216]	; (8007938 <_strtod_l+0x5a8>)
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	2300      	movs	r3, #0
 8007864:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007868:	4650      	mov	r0, sl
 800786a:	4659      	mov	r1, fp
 800786c:	4699      	mov	r9, r3
 800786e:	f1b8 0f01 	cmp.w	r8, #1
 8007872:	dc21      	bgt.n	80078b8 <_strtod_l+0x528>
 8007874:	b10b      	cbz	r3, 800787a <_strtod_l+0x4ea>
 8007876:	4682      	mov	sl, r0
 8007878:	468b      	mov	fp, r1
 800787a:	4b2f      	ldr	r3, [pc, #188]	; (8007938 <_strtod_l+0x5a8>)
 800787c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007880:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007884:	4652      	mov	r2, sl
 8007886:	465b      	mov	r3, fp
 8007888:	e9d9 0100 	ldrd	r0, r1, [r9]
 800788c:	f7f8 feb4 	bl	80005f8 <__aeabi_dmul>
 8007890:	4b2a      	ldr	r3, [pc, #168]	; (800793c <_strtod_l+0x5ac>)
 8007892:	460a      	mov	r2, r1
 8007894:	400b      	ands	r3, r1
 8007896:	492a      	ldr	r1, [pc, #168]	; (8007940 <_strtod_l+0x5b0>)
 8007898:	428b      	cmp	r3, r1
 800789a:	4682      	mov	sl, r0
 800789c:	d8bc      	bhi.n	8007818 <_strtod_l+0x488>
 800789e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80078a2:	428b      	cmp	r3, r1
 80078a4:	bf86      	itte	hi
 80078a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007944 <_strtod_l+0x5b4>
 80078aa:	f04f 3aff 	movhi.w	sl, #4294967295
 80078ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80078b2:	2300      	movs	r3, #0
 80078b4:	9304      	str	r3, [sp, #16]
 80078b6:	e084      	b.n	80079c2 <_strtod_l+0x632>
 80078b8:	f018 0f01 	tst.w	r8, #1
 80078bc:	d005      	beq.n	80078ca <_strtod_l+0x53a>
 80078be:	9b04      	ldr	r3, [sp, #16]
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f7f8 fe98 	bl	80005f8 <__aeabi_dmul>
 80078c8:	2301      	movs	r3, #1
 80078ca:	9a04      	ldr	r2, [sp, #16]
 80078cc:	3208      	adds	r2, #8
 80078ce:	f109 0901 	add.w	r9, r9, #1
 80078d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80078d6:	9204      	str	r2, [sp, #16]
 80078d8:	e7c9      	b.n	800786e <_strtod_l+0x4de>
 80078da:	d0ea      	beq.n	80078b2 <_strtod_l+0x522>
 80078dc:	f1c8 0800 	rsb	r8, r8, #0
 80078e0:	f018 020f 	ands.w	r2, r8, #15
 80078e4:	d00a      	beq.n	80078fc <_strtod_l+0x56c>
 80078e6:	4b13      	ldr	r3, [pc, #76]	; (8007934 <_strtod_l+0x5a4>)
 80078e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ec:	4650      	mov	r0, sl
 80078ee:	4659      	mov	r1, fp
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f7f8 ffaa 	bl	800084c <__aeabi_ddiv>
 80078f8:	4682      	mov	sl, r0
 80078fa:	468b      	mov	fp, r1
 80078fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007900:	d0d7      	beq.n	80078b2 <_strtod_l+0x522>
 8007902:	f1b8 0f1f 	cmp.w	r8, #31
 8007906:	dd1f      	ble.n	8007948 <_strtod_l+0x5b8>
 8007908:	2500      	movs	r5, #0
 800790a:	462e      	mov	r6, r5
 800790c:	9507      	str	r5, [sp, #28]
 800790e:	9505      	str	r5, [sp, #20]
 8007910:	2322      	movs	r3, #34	; 0x22
 8007912:	f04f 0a00 	mov.w	sl, #0
 8007916:	f04f 0b00 	mov.w	fp, #0
 800791a:	6023      	str	r3, [r4, #0]
 800791c:	e786      	b.n	800782c <_strtod_l+0x49c>
 800791e:	bf00      	nop
 8007920:	0800e96d 	.word	0x0800e96d
 8007924:	0800e9b0 	.word	0x0800e9b0
 8007928:	0800e965 	.word	0x0800e965
 800792c:	0800eb30 	.word	0x0800eb30
 8007930:	0800ea2b 	.word	0x0800ea2b
 8007934:	0800ecc0 	.word	0x0800ecc0
 8007938:	0800ec98 	.word	0x0800ec98
 800793c:	7ff00000 	.word	0x7ff00000
 8007940:	7ca00000 	.word	0x7ca00000
 8007944:	7fefffff 	.word	0x7fefffff
 8007948:	f018 0310 	ands.w	r3, r8, #16
 800794c:	bf18      	it	ne
 800794e:	236a      	movne	r3, #106	; 0x6a
 8007950:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007d00 <_strtod_l+0x970>
 8007954:	9304      	str	r3, [sp, #16]
 8007956:	4650      	mov	r0, sl
 8007958:	4659      	mov	r1, fp
 800795a:	2300      	movs	r3, #0
 800795c:	f018 0f01 	tst.w	r8, #1
 8007960:	d004      	beq.n	800796c <_strtod_l+0x5dc>
 8007962:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007966:	f7f8 fe47 	bl	80005f8 <__aeabi_dmul>
 800796a:	2301      	movs	r3, #1
 800796c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007970:	f109 0908 	add.w	r9, r9, #8
 8007974:	d1f2      	bne.n	800795c <_strtod_l+0x5cc>
 8007976:	b10b      	cbz	r3, 800797c <_strtod_l+0x5ec>
 8007978:	4682      	mov	sl, r0
 800797a:	468b      	mov	fp, r1
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	b1c3      	cbz	r3, 80079b2 <_strtod_l+0x622>
 8007980:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007984:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007988:	2b00      	cmp	r3, #0
 800798a:	4659      	mov	r1, fp
 800798c:	dd11      	ble.n	80079b2 <_strtod_l+0x622>
 800798e:	2b1f      	cmp	r3, #31
 8007990:	f340 8124 	ble.w	8007bdc <_strtod_l+0x84c>
 8007994:	2b34      	cmp	r3, #52	; 0x34
 8007996:	bfde      	ittt	le
 8007998:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800799c:	f04f 33ff 	movle.w	r3, #4294967295
 80079a0:	fa03 f202 	lslle.w	r2, r3, r2
 80079a4:	f04f 0a00 	mov.w	sl, #0
 80079a8:	bfcc      	ite	gt
 80079aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80079ae:	ea02 0b01 	andle.w	fp, r2, r1
 80079b2:	2200      	movs	r2, #0
 80079b4:	2300      	movs	r3, #0
 80079b6:	4650      	mov	r0, sl
 80079b8:	4659      	mov	r1, fp
 80079ba:	f7f9 f885 	bl	8000ac8 <__aeabi_dcmpeq>
 80079be:	2800      	cmp	r0, #0
 80079c0:	d1a2      	bne.n	8007908 <_strtod_l+0x578>
 80079c2:	9b07      	ldr	r3, [sp, #28]
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	9908      	ldr	r1, [sp, #32]
 80079c8:	462b      	mov	r3, r5
 80079ca:	463a      	mov	r2, r7
 80079cc:	4620      	mov	r0, r4
 80079ce:	f002 f877 	bl	8009ac0 <__s2b>
 80079d2:	9007      	str	r0, [sp, #28]
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f43f af1f 	beq.w	8007818 <_strtod_l+0x488>
 80079da:	9b05      	ldr	r3, [sp, #20]
 80079dc:	1b9e      	subs	r6, r3, r6
 80079de:	9b06      	ldr	r3, [sp, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bfb4      	ite	lt
 80079e4:	4633      	movlt	r3, r6
 80079e6:	2300      	movge	r3, #0
 80079e8:	930c      	str	r3, [sp, #48]	; 0x30
 80079ea:	9b06      	ldr	r3, [sp, #24]
 80079ec:	2500      	movs	r5, #0
 80079ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80079f2:	9312      	str	r3, [sp, #72]	; 0x48
 80079f4:	462e      	mov	r6, r5
 80079f6:	9b07      	ldr	r3, [sp, #28]
 80079f8:	4620      	mov	r0, r4
 80079fa:	6859      	ldr	r1, [r3, #4]
 80079fc:	f001 ffb8 	bl	8009970 <_Balloc>
 8007a00:	9005      	str	r0, [sp, #20]
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f43f af0c 	beq.w	8007820 <_strtod_l+0x490>
 8007a08:	9b07      	ldr	r3, [sp, #28]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	3202      	adds	r2, #2
 8007a0e:	f103 010c 	add.w	r1, r3, #12
 8007a12:	0092      	lsls	r2, r2, #2
 8007a14:	300c      	adds	r0, #12
 8007a16:	f7fe fce6 	bl	80063e6 <memcpy>
 8007a1a:	ec4b ab10 	vmov	d0, sl, fp
 8007a1e:	aa1a      	add	r2, sp, #104	; 0x68
 8007a20:	a919      	add	r1, sp, #100	; 0x64
 8007a22:	4620      	mov	r0, r4
 8007a24:	f002 fb92 	bl	800a14c <__d2b>
 8007a28:	ec4b ab18 	vmov	d8, sl, fp
 8007a2c:	9018      	str	r0, [sp, #96]	; 0x60
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f aef6 	beq.w	8007820 <_strtod_l+0x490>
 8007a34:	2101      	movs	r1, #1
 8007a36:	4620      	mov	r0, r4
 8007a38:	f002 f8dc 	bl	8009bf4 <__i2b>
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	f43f aeee 	beq.w	8007820 <_strtod_l+0x490>
 8007a44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a46:	9904      	ldr	r1, [sp, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	bfab      	itete	ge
 8007a4c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007a4e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007a50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007a52:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007a56:	bfac      	ite	ge
 8007a58:	eb03 0902 	addge.w	r9, r3, r2
 8007a5c:	1ad7      	sublt	r7, r2, r3
 8007a5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a60:	eba3 0801 	sub.w	r8, r3, r1
 8007a64:	4490      	add	r8, r2
 8007a66:	4ba1      	ldr	r3, [pc, #644]	; (8007cec <_strtod_l+0x95c>)
 8007a68:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a6c:	4598      	cmp	r8, r3
 8007a6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a72:	f280 80c7 	bge.w	8007c04 <_strtod_l+0x874>
 8007a76:	eba3 0308 	sub.w	r3, r3, r8
 8007a7a:	2b1f      	cmp	r3, #31
 8007a7c:	eba2 0203 	sub.w	r2, r2, r3
 8007a80:	f04f 0101 	mov.w	r1, #1
 8007a84:	f300 80b1 	bgt.w	8007bea <_strtod_l+0x85a>
 8007a88:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8c:	930d      	str	r3, [sp, #52]	; 0x34
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9308      	str	r3, [sp, #32]
 8007a92:	eb09 0802 	add.w	r8, r9, r2
 8007a96:	9b04      	ldr	r3, [sp, #16]
 8007a98:	45c1      	cmp	r9, r8
 8007a9a:	4417      	add	r7, r2
 8007a9c:	441f      	add	r7, r3
 8007a9e:	464b      	mov	r3, r9
 8007aa0:	bfa8      	it	ge
 8007aa2:	4643      	movge	r3, r8
 8007aa4:	42bb      	cmp	r3, r7
 8007aa6:	bfa8      	it	ge
 8007aa8:	463b      	movge	r3, r7
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfc2      	ittt	gt
 8007aae:	eba8 0803 	subgt.w	r8, r8, r3
 8007ab2:	1aff      	subgt	r7, r7, r3
 8007ab4:	eba9 0903 	subgt.w	r9, r9, r3
 8007ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	dd17      	ble.n	8007aee <_strtod_l+0x75e>
 8007abe:	4631      	mov	r1, r6
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f002 f956 	bl	8009d74 <__pow5mult>
 8007ac8:	4606      	mov	r6, r0
 8007aca:	2800      	cmp	r0, #0
 8007acc:	f43f aea8 	beq.w	8007820 <_strtod_l+0x490>
 8007ad0:	4601      	mov	r1, r0
 8007ad2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f002 f8a3 	bl	8009c20 <__multiply>
 8007ada:	900b      	str	r0, [sp, #44]	; 0x2c
 8007adc:	2800      	cmp	r0, #0
 8007ade:	f43f ae9f 	beq.w	8007820 <_strtod_l+0x490>
 8007ae2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f001 ff83 	bl	80099f0 <_Bfree>
 8007aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aec:	9318      	str	r3, [sp, #96]	; 0x60
 8007aee:	f1b8 0f00 	cmp.w	r8, #0
 8007af2:	f300 808c 	bgt.w	8007c0e <_strtod_l+0x87e>
 8007af6:	9b06      	ldr	r3, [sp, #24]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	dd08      	ble.n	8007b0e <_strtod_l+0x77e>
 8007afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007afe:	9905      	ldr	r1, [sp, #20]
 8007b00:	4620      	mov	r0, r4
 8007b02:	f002 f937 	bl	8009d74 <__pow5mult>
 8007b06:	9005      	str	r0, [sp, #20]
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	f43f ae89 	beq.w	8007820 <_strtod_l+0x490>
 8007b0e:	2f00      	cmp	r7, #0
 8007b10:	dd08      	ble.n	8007b24 <_strtod_l+0x794>
 8007b12:	9905      	ldr	r1, [sp, #20]
 8007b14:	463a      	mov	r2, r7
 8007b16:	4620      	mov	r0, r4
 8007b18:	f002 f986 	bl	8009e28 <__lshift>
 8007b1c:	9005      	str	r0, [sp, #20]
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	f43f ae7e 	beq.w	8007820 <_strtod_l+0x490>
 8007b24:	f1b9 0f00 	cmp.w	r9, #0
 8007b28:	dd08      	ble.n	8007b3c <_strtod_l+0x7ac>
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	464a      	mov	r2, r9
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f002 f97a 	bl	8009e28 <__lshift>
 8007b34:	4606      	mov	r6, r0
 8007b36:	2800      	cmp	r0, #0
 8007b38:	f43f ae72 	beq.w	8007820 <_strtod_l+0x490>
 8007b3c:	9a05      	ldr	r2, [sp, #20]
 8007b3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b40:	4620      	mov	r0, r4
 8007b42:	f002 f9fd 	bl	8009f40 <__mdiff>
 8007b46:	4605      	mov	r5, r0
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	f43f ae69 	beq.w	8007820 <_strtod_l+0x490>
 8007b4e:	68c3      	ldr	r3, [r0, #12]
 8007b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b52:	2300      	movs	r3, #0
 8007b54:	60c3      	str	r3, [r0, #12]
 8007b56:	4631      	mov	r1, r6
 8007b58:	f002 f9d6 	bl	8009f08 <__mcmp>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	da60      	bge.n	8007c22 <_strtod_l+0x892>
 8007b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b62:	ea53 030a 	orrs.w	r3, r3, sl
 8007b66:	f040 8082 	bne.w	8007c6e <_strtod_l+0x8de>
 8007b6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d17d      	bne.n	8007c6e <_strtod_l+0x8de>
 8007b72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b76:	0d1b      	lsrs	r3, r3, #20
 8007b78:	051b      	lsls	r3, r3, #20
 8007b7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b7e:	d976      	bls.n	8007c6e <_strtod_l+0x8de>
 8007b80:	696b      	ldr	r3, [r5, #20]
 8007b82:	b913      	cbnz	r3, 8007b8a <_strtod_l+0x7fa>
 8007b84:	692b      	ldr	r3, [r5, #16]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	dd71      	ble.n	8007c6e <_strtod_l+0x8de>
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f002 f94a 	bl	8009e28 <__lshift>
 8007b94:	4631      	mov	r1, r6
 8007b96:	4605      	mov	r5, r0
 8007b98:	f002 f9b6 	bl	8009f08 <__mcmp>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	dd66      	ble.n	8007c6e <_strtod_l+0x8de>
 8007ba0:	9904      	ldr	r1, [sp, #16]
 8007ba2:	4a53      	ldr	r2, [pc, #332]	; (8007cf0 <_strtod_l+0x960>)
 8007ba4:	465b      	mov	r3, fp
 8007ba6:	2900      	cmp	r1, #0
 8007ba8:	f000 8081 	beq.w	8007cae <_strtod_l+0x91e>
 8007bac:	ea02 010b 	and.w	r1, r2, fp
 8007bb0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007bb4:	dc7b      	bgt.n	8007cae <_strtod_l+0x91e>
 8007bb6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007bba:	f77f aea9 	ble.w	8007910 <_strtod_l+0x580>
 8007bbe:	4b4d      	ldr	r3, [pc, #308]	; (8007cf4 <_strtod_l+0x964>)
 8007bc0:	4650      	mov	r0, sl
 8007bc2:	4659      	mov	r1, fp
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f7f8 fd17 	bl	80005f8 <__aeabi_dmul>
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4303      	orrs	r3, r0
 8007bce:	bf08      	it	eq
 8007bd0:	2322      	moveq	r3, #34	; 0x22
 8007bd2:	4682      	mov	sl, r0
 8007bd4:	468b      	mov	fp, r1
 8007bd6:	bf08      	it	eq
 8007bd8:	6023      	streq	r3, [r4, #0]
 8007bda:	e62b      	b.n	8007834 <_strtod_l+0x4a4>
 8007bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007be0:	fa02 f303 	lsl.w	r3, r2, r3
 8007be4:	ea03 0a0a 	and.w	sl, r3, sl
 8007be8:	e6e3      	b.n	80079b2 <_strtod_l+0x622>
 8007bea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007bee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007bf2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007bf6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007bfa:	fa01 f308 	lsl.w	r3, r1, r8
 8007bfe:	9308      	str	r3, [sp, #32]
 8007c00:	910d      	str	r1, [sp, #52]	; 0x34
 8007c02:	e746      	b.n	8007a92 <_strtod_l+0x702>
 8007c04:	2300      	movs	r3, #0
 8007c06:	9308      	str	r3, [sp, #32]
 8007c08:	2301      	movs	r3, #1
 8007c0a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c0c:	e741      	b.n	8007a92 <_strtod_l+0x702>
 8007c0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c10:	4642      	mov	r2, r8
 8007c12:	4620      	mov	r0, r4
 8007c14:	f002 f908 	bl	8009e28 <__lshift>
 8007c18:	9018      	str	r0, [sp, #96]	; 0x60
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	f47f af6b 	bne.w	8007af6 <_strtod_l+0x766>
 8007c20:	e5fe      	b.n	8007820 <_strtod_l+0x490>
 8007c22:	465f      	mov	r7, fp
 8007c24:	d16e      	bne.n	8007d04 <_strtod_l+0x974>
 8007c26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c2c:	b342      	cbz	r2, 8007c80 <_strtod_l+0x8f0>
 8007c2e:	4a32      	ldr	r2, [pc, #200]	; (8007cf8 <_strtod_l+0x968>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d128      	bne.n	8007c86 <_strtod_l+0x8f6>
 8007c34:	9b04      	ldr	r3, [sp, #16]
 8007c36:	4651      	mov	r1, sl
 8007c38:	b1eb      	cbz	r3, 8007c76 <_strtod_l+0x8e6>
 8007c3a:	4b2d      	ldr	r3, [pc, #180]	; (8007cf0 <_strtod_l+0x960>)
 8007c3c:	403b      	ands	r3, r7
 8007c3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c42:	f04f 32ff 	mov.w	r2, #4294967295
 8007c46:	d819      	bhi.n	8007c7c <_strtod_l+0x8ec>
 8007c48:	0d1b      	lsrs	r3, r3, #20
 8007c4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	4299      	cmp	r1, r3
 8007c54:	d117      	bne.n	8007c86 <_strtod_l+0x8f6>
 8007c56:	4b29      	ldr	r3, [pc, #164]	; (8007cfc <_strtod_l+0x96c>)
 8007c58:	429f      	cmp	r7, r3
 8007c5a:	d102      	bne.n	8007c62 <_strtod_l+0x8d2>
 8007c5c:	3101      	adds	r1, #1
 8007c5e:	f43f addf 	beq.w	8007820 <_strtod_l+0x490>
 8007c62:	4b23      	ldr	r3, [pc, #140]	; (8007cf0 <_strtod_l+0x960>)
 8007c64:	403b      	ands	r3, r7
 8007c66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007c6a:	f04f 0a00 	mov.w	sl, #0
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1a4      	bne.n	8007bbe <_strtod_l+0x82e>
 8007c74:	e5de      	b.n	8007834 <_strtod_l+0x4a4>
 8007c76:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7a:	e7ea      	b.n	8007c52 <_strtod_l+0x8c2>
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	e7e8      	b.n	8007c52 <_strtod_l+0x8c2>
 8007c80:	ea53 030a 	orrs.w	r3, r3, sl
 8007c84:	d08c      	beq.n	8007ba0 <_strtod_l+0x810>
 8007c86:	9b08      	ldr	r3, [sp, #32]
 8007c88:	b1db      	cbz	r3, 8007cc2 <_strtod_l+0x932>
 8007c8a:	423b      	tst	r3, r7
 8007c8c:	d0ef      	beq.n	8007c6e <_strtod_l+0x8de>
 8007c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c90:	9a04      	ldr	r2, [sp, #16]
 8007c92:	4650      	mov	r0, sl
 8007c94:	4659      	mov	r1, fp
 8007c96:	b1c3      	cbz	r3, 8007cca <_strtod_l+0x93a>
 8007c98:	f7ff fb5d 	bl	8007356 <sulp>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	ec51 0b18 	vmov	r0, r1, d8
 8007ca4:	f7f8 faf2 	bl	800028c <__adddf3>
 8007ca8:	4682      	mov	sl, r0
 8007caa:	468b      	mov	fp, r1
 8007cac:	e7df      	b.n	8007c6e <_strtod_l+0x8de>
 8007cae:	4013      	ands	r3, r2
 8007cb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007cb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007cb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007cbc:	f04f 3aff 	mov.w	sl, #4294967295
 8007cc0:	e7d5      	b.n	8007c6e <_strtod_l+0x8de>
 8007cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cc4:	ea13 0f0a 	tst.w	r3, sl
 8007cc8:	e7e0      	b.n	8007c8c <_strtod_l+0x8fc>
 8007cca:	f7ff fb44 	bl	8007356 <sulp>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	ec51 0b18 	vmov	r0, r1, d8
 8007cd6:	f7f8 fad7 	bl	8000288 <__aeabi_dsub>
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2300      	movs	r3, #0
 8007cde:	4682      	mov	sl, r0
 8007ce0:	468b      	mov	fp, r1
 8007ce2:	f7f8 fef1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0c1      	beq.n	8007c6e <_strtod_l+0x8de>
 8007cea:	e611      	b.n	8007910 <_strtod_l+0x580>
 8007cec:	fffffc02 	.word	0xfffffc02
 8007cf0:	7ff00000 	.word	0x7ff00000
 8007cf4:	39500000 	.word	0x39500000
 8007cf8:	000fffff 	.word	0x000fffff
 8007cfc:	7fefffff 	.word	0x7fefffff
 8007d00:	0800e9c8 	.word	0x0800e9c8
 8007d04:	4631      	mov	r1, r6
 8007d06:	4628      	mov	r0, r5
 8007d08:	f002 fa7c 	bl	800a204 <__ratio>
 8007d0c:	ec59 8b10 	vmov	r8, r9, d0
 8007d10:	ee10 0a10 	vmov	r0, s0
 8007d14:	2200      	movs	r2, #0
 8007d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	f7f8 fee8 	bl	8000af0 <__aeabi_dcmple>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d07a      	beq.n	8007e1a <_strtod_l+0xa8a>
 8007d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d04a      	beq.n	8007dc0 <_strtod_l+0xa30>
 8007d2a:	4b95      	ldr	r3, [pc, #596]	; (8007f80 <_strtod_l+0xbf0>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d32:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007f80 <_strtod_l+0xbf0>
 8007d36:	f04f 0800 	mov.w	r8, #0
 8007d3a:	4b92      	ldr	r3, [pc, #584]	; (8007f84 <_strtod_l+0xbf4>)
 8007d3c:	403b      	ands	r3, r7
 8007d3e:	930d      	str	r3, [sp, #52]	; 0x34
 8007d40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d42:	4b91      	ldr	r3, [pc, #580]	; (8007f88 <_strtod_l+0xbf8>)
 8007d44:	429a      	cmp	r2, r3
 8007d46:	f040 80b0 	bne.w	8007eaa <_strtod_l+0xb1a>
 8007d4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d4e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007d52:	ec4b ab10 	vmov	d0, sl, fp
 8007d56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d5a:	f002 f97b 	bl	800a054 <__ulp>
 8007d5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d62:	ec53 2b10 	vmov	r2, r3, d0
 8007d66:	f7f8 fc47 	bl	80005f8 <__aeabi_dmul>
 8007d6a:	4652      	mov	r2, sl
 8007d6c:	465b      	mov	r3, fp
 8007d6e:	f7f8 fa8d 	bl	800028c <__adddf3>
 8007d72:	460b      	mov	r3, r1
 8007d74:	4983      	ldr	r1, [pc, #524]	; (8007f84 <_strtod_l+0xbf4>)
 8007d76:	4a85      	ldr	r2, [pc, #532]	; (8007f8c <_strtod_l+0xbfc>)
 8007d78:	4019      	ands	r1, r3
 8007d7a:	4291      	cmp	r1, r2
 8007d7c:	4682      	mov	sl, r0
 8007d7e:	d960      	bls.n	8007e42 <_strtod_l+0xab2>
 8007d80:	ee18 3a90 	vmov	r3, s17
 8007d84:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d104      	bne.n	8007d96 <_strtod_l+0xa06>
 8007d8c:	ee18 3a10 	vmov	r3, s16
 8007d90:	3301      	adds	r3, #1
 8007d92:	f43f ad45 	beq.w	8007820 <_strtod_l+0x490>
 8007d96:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007f98 <_strtod_l+0xc08>
 8007d9a:	f04f 3aff 	mov.w	sl, #4294967295
 8007d9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007da0:	4620      	mov	r0, r4
 8007da2:	f001 fe25 	bl	80099f0 <_Bfree>
 8007da6:	9905      	ldr	r1, [sp, #20]
 8007da8:	4620      	mov	r0, r4
 8007daa:	f001 fe21 	bl	80099f0 <_Bfree>
 8007dae:	4631      	mov	r1, r6
 8007db0:	4620      	mov	r0, r4
 8007db2:	f001 fe1d 	bl	80099f0 <_Bfree>
 8007db6:	4629      	mov	r1, r5
 8007db8:	4620      	mov	r0, r4
 8007dba:	f001 fe19 	bl	80099f0 <_Bfree>
 8007dbe:	e61a      	b.n	80079f6 <_strtod_l+0x666>
 8007dc0:	f1ba 0f00 	cmp.w	sl, #0
 8007dc4:	d11b      	bne.n	8007dfe <_strtod_l+0xa6e>
 8007dc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dca:	b9f3      	cbnz	r3, 8007e0a <_strtod_l+0xa7a>
 8007dcc:	4b6c      	ldr	r3, [pc, #432]	; (8007f80 <_strtod_l+0xbf0>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 fe82 	bl	8000adc <__aeabi_dcmplt>
 8007dd8:	b9d0      	cbnz	r0, 8007e10 <_strtod_l+0xa80>
 8007dda:	4640      	mov	r0, r8
 8007ddc:	4649      	mov	r1, r9
 8007dde:	4b6c      	ldr	r3, [pc, #432]	; (8007f90 <_strtod_l+0xc00>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	f7f8 fc09 	bl	80005f8 <__aeabi_dmul>
 8007de6:	4680      	mov	r8, r0
 8007de8:	4689      	mov	r9, r1
 8007dea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007dee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007df2:	9315      	str	r3, [sp, #84]	; 0x54
 8007df4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007df8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007dfc:	e79d      	b.n	8007d3a <_strtod_l+0x9aa>
 8007dfe:	f1ba 0f01 	cmp.w	sl, #1
 8007e02:	d102      	bne.n	8007e0a <_strtod_l+0xa7a>
 8007e04:	2f00      	cmp	r7, #0
 8007e06:	f43f ad83 	beq.w	8007910 <_strtod_l+0x580>
 8007e0a:	4b62      	ldr	r3, [pc, #392]	; (8007f94 <_strtod_l+0xc04>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	e78e      	b.n	8007d2e <_strtod_l+0x99e>
 8007e10:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007f90 <_strtod_l+0xc00>
 8007e14:	f04f 0800 	mov.w	r8, #0
 8007e18:	e7e7      	b.n	8007dea <_strtod_l+0xa5a>
 8007e1a:	4b5d      	ldr	r3, [pc, #372]	; (8007f90 <_strtod_l+0xc00>)
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	4649      	mov	r1, r9
 8007e20:	2200      	movs	r2, #0
 8007e22:	f7f8 fbe9 	bl	80005f8 <__aeabi_dmul>
 8007e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e28:	4680      	mov	r8, r0
 8007e2a:	4689      	mov	r9, r1
 8007e2c:	b933      	cbnz	r3, 8007e3c <_strtod_l+0xaac>
 8007e2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e32:	900e      	str	r0, [sp, #56]	; 0x38
 8007e34:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007e3a:	e7dd      	b.n	8007df8 <_strtod_l+0xa68>
 8007e3c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007e40:	e7f9      	b.n	8007e36 <_strtod_l+0xaa6>
 8007e42:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007e46:	9b04      	ldr	r3, [sp, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1a8      	bne.n	8007d9e <_strtod_l+0xa0e>
 8007e4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e52:	0d1b      	lsrs	r3, r3, #20
 8007e54:	051b      	lsls	r3, r3, #20
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d1a1      	bne.n	8007d9e <_strtod_l+0xa0e>
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	f7f8 ff2b 	bl	8000cb8 <__aeabi_d2lz>
 8007e62:	f7f8 fb9b 	bl	800059c <__aeabi_l2d>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	f7f8 fa0b 	bl	8000288 <__aeabi_dsub>
 8007e72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e78:	ea43 030a 	orr.w	r3, r3, sl
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	4680      	mov	r8, r0
 8007e80:	4689      	mov	r9, r1
 8007e82:	d055      	beq.n	8007f30 <_strtod_l+0xba0>
 8007e84:	a336      	add	r3, pc, #216	; (adr r3, 8007f60 <_strtod_l+0xbd0>)
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f7f8 fe27 	bl	8000adc <__aeabi_dcmplt>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	f47f acd0 	bne.w	8007834 <_strtod_l+0x4a4>
 8007e94:	a334      	add	r3, pc, #208	; (adr r3, 8007f68 <_strtod_l+0xbd8>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	f7f8 fe3b 	bl	8000b18 <__aeabi_dcmpgt>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	f43f af7b 	beq.w	8007d9e <_strtod_l+0xa0e>
 8007ea8:	e4c4      	b.n	8007834 <_strtod_l+0x4a4>
 8007eaa:	9b04      	ldr	r3, [sp, #16]
 8007eac:	b333      	cbz	r3, 8007efc <_strtod_l+0xb6c>
 8007eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eb0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007eb4:	d822      	bhi.n	8007efc <_strtod_l+0xb6c>
 8007eb6:	a32e      	add	r3, pc, #184	; (adr r3, 8007f70 <_strtod_l+0xbe0>)
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 fe16 	bl	8000af0 <__aeabi_dcmple>
 8007ec4:	b1a0      	cbz	r0, 8007ef0 <_strtod_l+0xb60>
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	4640      	mov	r0, r8
 8007eca:	f7f8 fe6d 	bl	8000ba8 <__aeabi_d2uiz>
 8007ece:	2801      	cmp	r0, #1
 8007ed0:	bf38      	it	cc
 8007ed2:	2001      	movcc	r0, #1
 8007ed4:	f7f8 fb16 	bl	8000504 <__aeabi_ui2d>
 8007ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eda:	4680      	mov	r8, r0
 8007edc:	4689      	mov	r9, r1
 8007ede:	bb23      	cbnz	r3, 8007f2a <_strtod_l+0xb9a>
 8007ee0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ee4:	9010      	str	r0, [sp, #64]	; 0x40
 8007ee6:	9311      	str	r3, [sp, #68]	; 0x44
 8007ee8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007eec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ef4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007ef8:	1a9b      	subs	r3, r3, r2
 8007efa:	9309      	str	r3, [sp, #36]	; 0x24
 8007efc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f00:	eeb0 0a48 	vmov.f32	s0, s16
 8007f04:	eef0 0a68 	vmov.f32	s1, s17
 8007f08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f0c:	f002 f8a2 	bl	800a054 <__ulp>
 8007f10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f14:	ec53 2b10 	vmov	r2, r3, d0
 8007f18:	f7f8 fb6e 	bl	80005f8 <__aeabi_dmul>
 8007f1c:	ec53 2b18 	vmov	r2, r3, d8
 8007f20:	f7f8 f9b4 	bl	800028c <__adddf3>
 8007f24:	4682      	mov	sl, r0
 8007f26:	468b      	mov	fp, r1
 8007f28:	e78d      	b.n	8007e46 <_strtod_l+0xab6>
 8007f2a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007f2e:	e7db      	b.n	8007ee8 <_strtod_l+0xb58>
 8007f30:	a311      	add	r3, pc, #68	; (adr r3, 8007f78 <_strtod_l+0xbe8>)
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	f7f8 fdd1 	bl	8000adc <__aeabi_dcmplt>
 8007f3a:	e7b2      	b.n	8007ea2 <_strtod_l+0xb12>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	f7ff ba6b 	b.w	8007420 <_strtod_l+0x90>
 8007f4a:	2a65      	cmp	r2, #101	; 0x65
 8007f4c:	f43f ab5f 	beq.w	800760e <_strtod_l+0x27e>
 8007f50:	2a45      	cmp	r2, #69	; 0x45
 8007f52:	f43f ab5c 	beq.w	800760e <_strtod_l+0x27e>
 8007f56:	2301      	movs	r3, #1
 8007f58:	f7ff bb94 	b.w	8007684 <_strtod_l+0x2f4>
 8007f5c:	f3af 8000 	nop.w
 8007f60:	94a03595 	.word	0x94a03595
 8007f64:	3fdfffff 	.word	0x3fdfffff
 8007f68:	35afe535 	.word	0x35afe535
 8007f6c:	3fe00000 	.word	0x3fe00000
 8007f70:	ffc00000 	.word	0xffc00000
 8007f74:	41dfffff 	.word	0x41dfffff
 8007f78:	94a03595 	.word	0x94a03595
 8007f7c:	3fcfffff 	.word	0x3fcfffff
 8007f80:	3ff00000 	.word	0x3ff00000
 8007f84:	7ff00000 	.word	0x7ff00000
 8007f88:	7fe00000 	.word	0x7fe00000
 8007f8c:	7c9fffff 	.word	0x7c9fffff
 8007f90:	3fe00000 	.word	0x3fe00000
 8007f94:	bff00000 	.word	0xbff00000
 8007f98:	7fefffff 	.word	0x7fefffff

08007f9c <_strtod_r>:
 8007f9c:	4b01      	ldr	r3, [pc, #4]	; (8007fa4 <_strtod_r+0x8>)
 8007f9e:	f7ff b9f7 	b.w	8007390 <_strtod_l>
 8007fa2:	bf00      	nop
 8007fa4:	2000016c 	.word	0x2000016c

08007fa8 <_strtol_l.constprop.0>:
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fae:	d001      	beq.n	8007fb4 <_strtol_l.constprop.0+0xc>
 8007fb0:	2b24      	cmp	r3, #36	; 0x24
 8007fb2:	d906      	bls.n	8007fc2 <_strtol_l.constprop.0+0x1a>
 8007fb4:	f7fe f8e0 	bl	8006178 <__errno>
 8007fb8:	2316      	movs	r3, #22
 8007fba:	6003      	str	r3, [r0, #0]
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80080a8 <_strtol_l.constprop.0+0x100>
 8007fc6:	460d      	mov	r5, r1
 8007fc8:	462e      	mov	r6, r5
 8007fca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fce:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007fd2:	f017 0708 	ands.w	r7, r7, #8
 8007fd6:	d1f7      	bne.n	8007fc8 <_strtol_l.constprop.0+0x20>
 8007fd8:	2c2d      	cmp	r4, #45	; 0x2d
 8007fda:	d132      	bne.n	8008042 <_strtol_l.constprop.0+0x9a>
 8007fdc:	782c      	ldrb	r4, [r5, #0]
 8007fde:	2701      	movs	r7, #1
 8007fe0:	1cb5      	adds	r5, r6, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d05b      	beq.n	800809e <_strtol_l.constprop.0+0xf6>
 8007fe6:	2b10      	cmp	r3, #16
 8007fe8:	d109      	bne.n	8007ffe <_strtol_l.constprop.0+0x56>
 8007fea:	2c30      	cmp	r4, #48	; 0x30
 8007fec:	d107      	bne.n	8007ffe <_strtol_l.constprop.0+0x56>
 8007fee:	782c      	ldrb	r4, [r5, #0]
 8007ff0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007ff4:	2c58      	cmp	r4, #88	; 0x58
 8007ff6:	d14d      	bne.n	8008094 <_strtol_l.constprop.0+0xec>
 8007ff8:	786c      	ldrb	r4, [r5, #1]
 8007ffa:	2310      	movs	r3, #16
 8007ffc:	3502      	adds	r5, #2
 8007ffe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008002:	f108 38ff 	add.w	r8, r8, #4294967295
 8008006:	f04f 0c00 	mov.w	ip, #0
 800800a:	fbb8 f9f3 	udiv	r9, r8, r3
 800800e:	4666      	mov	r6, ip
 8008010:	fb03 8a19 	mls	sl, r3, r9, r8
 8008014:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008018:	f1be 0f09 	cmp.w	lr, #9
 800801c:	d816      	bhi.n	800804c <_strtol_l.constprop.0+0xa4>
 800801e:	4674      	mov	r4, lr
 8008020:	42a3      	cmp	r3, r4
 8008022:	dd24      	ble.n	800806e <_strtol_l.constprop.0+0xc6>
 8008024:	f1bc 0f00 	cmp.w	ip, #0
 8008028:	db1e      	blt.n	8008068 <_strtol_l.constprop.0+0xc0>
 800802a:	45b1      	cmp	r9, r6
 800802c:	d31c      	bcc.n	8008068 <_strtol_l.constprop.0+0xc0>
 800802e:	d101      	bne.n	8008034 <_strtol_l.constprop.0+0x8c>
 8008030:	45a2      	cmp	sl, r4
 8008032:	db19      	blt.n	8008068 <_strtol_l.constprop.0+0xc0>
 8008034:	fb06 4603 	mla	r6, r6, r3, r4
 8008038:	f04f 0c01 	mov.w	ip, #1
 800803c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008040:	e7e8      	b.n	8008014 <_strtol_l.constprop.0+0x6c>
 8008042:	2c2b      	cmp	r4, #43	; 0x2b
 8008044:	bf04      	itt	eq
 8008046:	782c      	ldrbeq	r4, [r5, #0]
 8008048:	1cb5      	addeq	r5, r6, #2
 800804a:	e7ca      	b.n	8007fe2 <_strtol_l.constprop.0+0x3a>
 800804c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008050:	f1be 0f19 	cmp.w	lr, #25
 8008054:	d801      	bhi.n	800805a <_strtol_l.constprop.0+0xb2>
 8008056:	3c37      	subs	r4, #55	; 0x37
 8008058:	e7e2      	b.n	8008020 <_strtol_l.constprop.0+0x78>
 800805a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800805e:	f1be 0f19 	cmp.w	lr, #25
 8008062:	d804      	bhi.n	800806e <_strtol_l.constprop.0+0xc6>
 8008064:	3c57      	subs	r4, #87	; 0x57
 8008066:	e7db      	b.n	8008020 <_strtol_l.constprop.0+0x78>
 8008068:	f04f 3cff 	mov.w	ip, #4294967295
 800806c:	e7e6      	b.n	800803c <_strtol_l.constprop.0+0x94>
 800806e:	f1bc 0f00 	cmp.w	ip, #0
 8008072:	da05      	bge.n	8008080 <_strtol_l.constprop.0+0xd8>
 8008074:	2322      	movs	r3, #34	; 0x22
 8008076:	6003      	str	r3, [r0, #0]
 8008078:	4646      	mov	r6, r8
 800807a:	b942      	cbnz	r2, 800808e <_strtol_l.constprop.0+0xe6>
 800807c:	4630      	mov	r0, r6
 800807e:	e79e      	b.n	8007fbe <_strtol_l.constprop.0+0x16>
 8008080:	b107      	cbz	r7, 8008084 <_strtol_l.constprop.0+0xdc>
 8008082:	4276      	negs	r6, r6
 8008084:	2a00      	cmp	r2, #0
 8008086:	d0f9      	beq.n	800807c <_strtol_l.constprop.0+0xd4>
 8008088:	f1bc 0f00 	cmp.w	ip, #0
 800808c:	d000      	beq.n	8008090 <_strtol_l.constprop.0+0xe8>
 800808e:	1e69      	subs	r1, r5, #1
 8008090:	6011      	str	r1, [r2, #0]
 8008092:	e7f3      	b.n	800807c <_strtol_l.constprop.0+0xd4>
 8008094:	2430      	movs	r4, #48	; 0x30
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1b1      	bne.n	8007ffe <_strtol_l.constprop.0+0x56>
 800809a:	2308      	movs	r3, #8
 800809c:	e7af      	b.n	8007ffe <_strtol_l.constprop.0+0x56>
 800809e:	2c30      	cmp	r4, #48	; 0x30
 80080a0:	d0a5      	beq.n	8007fee <_strtol_l.constprop.0+0x46>
 80080a2:	230a      	movs	r3, #10
 80080a4:	e7ab      	b.n	8007ffe <_strtol_l.constprop.0+0x56>
 80080a6:	bf00      	nop
 80080a8:	0800ea2d 	.word	0x0800ea2d

080080ac <_strtol_r>:
 80080ac:	f7ff bf7c 	b.w	8007fa8 <_strtol_l.constprop.0>

080080b0 <__swbuf_r>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	460e      	mov	r6, r1
 80080b4:	4614      	mov	r4, r2
 80080b6:	4605      	mov	r5, r0
 80080b8:	b118      	cbz	r0, 80080c2 <__swbuf_r+0x12>
 80080ba:	6983      	ldr	r3, [r0, #24]
 80080bc:	b90b      	cbnz	r3, 80080c2 <__swbuf_r+0x12>
 80080be:	f7fe f8cd 	bl	800625c <__sinit>
 80080c2:	4b21      	ldr	r3, [pc, #132]	; (8008148 <__swbuf_r+0x98>)
 80080c4:	429c      	cmp	r4, r3
 80080c6:	d12b      	bne.n	8008120 <__swbuf_r+0x70>
 80080c8:	686c      	ldr	r4, [r5, #4]
 80080ca:	69a3      	ldr	r3, [r4, #24]
 80080cc:	60a3      	str	r3, [r4, #8]
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	071a      	lsls	r2, r3, #28
 80080d2:	d52f      	bpl.n	8008134 <__swbuf_r+0x84>
 80080d4:	6923      	ldr	r3, [r4, #16]
 80080d6:	b36b      	cbz	r3, 8008134 <__swbuf_r+0x84>
 80080d8:	6923      	ldr	r3, [r4, #16]
 80080da:	6820      	ldr	r0, [r4, #0]
 80080dc:	1ac0      	subs	r0, r0, r3
 80080de:	6963      	ldr	r3, [r4, #20]
 80080e0:	b2f6      	uxtb	r6, r6
 80080e2:	4283      	cmp	r3, r0
 80080e4:	4637      	mov	r7, r6
 80080e6:	dc04      	bgt.n	80080f2 <__swbuf_r+0x42>
 80080e8:	4621      	mov	r1, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 ffe0 	bl	80090b0 <_fflush_r>
 80080f0:	bb30      	cbnz	r0, 8008140 <__swbuf_r+0x90>
 80080f2:	68a3      	ldr	r3, [r4, #8]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	60a3      	str	r3, [r4, #8]
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	6022      	str	r2, [r4, #0]
 80080fe:	701e      	strb	r6, [r3, #0]
 8008100:	6963      	ldr	r3, [r4, #20]
 8008102:	3001      	adds	r0, #1
 8008104:	4283      	cmp	r3, r0
 8008106:	d004      	beq.n	8008112 <__swbuf_r+0x62>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	07db      	lsls	r3, r3, #31
 800810c:	d506      	bpl.n	800811c <__swbuf_r+0x6c>
 800810e:	2e0a      	cmp	r6, #10
 8008110:	d104      	bne.n	800811c <__swbuf_r+0x6c>
 8008112:	4621      	mov	r1, r4
 8008114:	4628      	mov	r0, r5
 8008116:	f000 ffcb 	bl	80090b0 <_fflush_r>
 800811a:	b988      	cbnz	r0, 8008140 <__swbuf_r+0x90>
 800811c:	4638      	mov	r0, r7
 800811e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008120:	4b0a      	ldr	r3, [pc, #40]	; (800814c <__swbuf_r+0x9c>)
 8008122:	429c      	cmp	r4, r3
 8008124:	d101      	bne.n	800812a <__swbuf_r+0x7a>
 8008126:	68ac      	ldr	r4, [r5, #8]
 8008128:	e7cf      	b.n	80080ca <__swbuf_r+0x1a>
 800812a:	4b09      	ldr	r3, [pc, #36]	; (8008150 <__swbuf_r+0xa0>)
 800812c:	429c      	cmp	r4, r3
 800812e:	bf08      	it	eq
 8008130:	68ec      	ldreq	r4, [r5, #12]
 8008132:	e7ca      	b.n	80080ca <__swbuf_r+0x1a>
 8008134:	4621      	mov	r1, r4
 8008136:	4628      	mov	r0, r5
 8008138:	f000 f81e 	bl	8008178 <__swsetup_r>
 800813c:	2800      	cmp	r0, #0
 800813e:	d0cb      	beq.n	80080d8 <__swbuf_r+0x28>
 8008140:	f04f 37ff 	mov.w	r7, #4294967295
 8008144:	e7ea      	b.n	800811c <__swbuf_r+0x6c>
 8008146:	bf00      	nop
 8008148:	0800e91c 	.word	0x0800e91c
 800814c:	0800e93c 	.word	0x0800e93c
 8008150:	0800e8fc 	.word	0x0800e8fc

08008154 <_write_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d07      	ldr	r5, [pc, #28]	; (8008174 <_write_r+0x20>)
 8008158:	4604      	mov	r4, r0
 800815a:	4608      	mov	r0, r1
 800815c:	4611      	mov	r1, r2
 800815e:	2200      	movs	r2, #0
 8008160:	602a      	str	r2, [r5, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	f7fd ff63 	bl	800602e <_write>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_write_r+0x1e>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_write_r+0x1e>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	20000914 	.word	0x20000914

08008178 <__swsetup_r>:
 8008178:	4b32      	ldr	r3, [pc, #200]	; (8008244 <__swsetup_r+0xcc>)
 800817a:	b570      	push	{r4, r5, r6, lr}
 800817c:	681d      	ldr	r5, [r3, #0]
 800817e:	4606      	mov	r6, r0
 8008180:	460c      	mov	r4, r1
 8008182:	b125      	cbz	r5, 800818e <__swsetup_r+0x16>
 8008184:	69ab      	ldr	r3, [r5, #24]
 8008186:	b913      	cbnz	r3, 800818e <__swsetup_r+0x16>
 8008188:	4628      	mov	r0, r5
 800818a:	f7fe f867 	bl	800625c <__sinit>
 800818e:	4b2e      	ldr	r3, [pc, #184]	; (8008248 <__swsetup_r+0xd0>)
 8008190:	429c      	cmp	r4, r3
 8008192:	d10f      	bne.n	80081b4 <__swsetup_r+0x3c>
 8008194:	686c      	ldr	r4, [r5, #4]
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800819c:	0719      	lsls	r1, r3, #28
 800819e:	d42c      	bmi.n	80081fa <__swsetup_r+0x82>
 80081a0:	06dd      	lsls	r5, r3, #27
 80081a2:	d411      	bmi.n	80081c8 <__swsetup_r+0x50>
 80081a4:	2309      	movs	r3, #9
 80081a6:	6033      	str	r3, [r6, #0]
 80081a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	f04f 30ff 	mov.w	r0, #4294967295
 80081b2:	e03e      	b.n	8008232 <__swsetup_r+0xba>
 80081b4:	4b25      	ldr	r3, [pc, #148]	; (800824c <__swsetup_r+0xd4>)
 80081b6:	429c      	cmp	r4, r3
 80081b8:	d101      	bne.n	80081be <__swsetup_r+0x46>
 80081ba:	68ac      	ldr	r4, [r5, #8]
 80081bc:	e7eb      	b.n	8008196 <__swsetup_r+0x1e>
 80081be:	4b24      	ldr	r3, [pc, #144]	; (8008250 <__swsetup_r+0xd8>)
 80081c0:	429c      	cmp	r4, r3
 80081c2:	bf08      	it	eq
 80081c4:	68ec      	ldreq	r4, [r5, #12]
 80081c6:	e7e6      	b.n	8008196 <__swsetup_r+0x1e>
 80081c8:	0758      	lsls	r0, r3, #29
 80081ca:	d512      	bpl.n	80081f2 <__swsetup_r+0x7a>
 80081cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ce:	b141      	cbz	r1, 80081e2 <__swsetup_r+0x6a>
 80081d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081d4:	4299      	cmp	r1, r3
 80081d6:	d002      	beq.n	80081de <__swsetup_r+0x66>
 80081d8:	4630      	mov	r0, r6
 80081da:	f002 f8a1 	bl	800a320 <_free_r>
 80081de:	2300      	movs	r3, #0
 80081e0:	6363      	str	r3, [r4, #52]	; 0x34
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081e8:	81a3      	strh	r3, [r4, #12]
 80081ea:	2300      	movs	r3, #0
 80081ec:	6063      	str	r3, [r4, #4]
 80081ee:	6923      	ldr	r3, [r4, #16]
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f043 0308 	orr.w	r3, r3, #8
 80081f8:	81a3      	strh	r3, [r4, #12]
 80081fa:	6923      	ldr	r3, [r4, #16]
 80081fc:	b94b      	cbnz	r3, 8008212 <__swsetup_r+0x9a>
 80081fe:	89a3      	ldrh	r3, [r4, #12]
 8008200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008208:	d003      	beq.n	8008212 <__swsetup_r+0x9a>
 800820a:	4621      	mov	r1, r4
 800820c:	4630      	mov	r0, r6
 800820e:	f001 fb49 	bl	80098a4 <__smakebuf_r>
 8008212:	89a0      	ldrh	r0, [r4, #12]
 8008214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008218:	f010 0301 	ands.w	r3, r0, #1
 800821c:	d00a      	beq.n	8008234 <__swsetup_r+0xbc>
 800821e:	2300      	movs	r3, #0
 8008220:	60a3      	str	r3, [r4, #8]
 8008222:	6963      	ldr	r3, [r4, #20]
 8008224:	425b      	negs	r3, r3
 8008226:	61a3      	str	r3, [r4, #24]
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	b943      	cbnz	r3, 800823e <__swsetup_r+0xc6>
 800822c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008230:	d1ba      	bne.n	80081a8 <__swsetup_r+0x30>
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	0781      	lsls	r1, r0, #30
 8008236:	bf58      	it	pl
 8008238:	6963      	ldrpl	r3, [r4, #20]
 800823a:	60a3      	str	r3, [r4, #8]
 800823c:	e7f4      	b.n	8008228 <__swsetup_r+0xb0>
 800823e:	2000      	movs	r0, #0
 8008240:	e7f7      	b.n	8008232 <__swsetup_r+0xba>
 8008242:	bf00      	nop
 8008244:	20000104 	.word	0x20000104
 8008248:	0800e91c 	.word	0x0800e91c
 800824c:	0800e93c 	.word	0x0800e93c
 8008250:	0800e8fc 	.word	0x0800e8fc

08008254 <__assert_func>:
 8008254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008256:	4614      	mov	r4, r2
 8008258:	461a      	mov	r2, r3
 800825a:	4b09      	ldr	r3, [pc, #36]	; (8008280 <__assert_func+0x2c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4605      	mov	r5, r0
 8008260:	68d8      	ldr	r0, [r3, #12]
 8008262:	b14c      	cbz	r4, 8008278 <__assert_func+0x24>
 8008264:	4b07      	ldr	r3, [pc, #28]	; (8008284 <__assert_func+0x30>)
 8008266:	9100      	str	r1, [sp, #0]
 8008268:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800826c:	4906      	ldr	r1, [pc, #24]	; (8008288 <__assert_func+0x34>)
 800826e:	462b      	mov	r3, r5
 8008270:	f000 ff5a 	bl	8009128 <fiprintf>
 8008274:	f002 fb91 	bl	800a99a <abort>
 8008278:	4b04      	ldr	r3, [pc, #16]	; (800828c <__assert_func+0x38>)
 800827a:	461c      	mov	r4, r3
 800827c:	e7f3      	b.n	8008266 <__assert_func+0x12>
 800827e:	bf00      	nop
 8008280:	20000104 	.word	0x20000104
 8008284:	0800e9f0 	.word	0x0800e9f0
 8008288:	0800e9fd 	.word	0x0800e9fd
 800828c:	0800ea2b 	.word	0x0800ea2b

08008290 <_close_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4d06      	ldr	r5, [pc, #24]	; (80082ac <_close_r+0x1c>)
 8008294:	2300      	movs	r3, #0
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	602b      	str	r3, [r5, #0]
 800829c:	f7fd fef8 	bl	8006090 <_close>
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	d102      	bne.n	80082aa <_close_r+0x1a>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	b103      	cbz	r3, 80082aa <_close_r+0x1a>
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	20000914 	.word	0x20000914

080082b0 <quorem>:
 80082b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	6903      	ldr	r3, [r0, #16]
 80082b6:	690c      	ldr	r4, [r1, #16]
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	4607      	mov	r7, r0
 80082bc:	f2c0 8081 	blt.w	80083c2 <quorem+0x112>
 80082c0:	3c01      	subs	r4, #1
 80082c2:	f101 0814 	add.w	r8, r1, #20
 80082c6:	f100 0514 	add.w	r5, r0, #20
 80082ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082ce:	9301      	str	r3, [sp, #4]
 80082d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082d8:	3301      	adds	r3, #1
 80082da:	429a      	cmp	r2, r3
 80082dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80082e8:	d331      	bcc.n	800834e <quorem+0x9e>
 80082ea:	f04f 0e00 	mov.w	lr, #0
 80082ee:	4640      	mov	r0, r8
 80082f0:	46ac      	mov	ip, r5
 80082f2:	46f2      	mov	sl, lr
 80082f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80082f8:	b293      	uxth	r3, r2
 80082fa:	fb06 e303 	mla	r3, r6, r3, lr
 80082fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008302:	b29b      	uxth	r3, r3
 8008304:	ebaa 0303 	sub.w	r3, sl, r3
 8008308:	f8dc a000 	ldr.w	sl, [ip]
 800830c:	0c12      	lsrs	r2, r2, #16
 800830e:	fa13 f38a 	uxtah	r3, r3, sl
 8008312:	fb06 e202 	mla	r2, r6, r2, lr
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	9b00      	ldr	r3, [sp, #0]
 800831a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800831e:	b292      	uxth	r2, r2
 8008320:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008324:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008328:	f8bd 3000 	ldrh.w	r3, [sp]
 800832c:	4581      	cmp	r9, r0
 800832e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008332:	f84c 3b04 	str.w	r3, [ip], #4
 8008336:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800833a:	d2db      	bcs.n	80082f4 <quorem+0x44>
 800833c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008340:	b92b      	cbnz	r3, 800834e <quorem+0x9e>
 8008342:	9b01      	ldr	r3, [sp, #4]
 8008344:	3b04      	subs	r3, #4
 8008346:	429d      	cmp	r5, r3
 8008348:	461a      	mov	r2, r3
 800834a:	d32e      	bcc.n	80083aa <quorem+0xfa>
 800834c:	613c      	str	r4, [r7, #16]
 800834e:	4638      	mov	r0, r7
 8008350:	f001 fdda 	bl	8009f08 <__mcmp>
 8008354:	2800      	cmp	r0, #0
 8008356:	db24      	blt.n	80083a2 <quorem+0xf2>
 8008358:	3601      	adds	r6, #1
 800835a:	4628      	mov	r0, r5
 800835c:	f04f 0c00 	mov.w	ip, #0
 8008360:	f858 2b04 	ldr.w	r2, [r8], #4
 8008364:	f8d0 e000 	ldr.w	lr, [r0]
 8008368:	b293      	uxth	r3, r2
 800836a:	ebac 0303 	sub.w	r3, ip, r3
 800836e:	0c12      	lsrs	r2, r2, #16
 8008370:	fa13 f38e 	uxtah	r3, r3, lr
 8008374:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008378:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800837c:	b29b      	uxth	r3, r3
 800837e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008382:	45c1      	cmp	r9, r8
 8008384:	f840 3b04 	str.w	r3, [r0], #4
 8008388:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800838c:	d2e8      	bcs.n	8008360 <quorem+0xb0>
 800838e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008396:	b922      	cbnz	r2, 80083a2 <quorem+0xf2>
 8008398:	3b04      	subs	r3, #4
 800839a:	429d      	cmp	r5, r3
 800839c:	461a      	mov	r2, r3
 800839e:	d30a      	bcc.n	80083b6 <quorem+0x106>
 80083a0:	613c      	str	r4, [r7, #16]
 80083a2:	4630      	mov	r0, r6
 80083a4:	b003      	add	sp, #12
 80083a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083aa:	6812      	ldr	r2, [r2, #0]
 80083ac:	3b04      	subs	r3, #4
 80083ae:	2a00      	cmp	r2, #0
 80083b0:	d1cc      	bne.n	800834c <quorem+0x9c>
 80083b2:	3c01      	subs	r4, #1
 80083b4:	e7c7      	b.n	8008346 <quorem+0x96>
 80083b6:	6812      	ldr	r2, [r2, #0]
 80083b8:	3b04      	subs	r3, #4
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	d1f0      	bne.n	80083a0 <quorem+0xf0>
 80083be:	3c01      	subs	r4, #1
 80083c0:	e7eb      	b.n	800839a <quorem+0xea>
 80083c2:	2000      	movs	r0, #0
 80083c4:	e7ee      	b.n	80083a4 <quorem+0xf4>
	...

080083c8 <_dtoa_r>:
 80083c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083cc:	ed2d 8b04 	vpush	{d8-d9}
 80083d0:	ec57 6b10 	vmov	r6, r7, d0
 80083d4:	b093      	sub	sp, #76	; 0x4c
 80083d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80083dc:	9106      	str	r1, [sp, #24]
 80083de:	ee10 aa10 	vmov	sl, s0
 80083e2:	4604      	mov	r4, r0
 80083e4:	9209      	str	r2, [sp, #36]	; 0x24
 80083e6:	930c      	str	r3, [sp, #48]	; 0x30
 80083e8:	46bb      	mov	fp, r7
 80083ea:	b975      	cbnz	r5, 800840a <_dtoa_r+0x42>
 80083ec:	2010      	movs	r0, #16
 80083ee:	f001 fa99 	bl	8009924 <malloc>
 80083f2:	4602      	mov	r2, r0
 80083f4:	6260      	str	r0, [r4, #36]	; 0x24
 80083f6:	b920      	cbnz	r0, 8008402 <_dtoa_r+0x3a>
 80083f8:	4ba7      	ldr	r3, [pc, #668]	; (8008698 <_dtoa_r+0x2d0>)
 80083fa:	21ea      	movs	r1, #234	; 0xea
 80083fc:	48a7      	ldr	r0, [pc, #668]	; (800869c <_dtoa_r+0x2d4>)
 80083fe:	f7ff ff29 	bl	8008254 <__assert_func>
 8008402:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008406:	6005      	str	r5, [r0, #0]
 8008408:	60c5      	str	r5, [r0, #12]
 800840a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800840c:	6819      	ldr	r1, [r3, #0]
 800840e:	b151      	cbz	r1, 8008426 <_dtoa_r+0x5e>
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	604a      	str	r2, [r1, #4]
 8008414:	2301      	movs	r3, #1
 8008416:	4093      	lsls	r3, r2
 8008418:	608b      	str	r3, [r1, #8]
 800841a:	4620      	mov	r0, r4
 800841c:	f001 fae8 	bl	80099f0 <_Bfree>
 8008420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	1e3b      	subs	r3, r7, #0
 8008428:	bfaa      	itet	ge
 800842a:	2300      	movge	r3, #0
 800842c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008430:	f8c8 3000 	strge.w	r3, [r8]
 8008434:	4b9a      	ldr	r3, [pc, #616]	; (80086a0 <_dtoa_r+0x2d8>)
 8008436:	bfbc      	itt	lt
 8008438:	2201      	movlt	r2, #1
 800843a:	f8c8 2000 	strlt.w	r2, [r8]
 800843e:	ea33 030b 	bics.w	r3, r3, fp
 8008442:	d11b      	bne.n	800847c <_dtoa_r+0xb4>
 8008444:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008446:	f242 730f 	movw	r3, #9999	; 0x270f
 800844a:	6013      	str	r3, [r2, #0]
 800844c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008450:	4333      	orrs	r3, r6
 8008452:	f000 8592 	beq.w	8008f7a <_dtoa_r+0xbb2>
 8008456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008458:	b963      	cbnz	r3, 8008474 <_dtoa_r+0xac>
 800845a:	4b92      	ldr	r3, [pc, #584]	; (80086a4 <_dtoa_r+0x2dc>)
 800845c:	e022      	b.n	80084a4 <_dtoa_r+0xdc>
 800845e:	4b92      	ldr	r3, [pc, #584]	; (80086a8 <_dtoa_r+0x2e0>)
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	3308      	adds	r3, #8
 8008464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	9801      	ldr	r0, [sp, #4]
 800846a:	b013      	add	sp, #76	; 0x4c
 800846c:	ecbd 8b04 	vpop	{d8-d9}
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008474:	4b8b      	ldr	r3, [pc, #556]	; (80086a4 <_dtoa_r+0x2dc>)
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	3303      	adds	r3, #3
 800847a:	e7f3      	b.n	8008464 <_dtoa_r+0x9c>
 800847c:	2200      	movs	r2, #0
 800847e:	2300      	movs	r3, #0
 8008480:	4650      	mov	r0, sl
 8008482:	4659      	mov	r1, fp
 8008484:	f7f8 fb20 	bl	8000ac8 <__aeabi_dcmpeq>
 8008488:	ec4b ab19 	vmov	d9, sl, fp
 800848c:	4680      	mov	r8, r0
 800848e:	b158      	cbz	r0, 80084a8 <_dtoa_r+0xe0>
 8008490:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008492:	2301      	movs	r3, #1
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 856b 	beq.w	8008f74 <_dtoa_r+0xbac>
 800849e:	4883      	ldr	r0, [pc, #524]	; (80086ac <_dtoa_r+0x2e4>)
 80084a0:	6018      	str	r0, [r3, #0]
 80084a2:	1e43      	subs	r3, r0, #1
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	e7df      	b.n	8008468 <_dtoa_r+0xa0>
 80084a8:	ec4b ab10 	vmov	d0, sl, fp
 80084ac:	aa10      	add	r2, sp, #64	; 0x40
 80084ae:	a911      	add	r1, sp, #68	; 0x44
 80084b0:	4620      	mov	r0, r4
 80084b2:	f001 fe4b 	bl	800a14c <__d2b>
 80084b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80084ba:	ee08 0a10 	vmov	s16, r0
 80084be:	2d00      	cmp	r5, #0
 80084c0:	f000 8084 	beq.w	80085cc <_dtoa_r+0x204>
 80084c4:	ee19 3a90 	vmov	r3, s19
 80084c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80084d0:	4656      	mov	r6, sl
 80084d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80084d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80084da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80084de:	4b74      	ldr	r3, [pc, #464]	; (80086b0 <_dtoa_r+0x2e8>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	4630      	mov	r0, r6
 80084e4:	4639      	mov	r1, r7
 80084e6:	f7f7 fecf 	bl	8000288 <__aeabi_dsub>
 80084ea:	a365      	add	r3, pc, #404	; (adr r3, 8008680 <_dtoa_r+0x2b8>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f7f8 f882 	bl	80005f8 <__aeabi_dmul>
 80084f4:	a364      	add	r3, pc, #400	; (adr r3, 8008688 <_dtoa_r+0x2c0>)
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f7f7 fec7 	bl	800028c <__adddf3>
 80084fe:	4606      	mov	r6, r0
 8008500:	4628      	mov	r0, r5
 8008502:	460f      	mov	r7, r1
 8008504:	f7f8 f80e 	bl	8000524 <__aeabi_i2d>
 8008508:	a361      	add	r3, pc, #388	; (adr r3, 8008690 <_dtoa_r+0x2c8>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f8 f873 	bl	80005f8 <__aeabi_dmul>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f7 feb7 	bl	800028c <__adddf3>
 800851e:	4606      	mov	r6, r0
 8008520:	460f      	mov	r7, r1
 8008522:	f7f8 fb19 	bl	8000b58 <__aeabi_d2iz>
 8008526:	2200      	movs	r2, #0
 8008528:	9000      	str	r0, [sp, #0]
 800852a:	2300      	movs	r3, #0
 800852c:	4630      	mov	r0, r6
 800852e:	4639      	mov	r1, r7
 8008530:	f7f8 fad4 	bl	8000adc <__aeabi_dcmplt>
 8008534:	b150      	cbz	r0, 800854c <_dtoa_r+0x184>
 8008536:	9800      	ldr	r0, [sp, #0]
 8008538:	f7f7 fff4 	bl	8000524 <__aeabi_i2d>
 800853c:	4632      	mov	r2, r6
 800853e:	463b      	mov	r3, r7
 8008540:	f7f8 fac2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008544:	b910      	cbnz	r0, 800854c <_dtoa_r+0x184>
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	3b01      	subs	r3, #1
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	9b00      	ldr	r3, [sp, #0]
 800854e:	2b16      	cmp	r3, #22
 8008550:	d85a      	bhi.n	8008608 <_dtoa_r+0x240>
 8008552:	9a00      	ldr	r2, [sp, #0]
 8008554:	4b57      	ldr	r3, [pc, #348]	; (80086b4 <_dtoa_r+0x2ec>)
 8008556:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	ec51 0b19 	vmov	r0, r1, d9
 8008562:	f7f8 fabb 	bl	8000adc <__aeabi_dcmplt>
 8008566:	2800      	cmp	r0, #0
 8008568:	d050      	beq.n	800860c <_dtoa_r+0x244>
 800856a:	9b00      	ldr	r3, [sp, #0]
 800856c:	3b01      	subs	r3, #1
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	2300      	movs	r3, #0
 8008572:	930b      	str	r3, [sp, #44]	; 0x2c
 8008574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008576:	1b5d      	subs	r5, r3, r5
 8008578:	1e6b      	subs	r3, r5, #1
 800857a:	9305      	str	r3, [sp, #20]
 800857c:	bf45      	ittet	mi
 800857e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008582:	9304      	strmi	r3, [sp, #16]
 8008584:	2300      	movpl	r3, #0
 8008586:	2300      	movmi	r3, #0
 8008588:	bf4c      	ite	mi
 800858a:	9305      	strmi	r3, [sp, #20]
 800858c:	9304      	strpl	r3, [sp, #16]
 800858e:	9b00      	ldr	r3, [sp, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	db3d      	blt.n	8008610 <_dtoa_r+0x248>
 8008594:	9b05      	ldr	r3, [sp, #20]
 8008596:	9a00      	ldr	r2, [sp, #0]
 8008598:	920a      	str	r2, [sp, #40]	; 0x28
 800859a:	4413      	add	r3, r2
 800859c:	9305      	str	r3, [sp, #20]
 800859e:	2300      	movs	r3, #0
 80085a0:	9307      	str	r3, [sp, #28]
 80085a2:	9b06      	ldr	r3, [sp, #24]
 80085a4:	2b09      	cmp	r3, #9
 80085a6:	f200 8089 	bhi.w	80086bc <_dtoa_r+0x2f4>
 80085aa:	2b05      	cmp	r3, #5
 80085ac:	bfc4      	itt	gt
 80085ae:	3b04      	subgt	r3, #4
 80085b0:	9306      	strgt	r3, [sp, #24]
 80085b2:	9b06      	ldr	r3, [sp, #24]
 80085b4:	f1a3 0302 	sub.w	r3, r3, #2
 80085b8:	bfcc      	ite	gt
 80085ba:	2500      	movgt	r5, #0
 80085bc:	2501      	movle	r5, #1
 80085be:	2b03      	cmp	r3, #3
 80085c0:	f200 8087 	bhi.w	80086d2 <_dtoa_r+0x30a>
 80085c4:	e8df f003 	tbb	[pc, r3]
 80085c8:	59383a2d 	.word	0x59383a2d
 80085cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80085d0:	441d      	add	r5, r3
 80085d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80085d6:	2b20      	cmp	r3, #32
 80085d8:	bfc1      	itttt	gt
 80085da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80085de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80085e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80085e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80085ea:	bfda      	itte	le
 80085ec:	f1c3 0320 	rsble	r3, r3, #32
 80085f0:	fa06 f003 	lslle.w	r0, r6, r3
 80085f4:	4318      	orrgt	r0, r3
 80085f6:	f7f7 ff85 	bl	8000504 <__aeabi_ui2d>
 80085fa:	2301      	movs	r3, #1
 80085fc:	4606      	mov	r6, r0
 80085fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008602:	3d01      	subs	r5, #1
 8008604:	930e      	str	r3, [sp, #56]	; 0x38
 8008606:	e76a      	b.n	80084de <_dtoa_r+0x116>
 8008608:	2301      	movs	r3, #1
 800860a:	e7b2      	b.n	8008572 <_dtoa_r+0x1aa>
 800860c:	900b      	str	r0, [sp, #44]	; 0x2c
 800860e:	e7b1      	b.n	8008574 <_dtoa_r+0x1ac>
 8008610:	9b04      	ldr	r3, [sp, #16]
 8008612:	9a00      	ldr	r2, [sp, #0]
 8008614:	1a9b      	subs	r3, r3, r2
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	4253      	negs	r3, r2
 800861a:	9307      	str	r3, [sp, #28]
 800861c:	2300      	movs	r3, #0
 800861e:	930a      	str	r3, [sp, #40]	; 0x28
 8008620:	e7bf      	b.n	80085a2 <_dtoa_r+0x1da>
 8008622:	2300      	movs	r3, #0
 8008624:	9308      	str	r3, [sp, #32]
 8008626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	dc55      	bgt.n	80086d8 <_dtoa_r+0x310>
 800862c:	2301      	movs	r3, #1
 800862e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008632:	461a      	mov	r2, r3
 8008634:	9209      	str	r2, [sp, #36]	; 0x24
 8008636:	e00c      	b.n	8008652 <_dtoa_r+0x28a>
 8008638:	2301      	movs	r3, #1
 800863a:	e7f3      	b.n	8008624 <_dtoa_r+0x25c>
 800863c:	2300      	movs	r3, #0
 800863e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008640:	9308      	str	r3, [sp, #32]
 8008642:	9b00      	ldr	r3, [sp, #0]
 8008644:	4413      	add	r3, r2
 8008646:	9302      	str	r3, [sp, #8]
 8008648:	3301      	adds	r3, #1
 800864a:	2b01      	cmp	r3, #1
 800864c:	9303      	str	r3, [sp, #12]
 800864e:	bfb8      	it	lt
 8008650:	2301      	movlt	r3, #1
 8008652:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008654:	2200      	movs	r2, #0
 8008656:	6042      	str	r2, [r0, #4]
 8008658:	2204      	movs	r2, #4
 800865a:	f102 0614 	add.w	r6, r2, #20
 800865e:	429e      	cmp	r6, r3
 8008660:	6841      	ldr	r1, [r0, #4]
 8008662:	d93d      	bls.n	80086e0 <_dtoa_r+0x318>
 8008664:	4620      	mov	r0, r4
 8008666:	f001 f983 	bl	8009970 <_Balloc>
 800866a:	9001      	str	r0, [sp, #4]
 800866c:	2800      	cmp	r0, #0
 800866e:	d13b      	bne.n	80086e8 <_dtoa_r+0x320>
 8008670:	4b11      	ldr	r3, [pc, #68]	; (80086b8 <_dtoa_r+0x2f0>)
 8008672:	4602      	mov	r2, r0
 8008674:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008678:	e6c0      	b.n	80083fc <_dtoa_r+0x34>
 800867a:	2301      	movs	r3, #1
 800867c:	e7df      	b.n	800863e <_dtoa_r+0x276>
 800867e:	bf00      	nop
 8008680:	636f4361 	.word	0x636f4361
 8008684:	3fd287a7 	.word	0x3fd287a7
 8008688:	8b60c8b3 	.word	0x8b60c8b3
 800868c:	3fc68a28 	.word	0x3fc68a28
 8008690:	509f79fb 	.word	0x509f79fb
 8008694:	3fd34413 	.word	0x3fd34413
 8008698:	0800eb3a 	.word	0x0800eb3a
 800869c:	0800eb51 	.word	0x0800eb51
 80086a0:	7ff00000 	.word	0x7ff00000
 80086a4:	0800eb36 	.word	0x0800eb36
 80086a8:	0800eb2d 	.word	0x0800eb2d
 80086ac:	0800e971 	.word	0x0800e971
 80086b0:	3ff80000 	.word	0x3ff80000
 80086b4:	0800ecc0 	.word	0x0800ecc0
 80086b8:	0800ebac 	.word	0x0800ebac
 80086bc:	2501      	movs	r5, #1
 80086be:	2300      	movs	r3, #0
 80086c0:	9306      	str	r3, [sp, #24]
 80086c2:	9508      	str	r5, [sp, #32]
 80086c4:	f04f 33ff 	mov.w	r3, #4294967295
 80086c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80086cc:	2200      	movs	r2, #0
 80086ce:	2312      	movs	r3, #18
 80086d0:	e7b0      	b.n	8008634 <_dtoa_r+0x26c>
 80086d2:	2301      	movs	r3, #1
 80086d4:	9308      	str	r3, [sp, #32]
 80086d6:	e7f5      	b.n	80086c4 <_dtoa_r+0x2fc>
 80086d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80086de:	e7b8      	b.n	8008652 <_dtoa_r+0x28a>
 80086e0:	3101      	adds	r1, #1
 80086e2:	6041      	str	r1, [r0, #4]
 80086e4:	0052      	lsls	r2, r2, #1
 80086e6:	e7b8      	b.n	800865a <_dtoa_r+0x292>
 80086e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086ea:	9a01      	ldr	r2, [sp, #4]
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	2b0e      	cmp	r3, #14
 80086f2:	f200 809d 	bhi.w	8008830 <_dtoa_r+0x468>
 80086f6:	2d00      	cmp	r5, #0
 80086f8:	f000 809a 	beq.w	8008830 <_dtoa_r+0x468>
 80086fc:	9b00      	ldr	r3, [sp, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	dd32      	ble.n	8008768 <_dtoa_r+0x3a0>
 8008702:	4ab7      	ldr	r2, [pc, #732]	; (80089e0 <_dtoa_r+0x618>)
 8008704:	f003 030f 	and.w	r3, r3, #15
 8008708:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800870c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008710:	9b00      	ldr	r3, [sp, #0]
 8008712:	05d8      	lsls	r0, r3, #23
 8008714:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008718:	d516      	bpl.n	8008748 <_dtoa_r+0x380>
 800871a:	4bb2      	ldr	r3, [pc, #712]	; (80089e4 <_dtoa_r+0x61c>)
 800871c:	ec51 0b19 	vmov	r0, r1, d9
 8008720:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008724:	f7f8 f892 	bl	800084c <__aeabi_ddiv>
 8008728:	f007 070f 	and.w	r7, r7, #15
 800872c:	4682      	mov	sl, r0
 800872e:	468b      	mov	fp, r1
 8008730:	2503      	movs	r5, #3
 8008732:	4eac      	ldr	r6, [pc, #688]	; (80089e4 <_dtoa_r+0x61c>)
 8008734:	b957      	cbnz	r7, 800874c <_dtoa_r+0x384>
 8008736:	4642      	mov	r2, r8
 8008738:	464b      	mov	r3, r9
 800873a:	4650      	mov	r0, sl
 800873c:	4659      	mov	r1, fp
 800873e:	f7f8 f885 	bl	800084c <__aeabi_ddiv>
 8008742:	4682      	mov	sl, r0
 8008744:	468b      	mov	fp, r1
 8008746:	e028      	b.n	800879a <_dtoa_r+0x3d2>
 8008748:	2502      	movs	r5, #2
 800874a:	e7f2      	b.n	8008732 <_dtoa_r+0x36a>
 800874c:	07f9      	lsls	r1, r7, #31
 800874e:	d508      	bpl.n	8008762 <_dtoa_r+0x39a>
 8008750:	4640      	mov	r0, r8
 8008752:	4649      	mov	r1, r9
 8008754:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008758:	f7f7 ff4e 	bl	80005f8 <__aeabi_dmul>
 800875c:	3501      	adds	r5, #1
 800875e:	4680      	mov	r8, r0
 8008760:	4689      	mov	r9, r1
 8008762:	107f      	asrs	r7, r7, #1
 8008764:	3608      	adds	r6, #8
 8008766:	e7e5      	b.n	8008734 <_dtoa_r+0x36c>
 8008768:	f000 809b 	beq.w	80088a2 <_dtoa_r+0x4da>
 800876c:	9b00      	ldr	r3, [sp, #0]
 800876e:	4f9d      	ldr	r7, [pc, #628]	; (80089e4 <_dtoa_r+0x61c>)
 8008770:	425e      	negs	r6, r3
 8008772:	4b9b      	ldr	r3, [pc, #620]	; (80089e0 <_dtoa_r+0x618>)
 8008774:	f006 020f 	and.w	r2, r6, #15
 8008778:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	ec51 0b19 	vmov	r0, r1, d9
 8008784:	f7f7 ff38 	bl	80005f8 <__aeabi_dmul>
 8008788:	1136      	asrs	r6, r6, #4
 800878a:	4682      	mov	sl, r0
 800878c:	468b      	mov	fp, r1
 800878e:	2300      	movs	r3, #0
 8008790:	2502      	movs	r5, #2
 8008792:	2e00      	cmp	r6, #0
 8008794:	d17a      	bne.n	800888c <_dtoa_r+0x4c4>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1d3      	bne.n	8008742 <_dtoa_r+0x37a>
 800879a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 8082 	beq.w	80088a6 <_dtoa_r+0x4de>
 80087a2:	4b91      	ldr	r3, [pc, #580]	; (80089e8 <_dtoa_r+0x620>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	4650      	mov	r0, sl
 80087a8:	4659      	mov	r1, fp
 80087aa:	f7f8 f997 	bl	8000adc <__aeabi_dcmplt>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d079      	beq.n	80088a6 <_dtoa_r+0x4de>
 80087b2:	9b03      	ldr	r3, [sp, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d076      	beq.n	80088a6 <_dtoa_r+0x4de>
 80087b8:	9b02      	ldr	r3, [sp, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dd36      	ble.n	800882c <_dtoa_r+0x464>
 80087be:	9b00      	ldr	r3, [sp, #0]
 80087c0:	4650      	mov	r0, sl
 80087c2:	4659      	mov	r1, fp
 80087c4:	1e5f      	subs	r7, r3, #1
 80087c6:	2200      	movs	r2, #0
 80087c8:	4b88      	ldr	r3, [pc, #544]	; (80089ec <_dtoa_r+0x624>)
 80087ca:	f7f7 ff15 	bl	80005f8 <__aeabi_dmul>
 80087ce:	9e02      	ldr	r6, [sp, #8]
 80087d0:	4682      	mov	sl, r0
 80087d2:	468b      	mov	fp, r1
 80087d4:	3501      	adds	r5, #1
 80087d6:	4628      	mov	r0, r5
 80087d8:	f7f7 fea4 	bl	8000524 <__aeabi_i2d>
 80087dc:	4652      	mov	r2, sl
 80087de:	465b      	mov	r3, fp
 80087e0:	f7f7 ff0a 	bl	80005f8 <__aeabi_dmul>
 80087e4:	4b82      	ldr	r3, [pc, #520]	; (80089f0 <_dtoa_r+0x628>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	f7f7 fd50 	bl	800028c <__adddf3>
 80087ec:	46d0      	mov	r8, sl
 80087ee:	46d9      	mov	r9, fp
 80087f0:	4682      	mov	sl, r0
 80087f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80087f6:	2e00      	cmp	r6, #0
 80087f8:	d158      	bne.n	80088ac <_dtoa_r+0x4e4>
 80087fa:	4b7e      	ldr	r3, [pc, #504]	; (80089f4 <_dtoa_r+0x62c>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	4640      	mov	r0, r8
 8008800:	4649      	mov	r1, r9
 8008802:	f7f7 fd41 	bl	8000288 <__aeabi_dsub>
 8008806:	4652      	mov	r2, sl
 8008808:	465b      	mov	r3, fp
 800880a:	4680      	mov	r8, r0
 800880c:	4689      	mov	r9, r1
 800880e:	f7f8 f983 	bl	8000b18 <__aeabi_dcmpgt>
 8008812:	2800      	cmp	r0, #0
 8008814:	f040 8295 	bne.w	8008d42 <_dtoa_r+0x97a>
 8008818:	4652      	mov	r2, sl
 800881a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800881e:	4640      	mov	r0, r8
 8008820:	4649      	mov	r1, r9
 8008822:	f7f8 f95b 	bl	8000adc <__aeabi_dcmplt>
 8008826:	2800      	cmp	r0, #0
 8008828:	f040 8289 	bne.w	8008d3e <_dtoa_r+0x976>
 800882c:	ec5b ab19 	vmov	sl, fp, d9
 8008830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008832:	2b00      	cmp	r3, #0
 8008834:	f2c0 8148 	blt.w	8008ac8 <_dtoa_r+0x700>
 8008838:	9a00      	ldr	r2, [sp, #0]
 800883a:	2a0e      	cmp	r2, #14
 800883c:	f300 8144 	bgt.w	8008ac8 <_dtoa_r+0x700>
 8008840:	4b67      	ldr	r3, [pc, #412]	; (80089e0 <_dtoa_r+0x618>)
 8008842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008846:	e9d3 8900 	ldrd	r8, r9, [r3]
 800884a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884c:	2b00      	cmp	r3, #0
 800884e:	f280 80d5 	bge.w	80089fc <_dtoa_r+0x634>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f300 80d1 	bgt.w	80089fc <_dtoa_r+0x634>
 800885a:	f040 826f 	bne.w	8008d3c <_dtoa_r+0x974>
 800885e:	4b65      	ldr	r3, [pc, #404]	; (80089f4 <_dtoa_r+0x62c>)
 8008860:	2200      	movs	r2, #0
 8008862:	4640      	mov	r0, r8
 8008864:	4649      	mov	r1, r9
 8008866:	f7f7 fec7 	bl	80005f8 <__aeabi_dmul>
 800886a:	4652      	mov	r2, sl
 800886c:	465b      	mov	r3, fp
 800886e:	f7f8 f949 	bl	8000b04 <__aeabi_dcmpge>
 8008872:	9e03      	ldr	r6, [sp, #12]
 8008874:	4637      	mov	r7, r6
 8008876:	2800      	cmp	r0, #0
 8008878:	f040 8245 	bne.w	8008d06 <_dtoa_r+0x93e>
 800887c:	9d01      	ldr	r5, [sp, #4]
 800887e:	2331      	movs	r3, #49	; 0x31
 8008880:	f805 3b01 	strb.w	r3, [r5], #1
 8008884:	9b00      	ldr	r3, [sp, #0]
 8008886:	3301      	adds	r3, #1
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	e240      	b.n	8008d0e <_dtoa_r+0x946>
 800888c:	07f2      	lsls	r2, r6, #31
 800888e:	d505      	bpl.n	800889c <_dtoa_r+0x4d4>
 8008890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008894:	f7f7 feb0 	bl	80005f8 <__aeabi_dmul>
 8008898:	3501      	adds	r5, #1
 800889a:	2301      	movs	r3, #1
 800889c:	1076      	asrs	r6, r6, #1
 800889e:	3708      	adds	r7, #8
 80088a0:	e777      	b.n	8008792 <_dtoa_r+0x3ca>
 80088a2:	2502      	movs	r5, #2
 80088a4:	e779      	b.n	800879a <_dtoa_r+0x3d2>
 80088a6:	9f00      	ldr	r7, [sp, #0]
 80088a8:	9e03      	ldr	r6, [sp, #12]
 80088aa:	e794      	b.n	80087d6 <_dtoa_r+0x40e>
 80088ac:	9901      	ldr	r1, [sp, #4]
 80088ae:	4b4c      	ldr	r3, [pc, #304]	; (80089e0 <_dtoa_r+0x618>)
 80088b0:	4431      	add	r1, r6
 80088b2:	910d      	str	r1, [sp, #52]	; 0x34
 80088b4:	9908      	ldr	r1, [sp, #32]
 80088b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80088ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088be:	2900      	cmp	r1, #0
 80088c0:	d043      	beq.n	800894a <_dtoa_r+0x582>
 80088c2:	494d      	ldr	r1, [pc, #308]	; (80089f8 <_dtoa_r+0x630>)
 80088c4:	2000      	movs	r0, #0
 80088c6:	f7f7 ffc1 	bl	800084c <__aeabi_ddiv>
 80088ca:	4652      	mov	r2, sl
 80088cc:	465b      	mov	r3, fp
 80088ce:	f7f7 fcdb 	bl	8000288 <__aeabi_dsub>
 80088d2:	9d01      	ldr	r5, [sp, #4]
 80088d4:	4682      	mov	sl, r0
 80088d6:	468b      	mov	fp, r1
 80088d8:	4649      	mov	r1, r9
 80088da:	4640      	mov	r0, r8
 80088dc:	f7f8 f93c 	bl	8000b58 <__aeabi_d2iz>
 80088e0:	4606      	mov	r6, r0
 80088e2:	f7f7 fe1f 	bl	8000524 <__aeabi_i2d>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	4640      	mov	r0, r8
 80088ec:	4649      	mov	r1, r9
 80088ee:	f7f7 fccb 	bl	8000288 <__aeabi_dsub>
 80088f2:	3630      	adds	r6, #48	; 0x30
 80088f4:	f805 6b01 	strb.w	r6, [r5], #1
 80088f8:	4652      	mov	r2, sl
 80088fa:	465b      	mov	r3, fp
 80088fc:	4680      	mov	r8, r0
 80088fe:	4689      	mov	r9, r1
 8008900:	f7f8 f8ec 	bl	8000adc <__aeabi_dcmplt>
 8008904:	2800      	cmp	r0, #0
 8008906:	d163      	bne.n	80089d0 <_dtoa_r+0x608>
 8008908:	4642      	mov	r2, r8
 800890a:	464b      	mov	r3, r9
 800890c:	4936      	ldr	r1, [pc, #216]	; (80089e8 <_dtoa_r+0x620>)
 800890e:	2000      	movs	r0, #0
 8008910:	f7f7 fcba 	bl	8000288 <__aeabi_dsub>
 8008914:	4652      	mov	r2, sl
 8008916:	465b      	mov	r3, fp
 8008918:	f7f8 f8e0 	bl	8000adc <__aeabi_dcmplt>
 800891c:	2800      	cmp	r0, #0
 800891e:	f040 80b5 	bne.w	8008a8c <_dtoa_r+0x6c4>
 8008922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008924:	429d      	cmp	r5, r3
 8008926:	d081      	beq.n	800882c <_dtoa_r+0x464>
 8008928:	4b30      	ldr	r3, [pc, #192]	; (80089ec <_dtoa_r+0x624>)
 800892a:	2200      	movs	r2, #0
 800892c:	4650      	mov	r0, sl
 800892e:	4659      	mov	r1, fp
 8008930:	f7f7 fe62 	bl	80005f8 <__aeabi_dmul>
 8008934:	4b2d      	ldr	r3, [pc, #180]	; (80089ec <_dtoa_r+0x624>)
 8008936:	4682      	mov	sl, r0
 8008938:	468b      	mov	fp, r1
 800893a:	4640      	mov	r0, r8
 800893c:	4649      	mov	r1, r9
 800893e:	2200      	movs	r2, #0
 8008940:	f7f7 fe5a 	bl	80005f8 <__aeabi_dmul>
 8008944:	4680      	mov	r8, r0
 8008946:	4689      	mov	r9, r1
 8008948:	e7c6      	b.n	80088d8 <_dtoa_r+0x510>
 800894a:	4650      	mov	r0, sl
 800894c:	4659      	mov	r1, fp
 800894e:	f7f7 fe53 	bl	80005f8 <__aeabi_dmul>
 8008952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008954:	9d01      	ldr	r5, [sp, #4]
 8008956:	930f      	str	r3, [sp, #60]	; 0x3c
 8008958:	4682      	mov	sl, r0
 800895a:	468b      	mov	fp, r1
 800895c:	4649      	mov	r1, r9
 800895e:	4640      	mov	r0, r8
 8008960:	f7f8 f8fa 	bl	8000b58 <__aeabi_d2iz>
 8008964:	4606      	mov	r6, r0
 8008966:	f7f7 fddd 	bl	8000524 <__aeabi_i2d>
 800896a:	3630      	adds	r6, #48	; 0x30
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4640      	mov	r0, r8
 8008972:	4649      	mov	r1, r9
 8008974:	f7f7 fc88 	bl	8000288 <__aeabi_dsub>
 8008978:	f805 6b01 	strb.w	r6, [r5], #1
 800897c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800897e:	429d      	cmp	r5, r3
 8008980:	4680      	mov	r8, r0
 8008982:	4689      	mov	r9, r1
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	d124      	bne.n	80089d4 <_dtoa_r+0x60c>
 800898a:	4b1b      	ldr	r3, [pc, #108]	; (80089f8 <_dtoa_r+0x630>)
 800898c:	4650      	mov	r0, sl
 800898e:	4659      	mov	r1, fp
 8008990:	f7f7 fc7c 	bl	800028c <__adddf3>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4640      	mov	r0, r8
 800899a:	4649      	mov	r1, r9
 800899c:	f7f8 f8bc 	bl	8000b18 <__aeabi_dcmpgt>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d173      	bne.n	8008a8c <_dtoa_r+0x6c4>
 80089a4:	4652      	mov	r2, sl
 80089a6:	465b      	mov	r3, fp
 80089a8:	4913      	ldr	r1, [pc, #76]	; (80089f8 <_dtoa_r+0x630>)
 80089aa:	2000      	movs	r0, #0
 80089ac:	f7f7 fc6c 	bl	8000288 <__aeabi_dsub>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4640      	mov	r0, r8
 80089b6:	4649      	mov	r1, r9
 80089b8:	f7f8 f890 	bl	8000adc <__aeabi_dcmplt>
 80089bc:	2800      	cmp	r0, #0
 80089be:	f43f af35 	beq.w	800882c <_dtoa_r+0x464>
 80089c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80089c4:	1e6b      	subs	r3, r5, #1
 80089c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80089c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089cc:	2b30      	cmp	r3, #48	; 0x30
 80089ce:	d0f8      	beq.n	80089c2 <_dtoa_r+0x5fa>
 80089d0:	9700      	str	r7, [sp, #0]
 80089d2:	e049      	b.n	8008a68 <_dtoa_r+0x6a0>
 80089d4:	4b05      	ldr	r3, [pc, #20]	; (80089ec <_dtoa_r+0x624>)
 80089d6:	f7f7 fe0f 	bl	80005f8 <__aeabi_dmul>
 80089da:	4680      	mov	r8, r0
 80089dc:	4689      	mov	r9, r1
 80089de:	e7bd      	b.n	800895c <_dtoa_r+0x594>
 80089e0:	0800ecc0 	.word	0x0800ecc0
 80089e4:	0800ec98 	.word	0x0800ec98
 80089e8:	3ff00000 	.word	0x3ff00000
 80089ec:	40240000 	.word	0x40240000
 80089f0:	401c0000 	.word	0x401c0000
 80089f4:	40140000 	.word	0x40140000
 80089f8:	3fe00000 	.word	0x3fe00000
 80089fc:	9d01      	ldr	r5, [sp, #4]
 80089fe:	4656      	mov	r6, sl
 8008a00:	465f      	mov	r7, fp
 8008a02:	4642      	mov	r2, r8
 8008a04:	464b      	mov	r3, r9
 8008a06:	4630      	mov	r0, r6
 8008a08:	4639      	mov	r1, r7
 8008a0a:	f7f7 ff1f 	bl	800084c <__aeabi_ddiv>
 8008a0e:	f7f8 f8a3 	bl	8000b58 <__aeabi_d2iz>
 8008a12:	4682      	mov	sl, r0
 8008a14:	f7f7 fd86 	bl	8000524 <__aeabi_i2d>
 8008a18:	4642      	mov	r2, r8
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	f7f7 fdec 	bl	80005f8 <__aeabi_dmul>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4630      	mov	r0, r6
 8008a26:	4639      	mov	r1, r7
 8008a28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008a2c:	f7f7 fc2c 	bl	8000288 <__aeabi_dsub>
 8008a30:	f805 6b01 	strb.w	r6, [r5], #1
 8008a34:	9e01      	ldr	r6, [sp, #4]
 8008a36:	9f03      	ldr	r7, [sp, #12]
 8008a38:	1bae      	subs	r6, r5, r6
 8008a3a:	42b7      	cmp	r7, r6
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	d135      	bne.n	8008aae <_dtoa_r+0x6e6>
 8008a42:	f7f7 fc23 	bl	800028c <__adddf3>
 8008a46:	4642      	mov	r2, r8
 8008a48:	464b      	mov	r3, r9
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	460f      	mov	r7, r1
 8008a4e:	f7f8 f863 	bl	8000b18 <__aeabi_dcmpgt>
 8008a52:	b9d0      	cbnz	r0, 8008a8a <_dtoa_r+0x6c2>
 8008a54:	4642      	mov	r2, r8
 8008a56:	464b      	mov	r3, r9
 8008a58:	4630      	mov	r0, r6
 8008a5a:	4639      	mov	r1, r7
 8008a5c:	f7f8 f834 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a60:	b110      	cbz	r0, 8008a68 <_dtoa_r+0x6a0>
 8008a62:	f01a 0f01 	tst.w	sl, #1
 8008a66:	d110      	bne.n	8008a8a <_dtoa_r+0x6c2>
 8008a68:	4620      	mov	r0, r4
 8008a6a:	ee18 1a10 	vmov	r1, s16
 8008a6e:	f000 ffbf 	bl	80099f0 <_Bfree>
 8008a72:	2300      	movs	r3, #0
 8008a74:	9800      	ldr	r0, [sp, #0]
 8008a76:	702b      	strb	r3, [r5, #0]
 8008a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	6018      	str	r0, [r3, #0]
 8008a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f43f acf1 	beq.w	8008468 <_dtoa_r+0xa0>
 8008a86:	601d      	str	r5, [r3, #0]
 8008a88:	e4ee      	b.n	8008468 <_dtoa_r+0xa0>
 8008a8a:	9f00      	ldr	r7, [sp, #0]
 8008a8c:	462b      	mov	r3, r5
 8008a8e:	461d      	mov	r5, r3
 8008a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a94:	2a39      	cmp	r2, #57	; 0x39
 8008a96:	d106      	bne.n	8008aa6 <_dtoa_r+0x6de>
 8008a98:	9a01      	ldr	r2, [sp, #4]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d1f7      	bne.n	8008a8e <_dtoa_r+0x6c6>
 8008a9e:	9901      	ldr	r1, [sp, #4]
 8008aa0:	2230      	movs	r2, #48	; 0x30
 8008aa2:	3701      	adds	r7, #1
 8008aa4:	700a      	strb	r2, [r1, #0]
 8008aa6:	781a      	ldrb	r2, [r3, #0]
 8008aa8:	3201      	adds	r2, #1
 8008aaa:	701a      	strb	r2, [r3, #0]
 8008aac:	e790      	b.n	80089d0 <_dtoa_r+0x608>
 8008aae:	4ba6      	ldr	r3, [pc, #664]	; (8008d48 <_dtoa_r+0x980>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f7f7 fda1 	bl	80005f8 <__aeabi_dmul>
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4606      	mov	r6, r0
 8008abc:	460f      	mov	r7, r1
 8008abe:	f7f8 f803 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d09d      	beq.n	8008a02 <_dtoa_r+0x63a>
 8008ac6:	e7cf      	b.n	8008a68 <_dtoa_r+0x6a0>
 8008ac8:	9a08      	ldr	r2, [sp, #32]
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	f000 80d7 	beq.w	8008c7e <_dtoa_r+0x8b6>
 8008ad0:	9a06      	ldr	r2, [sp, #24]
 8008ad2:	2a01      	cmp	r2, #1
 8008ad4:	f300 80ba 	bgt.w	8008c4c <_dtoa_r+0x884>
 8008ad8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ada:	2a00      	cmp	r2, #0
 8008adc:	f000 80b2 	beq.w	8008c44 <_dtoa_r+0x87c>
 8008ae0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ae4:	9e07      	ldr	r6, [sp, #28]
 8008ae6:	9d04      	ldr	r5, [sp, #16]
 8008ae8:	9a04      	ldr	r2, [sp, #16]
 8008aea:	441a      	add	r2, r3
 8008aec:	9204      	str	r2, [sp, #16]
 8008aee:	9a05      	ldr	r2, [sp, #20]
 8008af0:	2101      	movs	r1, #1
 8008af2:	441a      	add	r2, r3
 8008af4:	4620      	mov	r0, r4
 8008af6:	9205      	str	r2, [sp, #20]
 8008af8:	f001 f87c 	bl	8009bf4 <__i2b>
 8008afc:	4607      	mov	r7, r0
 8008afe:	2d00      	cmp	r5, #0
 8008b00:	dd0c      	ble.n	8008b1c <_dtoa_r+0x754>
 8008b02:	9b05      	ldr	r3, [sp, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	dd09      	ble.n	8008b1c <_dtoa_r+0x754>
 8008b08:	42ab      	cmp	r3, r5
 8008b0a:	9a04      	ldr	r2, [sp, #16]
 8008b0c:	bfa8      	it	ge
 8008b0e:	462b      	movge	r3, r5
 8008b10:	1ad2      	subs	r2, r2, r3
 8008b12:	9204      	str	r2, [sp, #16]
 8008b14:	9a05      	ldr	r2, [sp, #20]
 8008b16:	1aed      	subs	r5, r5, r3
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	9305      	str	r3, [sp, #20]
 8008b1c:	9b07      	ldr	r3, [sp, #28]
 8008b1e:	b31b      	cbz	r3, 8008b68 <_dtoa_r+0x7a0>
 8008b20:	9b08      	ldr	r3, [sp, #32]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 80af 	beq.w	8008c86 <_dtoa_r+0x8be>
 8008b28:	2e00      	cmp	r6, #0
 8008b2a:	dd13      	ble.n	8008b54 <_dtoa_r+0x78c>
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	4632      	mov	r2, r6
 8008b30:	4620      	mov	r0, r4
 8008b32:	f001 f91f 	bl	8009d74 <__pow5mult>
 8008b36:	ee18 2a10 	vmov	r2, s16
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f001 f86e 	bl	8009c20 <__multiply>
 8008b44:	ee18 1a10 	vmov	r1, s16
 8008b48:	4680      	mov	r8, r0
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 ff50 	bl	80099f0 <_Bfree>
 8008b50:	ee08 8a10 	vmov	s16, r8
 8008b54:	9b07      	ldr	r3, [sp, #28]
 8008b56:	1b9a      	subs	r2, r3, r6
 8008b58:	d006      	beq.n	8008b68 <_dtoa_r+0x7a0>
 8008b5a:	ee18 1a10 	vmov	r1, s16
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f001 f908 	bl	8009d74 <__pow5mult>
 8008b64:	ee08 0a10 	vmov	s16, r0
 8008b68:	2101      	movs	r1, #1
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f001 f842 	bl	8009bf4 <__i2b>
 8008b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	4606      	mov	r6, r0
 8008b76:	f340 8088 	ble.w	8008c8a <_dtoa_r+0x8c2>
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	4601      	mov	r1, r0
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f001 f8f8 	bl	8009d74 <__pow5mult>
 8008b84:	9b06      	ldr	r3, [sp, #24]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	4606      	mov	r6, r0
 8008b8a:	f340 8081 	ble.w	8008c90 <_dtoa_r+0x8c8>
 8008b8e:	f04f 0800 	mov.w	r8, #0
 8008b92:	6933      	ldr	r3, [r6, #16]
 8008b94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b98:	6918      	ldr	r0, [r3, #16]
 8008b9a:	f000 ffdb 	bl	8009b54 <__hi0bits>
 8008b9e:	f1c0 0020 	rsb	r0, r0, #32
 8008ba2:	9b05      	ldr	r3, [sp, #20]
 8008ba4:	4418      	add	r0, r3
 8008ba6:	f010 001f 	ands.w	r0, r0, #31
 8008baa:	f000 8092 	beq.w	8008cd2 <_dtoa_r+0x90a>
 8008bae:	f1c0 0320 	rsb	r3, r0, #32
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	f340 808a 	ble.w	8008ccc <_dtoa_r+0x904>
 8008bb8:	f1c0 001c 	rsb	r0, r0, #28
 8008bbc:	9b04      	ldr	r3, [sp, #16]
 8008bbe:	4403      	add	r3, r0
 8008bc0:	9304      	str	r3, [sp, #16]
 8008bc2:	9b05      	ldr	r3, [sp, #20]
 8008bc4:	4403      	add	r3, r0
 8008bc6:	4405      	add	r5, r0
 8008bc8:	9305      	str	r3, [sp, #20]
 8008bca:	9b04      	ldr	r3, [sp, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	dd07      	ble.n	8008be0 <_dtoa_r+0x818>
 8008bd0:	ee18 1a10 	vmov	r1, s16
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f001 f926 	bl	8009e28 <__lshift>
 8008bdc:	ee08 0a10 	vmov	s16, r0
 8008be0:	9b05      	ldr	r3, [sp, #20]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	dd05      	ble.n	8008bf2 <_dtoa_r+0x82a>
 8008be6:	4631      	mov	r1, r6
 8008be8:	461a      	mov	r2, r3
 8008bea:	4620      	mov	r0, r4
 8008bec:	f001 f91c 	bl	8009e28 <__lshift>
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d06e      	beq.n	8008cd6 <_dtoa_r+0x90e>
 8008bf8:	ee18 0a10 	vmov	r0, s16
 8008bfc:	4631      	mov	r1, r6
 8008bfe:	f001 f983 	bl	8009f08 <__mcmp>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	da67      	bge.n	8008cd6 <_dtoa_r+0x90e>
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	ee18 1a10 	vmov	r1, s16
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	220a      	movs	r2, #10
 8008c12:	2300      	movs	r3, #0
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 ff0d 	bl	8009a34 <__multadd>
 8008c1a:	9b08      	ldr	r3, [sp, #32]
 8008c1c:	ee08 0a10 	vmov	s16, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 81b1 	beq.w	8008f88 <_dtoa_r+0xbc0>
 8008c26:	2300      	movs	r3, #0
 8008c28:	4639      	mov	r1, r7
 8008c2a:	220a      	movs	r2, #10
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 ff01 	bl	8009a34 <__multadd>
 8008c32:	9b02      	ldr	r3, [sp, #8]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	4607      	mov	r7, r0
 8008c38:	f300 808e 	bgt.w	8008d58 <_dtoa_r+0x990>
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	dc51      	bgt.n	8008ce6 <_dtoa_r+0x91e>
 8008c42:	e089      	b.n	8008d58 <_dtoa_r+0x990>
 8008c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c4a:	e74b      	b.n	8008ae4 <_dtoa_r+0x71c>
 8008c4c:	9b03      	ldr	r3, [sp, #12]
 8008c4e:	1e5e      	subs	r6, r3, #1
 8008c50:	9b07      	ldr	r3, [sp, #28]
 8008c52:	42b3      	cmp	r3, r6
 8008c54:	bfbf      	itttt	lt
 8008c56:	9b07      	ldrlt	r3, [sp, #28]
 8008c58:	9607      	strlt	r6, [sp, #28]
 8008c5a:	1af2      	sublt	r2, r6, r3
 8008c5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c5e:	bfb6      	itet	lt
 8008c60:	189b      	addlt	r3, r3, r2
 8008c62:	1b9e      	subge	r6, r3, r6
 8008c64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008c66:	9b03      	ldr	r3, [sp, #12]
 8008c68:	bfb8      	it	lt
 8008c6a:	2600      	movlt	r6, #0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bfb7      	itett	lt
 8008c70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008c74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008c78:	1a9d      	sublt	r5, r3, r2
 8008c7a:	2300      	movlt	r3, #0
 8008c7c:	e734      	b.n	8008ae8 <_dtoa_r+0x720>
 8008c7e:	9e07      	ldr	r6, [sp, #28]
 8008c80:	9d04      	ldr	r5, [sp, #16]
 8008c82:	9f08      	ldr	r7, [sp, #32]
 8008c84:	e73b      	b.n	8008afe <_dtoa_r+0x736>
 8008c86:	9a07      	ldr	r2, [sp, #28]
 8008c88:	e767      	b.n	8008b5a <_dtoa_r+0x792>
 8008c8a:	9b06      	ldr	r3, [sp, #24]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	dc18      	bgt.n	8008cc2 <_dtoa_r+0x8fa>
 8008c90:	f1ba 0f00 	cmp.w	sl, #0
 8008c94:	d115      	bne.n	8008cc2 <_dtoa_r+0x8fa>
 8008c96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c9a:	b993      	cbnz	r3, 8008cc2 <_dtoa_r+0x8fa>
 8008c9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ca0:	0d1b      	lsrs	r3, r3, #20
 8008ca2:	051b      	lsls	r3, r3, #20
 8008ca4:	b183      	cbz	r3, 8008cc8 <_dtoa_r+0x900>
 8008ca6:	9b04      	ldr	r3, [sp, #16]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	9304      	str	r3, [sp, #16]
 8008cac:	9b05      	ldr	r3, [sp, #20]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	9305      	str	r3, [sp, #20]
 8008cb2:	f04f 0801 	mov.w	r8, #1
 8008cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f47f af6a 	bne.w	8008b92 <_dtoa_r+0x7ca>
 8008cbe:	2001      	movs	r0, #1
 8008cc0:	e76f      	b.n	8008ba2 <_dtoa_r+0x7da>
 8008cc2:	f04f 0800 	mov.w	r8, #0
 8008cc6:	e7f6      	b.n	8008cb6 <_dtoa_r+0x8ee>
 8008cc8:	4698      	mov	r8, r3
 8008cca:	e7f4      	b.n	8008cb6 <_dtoa_r+0x8ee>
 8008ccc:	f43f af7d 	beq.w	8008bca <_dtoa_r+0x802>
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	301c      	adds	r0, #28
 8008cd4:	e772      	b.n	8008bbc <_dtoa_r+0x7f4>
 8008cd6:	9b03      	ldr	r3, [sp, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	dc37      	bgt.n	8008d4c <_dtoa_r+0x984>
 8008cdc:	9b06      	ldr	r3, [sp, #24]
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	dd34      	ble.n	8008d4c <_dtoa_r+0x984>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	9302      	str	r3, [sp, #8]
 8008ce6:	9b02      	ldr	r3, [sp, #8]
 8008ce8:	b96b      	cbnz	r3, 8008d06 <_dtoa_r+0x93e>
 8008cea:	4631      	mov	r1, r6
 8008cec:	2205      	movs	r2, #5
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 fea0 	bl	8009a34 <__multadd>
 8008cf4:	4601      	mov	r1, r0
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	ee18 0a10 	vmov	r0, s16
 8008cfc:	f001 f904 	bl	8009f08 <__mcmp>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	f73f adbb 	bgt.w	800887c <_dtoa_r+0x4b4>
 8008d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d08:	9d01      	ldr	r5, [sp, #4]
 8008d0a:	43db      	mvns	r3, r3
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	f04f 0800 	mov.w	r8, #0
 8008d12:	4631      	mov	r1, r6
 8008d14:	4620      	mov	r0, r4
 8008d16:	f000 fe6b 	bl	80099f0 <_Bfree>
 8008d1a:	2f00      	cmp	r7, #0
 8008d1c:	f43f aea4 	beq.w	8008a68 <_dtoa_r+0x6a0>
 8008d20:	f1b8 0f00 	cmp.w	r8, #0
 8008d24:	d005      	beq.n	8008d32 <_dtoa_r+0x96a>
 8008d26:	45b8      	cmp	r8, r7
 8008d28:	d003      	beq.n	8008d32 <_dtoa_r+0x96a>
 8008d2a:	4641      	mov	r1, r8
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f000 fe5f 	bl	80099f0 <_Bfree>
 8008d32:	4639      	mov	r1, r7
 8008d34:	4620      	mov	r0, r4
 8008d36:	f000 fe5b 	bl	80099f0 <_Bfree>
 8008d3a:	e695      	b.n	8008a68 <_dtoa_r+0x6a0>
 8008d3c:	2600      	movs	r6, #0
 8008d3e:	4637      	mov	r7, r6
 8008d40:	e7e1      	b.n	8008d06 <_dtoa_r+0x93e>
 8008d42:	9700      	str	r7, [sp, #0]
 8008d44:	4637      	mov	r7, r6
 8008d46:	e599      	b.n	800887c <_dtoa_r+0x4b4>
 8008d48:	40240000 	.word	0x40240000
 8008d4c:	9b08      	ldr	r3, [sp, #32]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 80ca 	beq.w	8008ee8 <_dtoa_r+0xb20>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	9302      	str	r3, [sp, #8]
 8008d58:	2d00      	cmp	r5, #0
 8008d5a:	dd05      	ble.n	8008d68 <_dtoa_r+0x9a0>
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	462a      	mov	r2, r5
 8008d60:	4620      	mov	r0, r4
 8008d62:	f001 f861 	bl	8009e28 <__lshift>
 8008d66:	4607      	mov	r7, r0
 8008d68:	f1b8 0f00 	cmp.w	r8, #0
 8008d6c:	d05b      	beq.n	8008e26 <_dtoa_r+0xa5e>
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 fdfd 	bl	8009970 <_Balloc>
 8008d76:	4605      	mov	r5, r0
 8008d78:	b928      	cbnz	r0, 8008d86 <_dtoa_r+0x9be>
 8008d7a:	4b87      	ldr	r3, [pc, #540]	; (8008f98 <_dtoa_r+0xbd0>)
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d82:	f7ff bb3b 	b.w	80083fc <_dtoa_r+0x34>
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	3202      	adds	r2, #2
 8008d8a:	0092      	lsls	r2, r2, #2
 8008d8c:	f107 010c 	add.w	r1, r7, #12
 8008d90:	300c      	adds	r0, #12
 8008d92:	f7fd fb28 	bl	80063e6 <memcpy>
 8008d96:	2201      	movs	r2, #1
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f001 f844 	bl	8009e28 <__lshift>
 8008da0:	9b01      	ldr	r3, [sp, #4]
 8008da2:	f103 0901 	add.w	r9, r3, #1
 8008da6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008daa:	4413      	add	r3, r2
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	f00a 0301 	and.w	r3, sl, #1
 8008db2:	46b8      	mov	r8, r7
 8008db4:	9304      	str	r3, [sp, #16]
 8008db6:	4607      	mov	r7, r0
 8008db8:	4631      	mov	r1, r6
 8008dba:	ee18 0a10 	vmov	r0, s16
 8008dbe:	f7ff fa77 	bl	80082b0 <quorem>
 8008dc2:	4641      	mov	r1, r8
 8008dc4:	9002      	str	r0, [sp, #8]
 8008dc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008dca:	ee18 0a10 	vmov	r0, s16
 8008dce:	f001 f89b 	bl	8009f08 <__mcmp>
 8008dd2:	463a      	mov	r2, r7
 8008dd4:	9003      	str	r0, [sp, #12]
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f001 f8b1 	bl	8009f40 <__mdiff>
 8008dde:	68c2      	ldr	r2, [r0, #12]
 8008de0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008de4:	4605      	mov	r5, r0
 8008de6:	bb02      	cbnz	r2, 8008e2a <_dtoa_r+0xa62>
 8008de8:	4601      	mov	r1, r0
 8008dea:	ee18 0a10 	vmov	r0, s16
 8008dee:	f001 f88b 	bl	8009f08 <__mcmp>
 8008df2:	4602      	mov	r2, r0
 8008df4:	4629      	mov	r1, r5
 8008df6:	4620      	mov	r0, r4
 8008df8:	9207      	str	r2, [sp, #28]
 8008dfa:	f000 fdf9 	bl	80099f0 <_Bfree>
 8008dfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008e02:	ea43 0102 	orr.w	r1, r3, r2
 8008e06:	9b04      	ldr	r3, [sp, #16]
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	464d      	mov	r5, r9
 8008e0c:	d10f      	bne.n	8008e2e <_dtoa_r+0xa66>
 8008e0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e12:	d02a      	beq.n	8008e6a <_dtoa_r+0xaa2>
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	dd02      	ble.n	8008e20 <_dtoa_r+0xa58>
 8008e1a:	9b02      	ldr	r3, [sp, #8]
 8008e1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008e20:	f88b a000 	strb.w	sl, [fp]
 8008e24:	e775      	b.n	8008d12 <_dtoa_r+0x94a>
 8008e26:	4638      	mov	r0, r7
 8008e28:	e7ba      	b.n	8008da0 <_dtoa_r+0x9d8>
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	e7e2      	b.n	8008df4 <_dtoa_r+0xa2c>
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	db04      	blt.n	8008e3e <_dtoa_r+0xa76>
 8008e34:	9906      	ldr	r1, [sp, #24]
 8008e36:	430b      	orrs	r3, r1
 8008e38:	9904      	ldr	r1, [sp, #16]
 8008e3a:	430b      	orrs	r3, r1
 8008e3c:	d122      	bne.n	8008e84 <_dtoa_r+0xabc>
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	ddee      	ble.n	8008e20 <_dtoa_r+0xa58>
 8008e42:	ee18 1a10 	vmov	r1, s16
 8008e46:	2201      	movs	r2, #1
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 ffed 	bl	8009e28 <__lshift>
 8008e4e:	4631      	mov	r1, r6
 8008e50:	ee08 0a10 	vmov	s16, r0
 8008e54:	f001 f858 	bl	8009f08 <__mcmp>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	dc03      	bgt.n	8008e64 <_dtoa_r+0xa9c>
 8008e5c:	d1e0      	bne.n	8008e20 <_dtoa_r+0xa58>
 8008e5e:	f01a 0f01 	tst.w	sl, #1
 8008e62:	d0dd      	beq.n	8008e20 <_dtoa_r+0xa58>
 8008e64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e68:	d1d7      	bne.n	8008e1a <_dtoa_r+0xa52>
 8008e6a:	2339      	movs	r3, #57	; 0x39
 8008e6c:	f88b 3000 	strb.w	r3, [fp]
 8008e70:	462b      	mov	r3, r5
 8008e72:	461d      	mov	r5, r3
 8008e74:	3b01      	subs	r3, #1
 8008e76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e7a:	2a39      	cmp	r2, #57	; 0x39
 8008e7c:	d071      	beq.n	8008f62 <_dtoa_r+0xb9a>
 8008e7e:	3201      	adds	r2, #1
 8008e80:	701a      	strb	r2, [r3, #0]
 8008e82:	e746      	b.n	8008d12 <_dtoa_r+0x94a>
 8008e84:	2a00      	cmp	r2, #0
 8008e86:	dd07      	ble.n	8008e98 <_dtoa_r+0xad0>
 8008e88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e8c:	d0ed      	beq.n	8008e6a <_dtoa_r+0xaa2>
 8008e8e:	f10a 0301 	add.w	r3, sl, #1
 8008e92:	f88b 3000 	strb.w	r3, [fp]
 8008e96:	e73c      	b.n	8008d12 <_dtoa_r+0x94a>
 8008e98:	9b05      	ldr	r3, [sp, #20]
 8008e9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008e9e:	4599      	cmp	r9, r3
 8008ea0:	d047      	beq.n	8008f32 <_dtoa_r+0xb6a>
 8008ea2:	ee18 1a10 	vmov	r1, s16
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	220a      	movs	r2, #10
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 fdc2 	bl	8009a34 <__multadd>
 8008eb0:	45b8      	cmp	r8, r7
 8008eb2:	ee08 0a10 	vmov	s16, r0
 8008eb6:	f04f 0300 	mov.w	r3, #0
 8008eba:	f04f 020a 	mov.w	r2, #10
 8008ebe:	4641      	mov	r1, r8
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	d106      	bne.n	8008ed2 <_dtoa_r+0xb0a>
 8008ec4:	f000 fdb6 	bl	8009a34 <__multadd>
 8008ec8:	4680      	mov	r8, r0
 8008eca:	4607      	mov	r7, r0
 8008ecc:	f109 0901 	add.w	r9, r9, #1
 8008ed0:	e772      	b.n	8008db8 <_dtoa_r+0x9f0>
 8008ed2:	f000 fdaf 	bl	8009a34 <__multadd>
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	4680      	mov	r8, r0
 8008eda:	2300      	movs	r3, #0
 8008edc:	220a      	movs	r2, #10
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 fda8 	bl	8009a34 <__multadd>
 8008ee4:	4607      	mov	r7, r0
 8008ee6:	e7f1      	b.n	8008ecc <_dtoa_r+0xb04>
 8008ee8:	9b03      	ldr	r3, [sp, #12]
 8008eea:	9302      	str	r3, [sp, #8]
 8008eec:	9d01      	ldr	r5, [sp, #4]
 8008eee:	ee18 0a10 	vmov	r0, s16
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	f7ff f9dc 	bl	80082b0 <quorem>
 8008ef8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008efc:	9b01      	ldr	r3, [sp, #4]
 8008efe:	f805 ab01 	strb.w	sl, [r5], #1
 8008f02:	1aea      	subs	r2, r5, r3
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	4293      	cmp	r3, r2
 8008f08:	dd09      	ble.n	8008f1e <_dtoa_r+0xb56>
 8008f0a:	ee18 1a10 	vmov	r1, s16
 8008f0e:	2300      	movs	r3, #0
 8008f10:	220a      	movs	r2, #10
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 fd8e 	bl	8009a34 <__multadd>
 8008f18:	ee08 0a10 	vmov	s16, r0
 8008f1c:	e7e7      	b.n	8008eee <_dtoa_r+0xb26>
 8008f1e:	9b02      	ldr	r3, [sp, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	bfc8      	it	gt
 8008f24:	461d      	movgt	r5, r3
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	bfd8      	it	le
 8008f2a:	2501      	movle	r5, #1
 8008f2c:	441d      	add	r5, r3
 8008f2e:	f04f 0800 	mov.w	r8, #0
 8008f32:	ee18 1a10 	vmov	r1, s16
 8008f36:	2201      	movs	r2, #1
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 ff75 	bl	8009e28 <__lshift>
 8008f3e:	4631      	mov	r1, r6
 8008f40:	ee08 0a10 	vmov	s16, r0
 8008f44:	f000 ffe0 	bl	8009f08 <__mcmp>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	dc91      	bgt.n	8008e70 <_dtoa_r+0xaa8>
 8008f4c:	d102      	bne.n	8008f54 <_dtoa_r+0xb8c>
 8008f4e:	f01a 0f01 	tst.w	sl, #1
 8008f52:	d18d      	bne.n	8008e70 <_dtoa_r+0xaa8>
 8008f54:	462b      	mov	r3, r5
 8008f56:	461d      	mov	r5, r3
 8008f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f5c:	2a30      	cmp	r2, #48	; 0x30
 8008f5e:	d0fa      	beq.n	8008f56 <_dtoa_r+0xb8e>
 8008f60:	e6d7      	b.n	8008d12 <_dtoa_r+0x94a>
 8008f62:	9a01      	ldr	r2, [sp, #4]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d184      	bne.n	8008e72 <_dtoa_r+0xaaa>
 8008f68:	9b00      	ldr	r3, [sp, #0]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	2331      	movs	r3, #49	; 0x31
 8008f70:	7013      	strb	r3, [r2, #0]
 8008f72:	e6ce      	b.n	8008d12 <_dtoa_r+0x94a>
 8008f74:	4b09      	ldr	r3, [pc, #36]	; (8008f9c <_dtoa_r+0xbd4>)
 8008f76:	f7ff ba95 	b.w	80084a4 <_dtoa_r+0xdc>
 8008f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f47f aa6e 	bne.w	800845e <_dtoa_r+0x96>
 8008f82:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <_dtoa_r+0xbd8>)
 8008f84:	f7ff ba8e 	b.w	80084a4 <_dtoa_r+0xdc>
 8008f88:	9b02      	ldr	r3, [sp, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	dcae      	bgt.n	8008eec <_dtoa_r+0xb24>
 8008f8e:	9b06      	ldr	r3, [sp, #24]
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	f73f aea8 	bgt.w	8008ce6 <_dtoa_r+0x91e>
 8008f96:	e7a9      	b.n	8008eec <_dtoa_r+0xb24>
 8008f98:	0800ebac 	.word	0x0800ebac
 8008f9c:	0800e970 	.word	0x0800e970
 8008fa0:	0800eb2d 	.word	0x0800eb2d

08008fa4 <__sflush_r>:
 8008fa4:	898a      	ldrh	r2, [r1, #12]
 8008fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008faa:	4605      	mov	r5, r0
 8008fac:	0710      	lsls	r0, r2, #28
 8008fae:	460c      	mov	r4, r1
 8008fb0:	d458      	bmi.n	8009064 <__sflush_r+0xc0>
 8008fb2:	684b      	ldr	r3, [r1, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	dc05      	bgt.n	8008fc4 <__sflush_r+0x20>
 8008fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	dc02      	bgt.n	8008fc4 <__sflush_r+0x20>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fc6:	2e00      	cmp	r6, #0
 8008fc8:	d0f9      	beq.n	8008fbe <__sflush_r+0x1a>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fd0:	682f      	ldr	r7, [r5, #0]
 8008fd2:	602b      	str	r3, [r5, #0]
 8008fd4:	d032      	beq.n	800903c <__sflush_r+0x98>
 8008fd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	075a      	lsls	r2, r3, #29
 8008fdc:	d505      	bpl.n	8008fea <__sflush_r+0x46>
 8008fde:	6863      	ldr	r3, [r4, #4]
 8008fe0:	1ac0      	subs	r0, r0, r3
 8008fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fe4:	b10b      	cbz	r3, 8008fea <__sflush_r+0x46>
 8008fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fe8:	1ac0      	subs	r0, r0, r3
 8008fea:	2300      	movs	r3, #0
 8008fec:	4602      	mov	r2, r0
 8008fee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ff0:	6a21      	ldr	r1, [r4, #32]
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	47b0      	blx	r6
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	d106      	bne.n	800900a <__sflush_r+0x66>
 8008ffc:	6829      	ldr	r1, [r5, #0]
 8008ffe:	291d      	cmp	r1, #29
 8009000:	d82c      	bhi.n	800905c <__sflush_r+0xb8>
 8009002:	4a2a      	ldr	r2, [pc, #168]	; (80090ac <__sflush_r+0x108>)
 8009004:	40ca      	lsrs	r2, r1
 8009006:	07d6      	lsls	r6, r2, #31
 8009008:	d528      	bpl.n	800905c <__sflush_r+0xb8>
 800900a:	2200      	movs	r2, #0
 800900c:	6062      	str	r2, [r4, #4]
 800900e:	04d9      	lsls	r1, r3, #19
 8009010:	6922      	ldr	r2, [r4, #16]
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	d504      	bpl.n	8009020 <__sflush_r+0x7c>
 8009016:	1c42      	adds	r2, r0, #1
 8009018:	d101      	bne.n	800901e <__sflush_r+0x7a>
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	b903      	cbnz	r3, 8009020 <__sflush_r+0x7c>
 800901e:	6560      	str	r0, [r4, #84]	; 0x54
 8009020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009022:	602f      	str	r7, [r5, #0]
 8009024:	2900      	cmp	r1, #0
 8009026:	d0ca      	beq.n	8008fbe <__sflush_r+0x1a>
 8009028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800902c:	4299      	cmp	r1, r3
 800902e:	d002      	beq.n	8009036 <__sflush_r+0x92>
 8009030:	4628      	mov	r0, r5
 8009032:	f001 f975 	bl	800a320 <_free_r>
 8009036:	2000      	movs	r0, #0
 8009038:	6360      	str	r0, [r4, #52]	; 0x34
 800903a:	e7c1      	b.n	8008fc0 <__sflush_r+0x1c>
 800903c:	6a21      	ldr	r1, [r4, #32]
 800903e:	2301      	movs	r3, #1
 8009040:	4628      	mov	r0, r5
 8009042:	47b0      	blx	r6
 8009044:	1c41      	adds	r1, r0, #1
 8009046:	d1c7      	bne.n	8008fd8 <__sflush_r+0x34>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0c4      	beq.n	8008fd8 <__sflush_r+0x34>
 800904e:	2b1d      	cmp	r3, #29
 8009050:	d001      	beq.n	8009056 <__sflush_r+0xb2>
 8009052:	2b16      	cmp	r3, #22
 8009054:	d101      	bne.n	800905a <__sflush_r+0xb6>
 8009056:	602f      	str	r7, [r5, #0]
 8009058:	e7b1      	b.n	8008fbe <__sflush_r+0x1a>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	e7ad      	b.n	8008fc0 <__sflush_r+0x1c>
 8009064:	690f      	ldr	r7, [r1, #16]
 8009066:	2f00      	cmp	r7, #0
 8009068:	d0a9      	beq.n	8008fbe <__sflush_r+0x1a>
 800906a:	0793      	lsls	r3, r2, #30
 800906c:	680e      	ldr	r6, [r1, #0]
 800906e:	bf08      	it	eq
 8009070:	694b      	ldreq	r3, [r1, #20]
 8009072:	600f      	str	r7, [r1, #0]
 8009074:	bf18      	it	ne
 8009076:	2300      	movne	r3, #0
 8009078:	eba6 0807 	sub.w	r8, r6, r7
 800907c:	608b      	str	r3, [r1, #8]
 800907e:	f1b8 0f00 	cmp.w	r8, #0
 8009082:	dd9c      	ble.n	8008fbe <__sflush_r+0x1a>
 8009084:	6a21      	ldr	r1, [r4, #32]
 8009086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009088:	4643      	mov	r3, r8
 800908a:	463a      	mov	r2, r7
 800908c:	4628      	mov	r0, r5
 800908e:	47b0      	blx	r6
 8009090:	2800      	cmp	r0, #0
 8009092:	dc06      	bgt.n	80090a2 <__sflush_r+0xfe>
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	e78e      	b.n	8008fc0 <__sflush_r+0x1c>
 80090a2:	4407      	add	r7, r0
 80090a4:	eba8 0800 	sub.w	r8, r8, r0
 80090a8:	e7e9      	b.n	800907e <__sflush_r+0xda>
 80090aa:	bf00      	nop
 80090ac:	20400001 	.word	0x20400001

080090b0 <_fflush_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	690b      	ldr	r3, [r1, #16]
 80090b4:	4605      	mov	r5, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	b913      	cbnz	r3, 80090c0 <_fflush_r+0x10>
 80090ba:	2500      	movs	r5, #0
 80090bc:	4628      	mov	r0, r5
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	b118      	cbz	r0, 80090ca <_fflush_r+0x1a>
 80090c2:	6983      	ldr	r3, [r0, #24]
 80090c4:	b90b      	cbnz	r3, 80090ca <_fflush_r+0x1a>
 80090c6:	f7fd f8c9 	bl	800625c <__sinit>
 80090ca:	4b14      	ldr	r3, [pc, #80]	; (800911c <_fflush_r+0x6c>)
 80090cc:	429c      	cmp	r4, r3
 80090ce:	d11b      	bne.n	8009108 <_fflush_r+0x58>
 80090d0:	686c      	ldr	r4, [r5, #4]
 80090d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0ef      	beq.n	80090ba <_fflush_r+0xa>
 80090da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090dc:	07d0      	lsls	r0, r2, #31
 80090de:	d404      	bmi.n	80090ea <_fflush_r+0x3a>
 80090e0:	0599      	lsls	r1, r3, #22
 80090e2:	d402      	bmi.n	80090ea <_fflush_r+0x3a>
 80090e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090e6:	f7fd f97c 	bl	80063e2 <__retarget_lock_acquire_recursive>
 80090ea:	4628      	mov	r0, r5
 80090ec:	4621      	mov	r1, r4
 80090ee:	f7ff ff59 	bl	8008fa4 <__sflush_r>
 80090f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090f4:	07da      	lsls	r2, r3, #31
 80090f6:	4605      	mov	r5, r0
 80090f8:	d4e0      	bmi.n	80090bc <_fflush_r+0xc>
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	059b      	lsls	r3, r3, #22
 80090fe:	d4dd      	bmi.n	80090bc <_fflush_r+0xc>
 8009100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009102:	f7fd f96f 	bl	80063e4 <__retarget_lock_release_recursive>
 8009106:	e7d9      	b.n	80090bc <_fflush_r+0xc>
 8009108:	4b05      	ldr	r3, [pc, #20]	; (8009120 <_fflush_r+0x70>)
 800910a:	429c      	cmp	r4, r3
 800910c:	d101      	bne.n	8009112 <_fflush_r+0x62>
 800910e:	68ac      	ldr	r4, [r5, #8]
 8009110:	e7df      	b.n	80090d2 <_fflush_r+0x22>
 8009112:	4b04      	ldr	r3, [pc, #16]	; (8009124 <_fflush_r+0x74>)
 8009114:	429c      	cmp	r4, r3
 8009116:	bf08      	it	eq
 8009118:	68ec      	ldreq	r4, [r5, #12]
 800911a:	e7da      	b.n	80090d2 <_fflush_r+0x22>
 800911c:	0800e91c 	.word	0x0800e91c
 8009120:	0800e93c 	.word	0x0800e93c
 8009124:	0800e8fc 	.word	0x0800e8fc

08009128 <fiprintf>:
 8009128:	b40e      	push	{r1, r2, r3}
 800912a:	b503      	push	{r0, r1, lr}
 800912c:	4601      	mov	r1, r0
 800912e:	ab03      	add	r3, sp, #12
 8009130:	4805      	ldr	r0, [pc, #20]	; (8009148 <fiprintf+0x20>)
 8009132:	f853 2b04 	ldr.w	r2, [r3], #4
 8009136:	6800      	ldr	r0, [r0, #0]
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	f001 fac3 	bl	800a6c4 <_vfiprintf_r>
 800913e:	b002      	add	sp, #8
 8009140:	f85d eb04 	ldr.w	lr, [sp], #4
 8009144:	b003      	add	sp, #12
 8009146:	4770      	bx	lr
 8009148:	20000104 	.word	0x20000104

0800914c <rshift>:
 800914c:	6903      	ldr	r3, [r0, #16]
 800914e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009152:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009156:	ea4f 1261 	mov.w	r2, r1, asr #5
 800915a:	f100 0414 	add.w	r4, r0, #20
 800915e:	dd45      	ble.n	80091ec <rshift+0xa0>
 8009160:	f011 011f 	ands.w	r1, r1, #31
 8009164:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009168:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800916c:	d10c      	bne.n	8009188 <rshift+0x3c>
 800916e:	f100 0710 	add.w	r7, r0, #16
 8009172:	4629      	mov	r1, r5
 8009174:	42b1      	cmp	r1, r6
 8009176:	d334      	bcc.n	80091e2 <rshift+0x96>
 8009178:	1a9b      	subs	r3, r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	1eea      	subs	r2, r5, #3
 800917e:	4296      	cmp	r6, r2
 8009180:	bf38      	it	cc
 8009182:	2300      	movcc	r3, #0
 8009184:	4423      	add	r3, r4
 8009186:	e015      	b.n	80091b4 <rshift+0x68>
 8009188:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800918c:	f1c1 0820 	rsb	r8, r1, #32
 8009190:	40cf      	lsrs	r7, r1
 8009192:	f105 0e04 	add.w	lr, r5, #4
 8009196:	46a1      	mov	r9, r4
 8009198:	4576      	cmp	r6, lr
 800919a:	46f4      	mov	ip, lr
 800919c:	d815      	bhi.n	80091ca <rshift+0x7e>
 800919e:	1a9a      	subs	r2, r3, r2
 80091a0:	0092      	lsls	r2, r2, #2
 80091a2:	3a04      	subs	r2, #4
 80091a4:	3501      	adds	r5, #1
 80091a6:	42ae      	cmp	r6, r5
 80091a8:	bf38      	it	cc
 80091aa:	2200      	movcc	r2, #0
 80091ac:	18a3      	adds	r3, r4, r2
 80091ae:	50a7      	str	r7, [r4, r2]
 80091b0:	b107      	cbz	r7, 80091b4 <rshift+0x68>
 80091b2:	3304      	adds	r3, #4
 80091b4:	1b1a      	subs	r2, r3, r4
 80091b6:	42a3      	cmp	r3, r4
 80091b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091bc:	bf08      	it	eq
 80091be:	2300      	moveq	r3, #0
 80091c0:	6102      	str	r2, [r0, #16]
 80091c2:	bf08      	it	eq
 80091c4:	6143      	streq	r3, [r0, #20]
 80091c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091ca:	f8dc c000 	ldr.w	ip, [ip]
 80091ce:	fa0c fc08 	lsl.w	ip, ip, r8
 80091d2:	ea4c 0707 	orr.w	r7, ip, r7
 80091d6:	f849 7b04 	str.w	r7, [r9], #4
 80091da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091de:	40cf      	lsrs	r7, r1
 80091e0:	e7da      	b.n	8009198 <rshift+0x4c>
 80091e2:	f851 cb04 	ldr.w	ip, [r1], #4
 80091e6:	f847 cf04 	str.w	ip, [r7, #4]!
 80091ea:	e7c3      	b.n	8009174 <rshift+0x28>
 80091ec:	4623      	mov	r3, r4
 80091ee:	e7e1      	b.n	80091b4 <rshift+0x68>

080091f0 <__hexdig_fun>:
 80091f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80091f4:	2b09      	cmp	r3, #9
 80091f6:	d802      	bhi.n	80091fe <__hexdig_fun+0xe>
 80091f8:	3820      	subs	r0, #32
 80091fa:	b2c0      	uxtb	r0, r0
 80091fc:	4770      	bx	lr
 80091fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009202:	2b05      	cmp	r3, #5
 8009204:	d801      	bhi.n	800920a <__hexdig_fun+0x1a>
 8009206:	3847      	subs	r0, #71	; 0x47
 8009208:	e7f7      	b.n	80091fa <__hexdig_fun+0xa>
 800920a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800920e:	2b05      	cmp	r3, #5
 8009210:	d801      	bhi.n	8009216 <__hexdig_fun+0x26>
 8009212:	3827      	subs	r0, #39	; 0x27
 8009214:	e7f1      	b.n	80091fa <__hexdig_fun+0xa>
 8009216:	2000      	movs	r0, #0
 8009218:	4770      	bx	lr
	...

0800921c <__gethex>:
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	ed2d 8b02 	vpush	{d8}
 8009224:	b089      	sub	sp, #36	; 0x24
 8009226:	ee08 0a10 	vmov	s16, r0
 800922a:	9304      	str	r3, [sp, #16]
 800922c:	4bb4      	ldr	r3, [pc, #720]	; (8009500 <__gethex+0x2e4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	4618      	mov	r0, r3
 8009234:	468b      	mov	fp, r1
 8009236:	4690      	mov	r8, r2
 8009238:	f7f6 ffca 	bl	80001d0 <strlen>
 800923c:	9b01      	ldr	r3, [sp, #4]
 800923e:	f8db 2000 	ldr.w	r2, [fp]
 8009242:	4403      	add	r3, r0
 8009244:	4682      	mov	sl, r0
 8009246:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800924a:	9305      	str	r3, [sp, #20]
 800924c:	1c93      	adds	r3, r2, #2
 800924e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009252:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009256:	32fe      	adds	r2, #254	; 0xfe
 8009258:	18d1      	adds	r1, r2, r3
 800925a:	461f      	mov	r7, r3
 800925c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009260:	9100      	str	r1, [sp, #0]
 8009262:	2830      	cmp	r0, #48	; 0x30
 8009264:	d0f8      	beq.n	8009258 <__gethex+0x3c>
 8009266:	f7ff ffc3 	bl	80091f0 <__hexdig_fun>
 800926a:	4604      	mov	r4, r0
 800926c:	2800      	cmp	r0, #0
 800926e:	d13a      	bne.n	80092e6 <__gethex+0xca>
 8009270:	9901      	ldr	r1, [sp, #4]
 8009272:	4652      	mov	r2, sl
 8009274:	4638      	mov	r0, r7
 8009276:	f001 fb6f 	bl	800a958 <strncmp>
 800927a:	4605      	mov	r5, r0
 800927c:	2800      	cmp	r0, #0
 800927e:	d168      	bne.n	8009352 <__gethex+0x136>
 8009280:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009284:	eb07 060a 	add.w	r6, r7, sl
 8009288:	f7ff ffb2 	bl	80091f0 <__hexdig_fun>
 800928c:	2800      	cmp	r0, #0
 800928e:	d062      	beq.n	8009356 <__gethex+0x13a>
 8009290:	4633      	mov	r3, r6
 8009292:	7818      	ldrb	r0, [r3, #0]
 8009294:	2830      	cmp	r0, #48	; 0x30
 8009296:	461f      	mov	r7, r3
 8009298:	f103 0301 	add.w	r3, r3, #1
 800929c:	d0f9      	beq.n	8009292 <__gethex+0x76>
 800929e:	f7ff ffa7 	bl	80091f0 <__hexdig_fun>
 80092a2:	2301      	movs	r3, #1
 80092a4:	fab0 f480 	clz	r4, r0
 80092a8:	0964      	lsrs	r4, r4, #5
 80092aa:	4635      	mov	r5, r6
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	463a      	mov	r2, r7
 80092b0:	4616      	mov	r6, r2
 80092b2:	3201      	adds	r2, #1
 80092b4:	7830      	ldrb	r0, [r6, #0]
 80092b6:	f7ff ff9b 	bl	80091f0 <__hexdig_fun>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d1f8      	bne.n	80092b0 <__gethex+0x94>
 80092be:	9901      	ldr	r1, [sp, #4]
 80092c0:	4652      	mov	r2, sl
 80092c2:	4630      	mov	r0, r6
 80092c4:	f001 fb48 	bl	800a958 <strncmp>
 80092c8:	b980      	cbnz	r0, 80092ec <__gethex+0xd0>
 80092ca:	b94d      	cbnz	r5, 80092e0 <__gethex+0xc4>
 80092cc:	eb06 050a 	add.w	r5, r6, sl
 80092d0:	462a      	mov	r2, r5
 80092d2:	4616      	mov	r6, r2
 80092d4:	3201      	adds	r2, #1
 80092d6:	7830      	ldrb	r0, [r6, #0]
 80092d8:	f7ff ff8a 	bl	80091f0 <__hexdig_fun>
 80092dc:	2800      	cmp	r0, #0
 80092de:	d1f8      	bne.n	80092d2 <__gethex+0xb6>
 80092e0:	1bad      	subs	r5, r5, r6
 80092e2:	00ad      	lsls	r5, r5, #2
 80092e4:	e004      	b.n	80092f0 <__gethex+0xd4>
 80092e6:	2400      	movs	r4, #0
 80092e8:	4625      	mov	r5, r4
 80092ea:	e7e0      	b.n	80092ae <__gethex+0x92>
 80092ec:	2d00      	cmp	r5, #0
 80092ee:	d1f7      	bne.n	80092e0 <__gethex+0xc4>
 80092f0:	7833      	ldrb	r3, [r6, #0]
 80092f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092f6:	2b50      	cmp	r3, #80	; 0x50
 80092f8:	d13b      	bne.n	8009372 <__gethex+0x156>
 80092fa:	7873      	ldrb	r3, [r6, #1]
 80092fc:	2b2b      	cmp	r3, #43	; 0x2b
 80092fe:	d02c      	beq.n	800935a <__gethex+0x13e>
 8009300:	2b2d      	cmp	r3, #45	; 0x2d
 8009302:	d02e      	beq.n	8009362 <__gethex+0x146>
 8009304:	1c71      	adds	r1, r6, #1
 8009306:	f04f 0900 	mov.w	r9, #0
 800930a:	7808      	ldrb	r0, [r1, #0]
 800930c:	f7ff ff70 	bl	80091f0 <__hexdig_fun>
 8009310:	1e43      	subs	r3, r0, #1
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b18      	cmp	r3, #24
 8009316:	d82c      	bhi.n	8009372 <__gethex+0x156>
 8009318:	f1a0 0210 	sub.w	r2, r0, #16
 800931c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009320:	f7ff ff66 	bl	80091f0 <__hexdig_fun>
 8009324:	1e43      	subs	r3, r0, #1
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b18      	cmp	r3, #24
 800932a:	d91d      	bls.n	8009368 <__gethex+0x14c>
 800932c:	f1b9 0f00 	cmp.w	r9, #0
 8009330:	d000      	beq.n	8009334 <__gethex+0x118>
 8009332:	4252      	negs	r2, r2
 8009334:	4415      	add	r5, r2
 8009336:	f8cb 1000 	str.w	r1, [fp]
 800933a:	b1e4      	cbz	r4, 8009376 <__gethex+0x15a>
 800933c:	9b00      	ldr	r3, [sp, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	bf14      	ite	ne
 8009342:	2700      	movne	r7, #0
 8009344:	2706      	moveq	r7, #6
 8009346:	4638      	mov	r0, r7
 8009348:	b009      	add	sp, #36	; 0x24
 800934a:	ecbd 8b02 	vpop	{d8}
 800934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009352:	463e      	mov	r6, r7
 8009354:	4625      	mov	r5, r4
 8009356:	2401      	movs	r4, #1
 8009358:	e7ca      	b.n	80092f0 <__gethex+0xd4>
 800935a:	f04f 0900 	mov.w	r9, #0
 800935e:	1cb1      	adds	r1, r6, #2
 8009360:	e7d3      	b.n	800930a <__gethex+0xee>
 8009362:	f04f 0901 	mov.w	r9, #1
 8009366:	e7fa      	b.n	800935e <__gethex+0x142>
 8009368:	230a      	movs	r3, #10
 800936a:	fb03 0202 	mla	r2, r3, r2, r0
 800936e:	3a10      	subs	r2, #16
 8009370:	e7d4      	b.n	800931c <__gethex+0x100>
 8009372:	4631      	mov	r1, r6
 8009374:	e7df      	b.n	8009336 <__gethex+0x11a>
 8009376:	1bf3      	subs	r3, r6, r7
 8009378:	3b01      	subs	r3, #1
 800937a:	4621      	mov	r1, r4
 800937c:	2b07      	cmp	r3, #7
 800937e:	dc0b      	bgt.n	8009398 <__gethex+0x17c>
 8009380:	ee18 0a10 	vmov	r0, s16
 8009384:	f000 faf4 	bl	8009970 <_Balloc>
 8009388:	4604      	mov	r4, r0
 800938a:	b940      	cbnz	r0, 800939e <__gethex+0x182>
 800938c:	4b5d      	ldr	r3, [pc, #372]	; (8009504 <__gethex+0x2e8>)
 800938e:	4602      	mov	r2, r0
 8009390:	21de      	movs	r1, #222	; 0xde
 8009392:	485d      	ldr	r0, [pc, #372]	; (8009508 <__gethex+0x2ec>)
 8009394:	f7fe ff5e 	bl	8008254 <__assert_func>
 8009398:	3101      	adds	r1, #1
 800939a:	105b      	asrs	r3, r3, #1
 800939c:	e7ee      	b.n	800937c <__gethex+0x160>
 800939e:	f100 0914 	add.w	r9, r0, #20
 80093a2:	f04f 0b00 	mov.w	fp, #0
 80093a6:	f1ca 0301 	rsb	r3, sl, #1
 80093aa:	f8cd 9008 	str.w	r9, [sp, #8]
 80093ae:	f8cd b000 	str.w	fp, [sp]
 80093b2:	9306      	str	r3, [sp, #24]
 80093b4:	42b7      	cmp	r7, r6
 80093b6:	d340      	bcc.n	800943a <__gethex+0x21e>
 80093b8:	9802      	ldr	r0, [sp, #8]
 80093ba:	9b00      	ldr	r3, [sp, #0]
 80093bc:	f840 3b04 	str.w	r3, [r0], #4
 80093c0:	eba0 0009 	sub.w	r0, r0, r9
 80093c4:	1080      	asrs	r0, r0, #2
 80093c6:	0146      	lsls	r6, r0, #5
 80093c8:	6120      	str	r0, [r4, #16]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fbc2 	bl	8009b54 <__hi0bits>
 80093d0:	1a30      	subs	r0, r6, r0
 80093d2:	f8d8 6000 	ldr.w	r6, [r8]
 80093d6:	42b0      	cmp	r0, r6
 80093d8:	dd63      	ble.n	80094a2 <__gethex+0x286>
 80093da:	1b87      	subs	r7, r0, r6
 80093dc:	4639      	mov	r1, r7
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 ff66 	bl	800a2b0 <__any_on>
 80093e4:	4682      	mov	sl, r0
 80093e6:	b1a8      	cbz	r0, 8009414 <__gethex+0x1f8>
 80093e8:	1e7b      	subs	r3, r7, #1
 80093ea:	1159      	asrs	r1, r3, #5
 80093ec:	f003 021f 	and.w	r2, r3, #31
 80093f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80093f4:	f04f 0a01 	mov.w	sl, #1
 80093f8:	fa0a f202 	lsl.w	r2, sl, r2
 80093fc:	420a      	tst	r2, r1
 80093fe:	d009      	beq.n	8009414 <__gethex+0x1f8>
 8009400:	4553      	cmp	r3, sl
 8009402:	dd05      	ble.n	8009410 <__gethex+0x1f4>
 8009404:	1eb9      	subs	r1, r7, #2
 8009406:	4620      	mov	r0, r4
 8009408:	f000 ff52 	bl	800a2b0 <__any_on>
 800940c:	2800      	cmp	r0, #0
 800940e:	d145      	bne.n	800949c <__gethex+0x280>
 8009410:	f04f 0a02 	mov.w	sl, #2
 8009414:	4639      	mov	r1, r7
 8009416:	4620      	mov	r0, r4
 8009418:	f7ff fe98 	bl	800914c <rshift>
 800941c:	443d      	add	r5, r7
 800941e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009422:	42ab      	cmp	r3, r5
 8009424:	da4c      	bge.n	80094c0 <__gethex+0x2a4>
 8009426:	ee18 0a10 	vmov	r0, s16
 800942a:	4621      	mov	r1, r4
 800942c:	f000 fae0 	bl	80099f0 <_Bfree>
 8009430:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009432:	2300      	movs	r3, #0
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	27a3      	movs	r7, #163	; 0xa3
 8009438:	e785      	b.n	8009346 <__gethex+0x12a>
 800943a:	1e73      	subs	r3, r6, #1
 800943c:	9a05      	ldr	r2, [sp, #20]
 800943e:	9303      	str	r3, [sp, #12]
 8009440:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009444:	4293      	cmp	r3, r2
 8009446:	d019      	beq.n	800947c <__gethex+0x260>
 8009448:	f1bb 0f20 	cmp.w	fp, #32
 800944c:	d107      	bne.n	800945e <__gethex+0x242>
 800944e:	9b02      	ldr	r3, [sp, #8]
 8009450:	9a00      	ldr	r2, [sp, #0]
 8009452:	f843 2b04 	str.w	r2, [r3], #4
 8009456:	9302      	str	r3, [sp, #8]
 8009458:	2300      	movs	r3, #0
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	469b      	mov	fp, r3
 800945e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009462:	f7ff fec5 	bl	80091f0 <__hexdig_fun>
 8009466:	9b00      	ldr	r3, [sp, #0]
 8009468:	f000 000f 	and.w	r0, r0, #15
 800946c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009470:	4303      	orrs	r3, r0
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	f10b 0b04 	add.w	fp, fp, #4
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	e00d      	b.n	8009498 <__gethex+0x27c>
 800947c:	9b03      	ldr	r3, [sp, #12]
 800947e:	9a06      	ldr	r2, [sp, #24]
 8009480:	4413      	add	r3, r2
 8009482:	42bb      	cmp	r3, r7
 8009484:	d3e0      	bcc.n	8009448 <__gethex+0x22c>
 8009486:	4618      	mov	r0, r3
 8009488:	9901      	ldr	r1, [sp, #4]
 800948a:	9307      	str	r3, [sp, #28]
 800948c:	4652      	mov	r2, sl
 800948e:	f001 fa63 	bl	800a958 <strncmp>
 8009492:	9b07      	ldr	r3, [sp, #28]
 8009494:	2800      	cmp	r0, #0
 8009496:	d1d7      	bne.n	8009448 <__gethex+0x22c>
 8009498:	461e      	mov	r6, r3
 800949a:	e78b      	b.n	80093b4 <__gethex+0x198>
 800949c:	f04f 0a03 	mov.w	sl, #3
 80094a0:	e7b8      	b.n	8009414 <__gethex+0x1f8>
 80094a2:	da0a      	bge.n	80094ba <__gethex+0x29e>
 80094a4:	1a37      	subs	r7, r6, r0
 80094a6:	4621      	mov	r1, r4
 80094a8:	ee18 0a10 	vmov	r0, s16
 80094ac:	463a      	mov	r2, r7
 80094ae:	f000 fcbb 	bl	8009e28 <__lshift>
 80094b2:	1bed      	subs	r5, r5, r7
 80094b4:	4604      	mov	r4, r0
 80094b6:	f100 0914 	add.w	r9, r0, #20
 80094ba:	f04f 0a00 	mov.w	sl, #0
 80094be:	e7ae      	b.n	800941e <__gethex+0x202>
 80094c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80094c4:	42a8      	cmp	r0, r5
 80094c6:	dd72      	ble.n	80095ae <__gethex+0x392>
 80094c8:	1b45      	subs	r5, r0, r5
 80094ca:	42ae      	cmp	r6, r5
 80094cc:	dc36      	bgt.n	800953c <__gethex+0x320>
 80094ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d02a      	beq.n	800952c <__gethex+0x310>
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d02c      	beq.n	8009534 <__gethex+0x318>
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d11c      	bne.n	8009518 <__gethex+0x2fc>
 80094de:	42ae      	cmp	r6, r5
 80094e0:	d11a      	bne.n	8009518 <__gethex+0x2fc>
 80094e2:	2e01      	cmp	r6, #1
 80094e4:	d112      	bne.n	800950c <__gethex+0x2f0>
 80094e6:	9a04      	ldr	r2, [sp, #16]
 80094e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	2301      	movs	r3, #1
 80094f0:	6123      	str	r3, [r4, #16]
 80094f2:	f8c9 3000 	str.w	r3, [r9]
 80094f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094f8:	2762      	movs	r7, #98	; 0x62
 80094fa:	601c      	str	r4, [r3, #0]
 80094fc:	e723      	b.n	8009346 <__gethex+0x12a>
 80094fe:	bf00      	nop
 8009500:	0800ec24 	.word	0x0800ec24
 8009504:	0800ebac 	.word	0x0800ebac
 8009508:	0800ebbd 	.word	0x0800ebbd
 800950c:	1e71      	subs	r1, r6, #1
 800950e:	4620      	mov	r0, r4
 8009510:	f000 fece 	bl	800a2b0 <__any_on>
 8009514:	2800      	cmp	r0, #0
 8009516:	d1e6      	bne.n	80094e6 <__gethex+0x2ca>
 8009518:	ee18 0a10 	vmov	r0, s16
 800951c:	4621      	mov	r1, r4
 800951e:	f000 fa67 	bl	80099f0 <_Bfree>
 8009522:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009524:	2300      	movs	r3, #0
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	2750      	movs	r7, #80	; 0x50
 800952a:	e70c      	b.n	8009346 <__gethex+0x12a>
 800952c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1f2      	bne.n	8009518 <__gethex+0x2fc>
 8009532:	e7d8      	b.n	80094e6 <__gethex+0x2ca>
 8009534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1d5      	bne.n	80094e6 <__gethex+0x2ca>
 800953a:	e7ed      	b.n	8009518 <__gethex+0x2fc>
 800953c:	1e6f      	subs	r7, r5, #1
 800953e:	f1ba 0f00 	cmp.w	sl, #0
 8009542:	d131      	bne.n	80095a8 <__gethex+0x38c>
 8009544:	b127      	cbz	r7, 8009550 <__gethex+0x334>
 8009546:	4639      	mov	r1, r7
 8009548:	4620      	mov	r0, r4
 800954a:	f000 feb1 	bl	800a2b0 <__any_on>
 800954e:	4682      	mov	sl, r0
 8009550:	117b      	asrs	r3, r7, #5
 8009552:	2101      	movs	r1, #1
 8009554:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009558:	f007 071f 	and.w	r7, r7, #31
 800955c:	fa01 f707 	lsl.w	r7, r1, r7
 8009560:	421f      	tst	r7, r3
 8009562:	4629      	mov	r1, r5
 8009564:	4620      	mov	r0, r4
 8009566:	bf18      	it	ne
 8009568:	f04a 0a02 	orrne.w	sl, sl, #2
 800956c:	1b76      	subs	r6, r6, r5
 800956e:	f7ff fded 	bl	800914c <rshift>
 8009572:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009576:	2702      	movs	r7, #2
 8009578:	f1ba 0f00 	cmp.w	sl, #0
 800957c:	d048      	beq.n	8009610 <__gethex+0x3f4>
 800957e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d015      	beq.n	80095b2 <__gethex+0x396>
 8009586:	2b03      	cmp	r3, #3
 8009588:	d017      	beq.n	80095ba <__gethex+0x39e>
 800958a:	2b01      	cmp	r3, #1
 800958c:	d109      	bne.n	80095a2 <__gethex+0x386>
 800958e:	f01a 0f02 	tst.w	sl, #2
 8009592:	d006      	beq.n	80095a2 <__gethex+0x386>
 8009594:	f8d9 0000 	ldr.w	r0, [r9]
 8009598:	ea4a 0a00 	orr.w	sl, sl, r0
 800959c:	f01a 0f01 	tst.w	sl, #1
 80095a0:	d10e      	bne.n	80095c0 <__gethex+0x3a4>
 80095a2:	f047 0710 	orr.w	r7, r7, #16
 80095a6:	e033      	b.n	8009610 <__gethex+0x3f4>
 80095a8:	f04f 0a01 	mov.w	sl, #1
 80095ac:	e7d0      	b.n	8009550 <__gethex+0x334>
 80095ae:	2701      	movs	r7, #1
 80095b0:	e7e2      	b.n	8009578 <__gethex+0x35c>
 80095b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095b4:	f1c3 0301 	rsb	r3, r3, #1
 80095b8:	9315      	str	r3, [sp, #84]	; 0x54
 80095ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d0f0      	beq.n	80095a2 <__gethex+0x386>
 80095c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095c4:	f104 0314 	add.w	r3, r4, #20
 80095c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80095d0:	f04f 0c00 	mov.w	ip, #0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095da:	f1b2 3fff 	cmp.w	r2, #4294967295
 80095de:	d01c      	beq.n	800961a <__gethex+0x3fe>
 80095e0:	3201      	adds	r2, #1
 80095e2:	6002      	str	r2, [r0, #0]
 80095e4:	2f02      	cmp	r7, #2
 80095e6:	f104 0314 	add.w	r3, r4, #20
 80095ea:	d13f      	bne.n	800966c <__gethex+0x450>
 80095ec:	f8d8 2000 	ldr.w	r2, [r8]
 80095f0:	3a01      	subs	r2, #1
 80095f2:	42b2      	cmp	r2, r6
 80095f4:	d10a      	bne.n	800960c <__gethex+0x3f0>
 80095f6:	1171      	asrs	r1, r6, #5
 80095f8:	2201      	movs	r2, #1
 80095fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095fe:	f006 061f 	and.w	r6, r6, #31
 8009602:	fa02 f606 	lsl.w	r6, r2, r6
 8009606:	421e      	tst	r6, r3
 8009608:	bf18      	it	ne
 800960a:	4617      	movne	r7, r2
 800960c:	f047 0720 	orr.w	r7, r7, #32
 8009610:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009612:	601c      	str	r4, [r3, #0]
 8009614:	9b04      	ldr	r3, [sp, #16]
 8009616:	601d      	str	r5, [r3, #0]
 8009618:	e695      	b.n	8009346 <__gethex+0x12a>
 800961a:	4299      	cmp	r1, r3
 800961c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009620:	d8d8      	bhi.n	80095d4 <__gethex+0x3b8>
 8009622:	68a3      	ldr	r3, [r4, #8]
 8009624:	459b      	cmp	fp, r3
 8009626:	db19      	blt.n	800965c <__gethex+0x440>
 8009628:	6861      	ldr	r1, [r4, #4]
 800962a:	ee18 0a10 	vmov	r0, s16
 800962e:	3101      	adds	r1, #1
 8009630:	f000 f99e 	bl	8009970 <_Balloc>
 8009634:	4681      	mov	r9, r0
 8009636:	b918      	cbnz	r0, 8009640 <__gethex+0x424>
 8009638:	4b1a      	ldr	r3, [pc, #104]	; (80096a4 <__gethex+0x488>)
 800963a:	4602      	mov	r2, r0
 800963c:	2184      	movs	r1, #132	; 0x84
 800963e:	e6a8      	b.n	8009392 <__gethex+0x176>
 8009640:	6922      	ldr	r2, [r4, #16]
 8009642:	3202      	adds	r2, #2
 8009644:	f104 010c 	add.w	r1, r4, #12
 8009648:	0092      	lsls	r2, r2, #2
 800964a:	300c      	adds	r0, #12
 800964c:	f7fc fecb 	bl	80063e6 <memcpy>
 8009650:	4621      	mov	r1, r4
 8009652:	ee18 0a10 	vmov	r0, s16
 8009656:	f000 f9cb 	bl	80099f0 <_Bfree>
 800965a:	464c      	mov	r4, r9
 800965c:	6923      	ldr	r3, [r4, #16]
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009664:	6122      	str	r2, [r4, #16]
 8009666:	2201      	movs	r2, #1
 8009668:	615a      	str	r2, [r3, #20]
 800966a:	e7bb      	b.n	80095e4 <__gethex+0x3c8>
 800966c:	6922      	ldr	r2, [r4, #16]
 800966e:	455a      	cmp	r2, fp
 8009670:	dd0b      	ble.n	800968a <__gethex+0x46e>
 8009672:	2101      	movs	r1, #1
 8009674:	4620      	mov	r0, r4
 8009676:	f7ff fd69 	bl	800914c <rshift>
 800967a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800967e:	3501      	adds	r5, #1
 8009680:	42ab      	cmp	r3, r5
 8009682:	f6ff aed0 	blt.w	8009426 <__gethex+0x20a>
 8009686:	2701      	movs	r7, #1
 8009688:	e7c0      	b.n	800960c <__gethex+0x3f0>
 800968a:	f016 061f 	ands.w	r6, r6, #31
 800968e:	d0fa      	beq.n	8009686 <__gethex+0x46a>
 8009690:	4453      	add	r3, sl
 8009692:	f1c6 0620 	rsb	r6, r6, #32
 8009696:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800969a:	f000 fa5b 	bl	8009b54 <__hi0bits>
 800969e:	42b0      	cmp	r0, r6
 80096a0:	dbe7      	blt.n	8009672 <__gethex+0x456>
 80096a2:	e7f0      	b.n	8009686 <__gethex+0x46a>
 80096a4:	0800ebac 	.word	0x0800ebac

080096a8 <L_shift>:
 80096a8:	f1c2 0208 	rsb	r2, r2, #8
 80096ac:	0092      	lsls	r2, r2, #2
 80096ae:	b570      	push	{r4, r5, r6, lr}
 80096b0:	f1c2 0620 	rsb	r6, r2, #32
 80096b4:	6843      	ldr	r3, [r0, #4]
 80096b6:	6804      	ldr	r4, [r0, #0]
 80096b8:	fa03 f506 	lsl.w	r5, r3, r6
 80096bc:	432c      	orrs	r4, r5
 80096be:	40d3      	lsrs	r3, r2
 80096c0:	6004      	str	r4, [r0, #0]
 80096c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80096c6:	4288      	cmp	r0, r1
 80096c8:	d3f4      	bcc.n	80096b4 <L_shift+0xc>
 80096ca:	bd70      	pop	{r4, r5, r6, pc}

080096cc <__match>:
 80096cc:	b530      	push	{r4, r5, lr}
 80096ce:	6803      	ldr	r3, [r0, #0]
 80096d0:	3301      	adds	r3, #1
 80096d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096d6:	b914      	cbnz	r4, 80096de <__match+0x12>
 80096d8:	6003      	str	r3, [r0, #0]
 80096da:	2001      	movs	r0, #1
 80096dc:	bd30      	pop	{r4, r5, pc}
 80096de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80096e6:	2d19      	cmp	r5, #25
 80096e8:	bf98      	it	ls
 80096ea:	3220      	addls	r2, #32
 80096ec:	42a2      	cmp	r2, r4
 80096ee:	d0f0      	beq.n	80096d2 <__match+0x6>
 80096f0:	2000      	movs	r0, #0
 80096f2:	e7f3      	b.n	80096dc <__match+0x10>

080096f4 <__hexnan>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	680b      	ldr	r3, [r1, #0]
 80096fa:	115e      	asrs	r6, r3, #5
 80096fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009700:	f013 031f 	ands.w	r3, r3, #31
 8009704:	b087      	sub	sp, #28
 8009706:	bf18      	it	ne
 8009708:	3604      	addne	r6, #4
 800970a:	2500      	movs	r5, #0
 800970c:	1f37      	subs	r7, r6, #4
 800970e:	4690      	mov	r8, r2
 8009710:	6802      	ldr	r2, [r0, #0]
 8009712:	9301      	str	r3, [sp, #4]
 8009714:	4682      	mov	sl, r0
 8009716:	f846 5c04 	str.w	r5, [r6, #-4]
 800971a:	46b9      	mov	r9, r7
 800971c:	463c      	mov	r4, r7
 800971e:	9502      	str	r5, [sp, #8]
 8009720:	46ab      	mov	fp, r5
 8009722:	7851      	ldrb	r1, [r2, #1]
 8009724:	1c53      	adds	r3, r2, #1
 8009726:	9303      	str	r3, [sp, #12]
 8009728:	b341      	cbz	r1, 800977c <__hexnan+0x88>
 800972a:	4608      	mov	r0, r1
 800972c:	9205      	str	r2, [sp, #20]
 800972e:	9104      	str	r1, [sp, #16]
 8009730:	f7ff fd5e 	bl	80091f0 <__hexdig_fun>
 8009734:	2800      	cmp	r0, #0
 8009736:	d14f      	bne.n	80097d8 <__hexnan+0xe4>
 8009738:	9904      	ldr	r1, [sp, #16]
 800973a:	9a05      	ldr	r2, [sp, #20]
 800973c:	2920      	cmp	r1, #32
 800973e:	d818      	bhi.n	8009772 <__hexnan+0x7e>
 8009740:	9b02      	ldr	r3, [sp, #8]
 8009742:	459b      	cmp	fp, r3
 8009744:	dd13      	ble.n	800976e <__hexnan+0x7a>
 8009746:	454c      	cmp	r4, r9
 8009748:	d206      	bcs.n	8009758 <__hexnan+0x64>
 800974a:	2d07      	cmp	r5, #7
 800974c:	dc04      	bgt.n	8009758 <__hexnan+0x64>
 800974e:	462a      	mov	r2, r5
 8009750:	4649      	mov	r1, r9
 8009752:	4620      	mov	r0, r4
 8009754:	f7ff ffa8 	bl	80096a8 <L_shift>
 8009758:	4544      	cmp	r4, r8
 800975a:	d950      	bls.n	80097fe <__hexnan+0x10a>
 800975c:	2300      	movs	r3, #0
 800975e:	f1a4 0904 	sub.w	r9, r4, #4
 8009762:	f844 3c04 	str.w	r3, [r4, #-4]
 8009766:	f8cd b008 	str.w	fp, [sp, #8]
 800976a:	464c      	mov	r4, r9
 800976c:	461d      	mov	r5, r3
 800976e:	9a03      	ldr	r2, [sp, #12]
 8009770:	e7d7      	b.n	8009722 <__hexnan+0x2e>
 8009772:	2929      	cmp	r1, #41	; 0x29
 8009774:	d156      	bne.n	8009824 <__hexnan+0x130>
 8009776:	3202      	adds	r2, #2
 8009778:	f8ca 2000 	str.w	r2, [sl]
 800977c:	f1bb 0f00 	cmp.w	fp, #0
 8009780:	d050      	beq.n	8009824 <__hexnan+0x130>
 8009782:	454c      	cmp	r4, r9
 8009784:	d206      	bcs.n	8009794 <__hexnan+0xa0>
 8009786:	2d07      	cmp	r5, #7
 8009788:	dc04      	bgt.n	8009794 <__hexnan+0xa0>
 800978a:	462a      	mov	r2, r5
 800978c:	4649      	mov	r1, r9
 800978e:	4620      	mov	r0, r4
 8009790:	f7ff ff8a 	bl	80096a8 <L_shift>
 8009794:	4544      	cmp	r4, r8
 8009796:	d934      	bls.n	8009802 <__hexnan+0x10e>
 8009798:	f1a8 0204 	sub.w	r2, r8, #4
 800979c:	4623      	mov	r3, r4
 800979e:	f853 1b04 	ldr.w	r1, [r3], #4
 80097a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80097a6:	429f      	cmp	r7, r3
 80097a8:	d2f9      	bcs.n	800979e <__hexnan+0xaa>
 80097aa:	1b3b      	subs	r3, r7, r4
 80097ac:	f023 0303 	bic.w	r3, r3, #3
 80097b0:	3304      	adds	r3, #4
 80097b2:	3401      	adds	r4, #1
 80097b4:	3e03      	subs	r6, #3
 80097b6:	42b4      	cmp	r4, r6
 80097b8:	bf88      	it	hi
 80097ba:	2304      	movhi	r3, #4
 80097bc:	4443      	add	r3, r8
 80097be:	2200      	movs	r2, #0
 80097c0:	f843 2b04 	str.w	r2, [r3], #4
 80097c4:	429f      	cmp	r7, r3
 80097c6:	d2fb      	bcs.n	80097c0 <__hexnan+0xcc>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	b91b      	cbnz	r3, 80097d4 <__hexnan+0xe0>
 80097cc:	4547      	cmp	r7, r8
 80097ce:	d127      	bne.n	8009820 <__hexnan+0x12c>
 80097d0:	2301      	movs	r3, #1
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	2005      	movs	r0, #5
 80097d6:	e026      	b.n	8009826 <__hexnan+0x132>
 80097d8:	3501      	adds	r5, #1
 80097da:	2d08      	cmp	r5, #8
 80097dc:	f10b 0b01 	add.w	fp, fp, #1
 80097e0:	dd06      	ble.n	80097f0 <__hexnan+0xfc>
 80097e2:	4544      	cmp	r4, r8
 80097e4:	d9c3      	bls.n	800976e <__hexnan+0x7a>
 80097e6:	2300      	movs	r3, #0
 80097e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80097ec:	2501      	movs	r5, #1
 80097ee:	3c04      	subs	r4, #4
 80097f0:	6822      	ldr	r2, [r4, #0]
 80097f2:	f000 000f 	and.w	r0, r0, #15
 80097f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80097fa:	6022      	str	r2, [r4, #0]
 80097fc:	e7b7      	b.n	800976e <__hexnan+0x7a>
 80097fe:	2508      	movs	r5, #8
 8009800:	e7b5      	b.n	800976e <__hexnan+0x7a>
 8009802:	9b01      	ldr	r3, [sp, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0df      	beq.n	80097c8 <__hexnan+0xd4>
 8009808:	f04f 32ff 	mov.w	r2, #4294967295
 800980c:	f1c3 0320 	rsb	r3, r3, #32
 8009810:	fa22 f303 	lsr.w	r3, r2, r3
 8009814:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009818:	401a      	ands	r2, r3
 800981a:	f846 2c04 	str.w	r2, [r6, #-4]
 800981e:	e7d3      	b.n	80097c8 <__hexnan+0xd4>
 8009820:	3f04      	subs	r7, #4
 8009822:	e7d1      	b.n	80097c8 <__hexnan+0xd4>
 8009824:	2004      	movs	r0, #4
 8009826:	b007      	add	sp, #28
 8009828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800982c <_localeconv_r>:
 800982c:	4800      	ldr	r0, [pc, #0]	; (8009830 <_localeconv_r+0x4>)
 800982e:	4770      	bx	lr
 8009830:	2000025c 	.word	0x2000025c

08009834 <_lseek_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	4d07      	ldr	r5, [pc, #28]	; (8009854 <_lseek_r+0x20>)
 8009838:	4604      	mov	r4, r0
 800983a:	4608      	mov	r0, r1
 800983c:	4611      	mov	r1, r2
 800983e:	2200      	movs	r2, #0
 8009840:	602a      	str	r2, [r5, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	f7fc fbe1 	bl	800600a <_lseek>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_lseek_r+0x1e>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_lseek_r+0x1e>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	20000914 	.word	0x20000914

08009858 <__swhatbuf_r>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	460e      	mov	r6, r1
 800985c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009860:	2900      	cmp	r1, #0
 8009862:	b096      	sub	sp, #88	; 0x58
 8009864:	4614      	mov	r4, r2
 8009866:	461d      	mov	r5, r3
 8009868:	da08      	bge.n	800987c <__swhatbuf_r+0x24>
 800986a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	602a      	str	r2, [r5, #0]
 8009872:	061a      	lsls	r2, r3, #24
 8009874:	d410      	bmi.n	8009898 <__swhatbuf_r+0x40>
 8009876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800987a:	e00e      	b.n	800989a <__swhatbuf_r+0x42>
 800987c:	466a      	mov	r2, sp
 800987e:	f001 f893 	bl	800a9a8 <_fstat_r>
 8009882:	2800      	cmp	r0, #0
 8009884:	dbf1      	blt.n	800986a <__swhatbuf_r+0x12>
 8009886:	9a01      	ldr	r2, [sp, #4]
 8009888:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800988c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009890:	425a      	negs	r2, r3
 8009892:	415a      	adcs	r2, r3
 8009894:	602a      	str	r2, [r5, #0]
 8009896:	e7ee      	b.n	8009876 <__swhatbuf_r+0x1e>
 8009898:	2340      	movs	r3, #64	; 0x40
 800989a:	2000      	movs	r0, #0
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	b016      	add	sp, #88	; 0x58
 80098a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080098a4 <__smakebuf_r>:
 80098a4:	898b      	ldrh	r3, [r1, #12]
 80098a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098a8:	079d      	lsls	r5, r3, #30
 80098aa:	4606      	mov	r6, r0
 80098ac:	460c      	mov	r4, r1
 80098ae:	d507      	bpl.n	80098c0 <__smakebuf_r+0x1c>
 80098b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	6123      	str	r3, [r4, #16]
 80098b8:	2301      	movs	r3, #1
 80098ba:	6163      	str	r3, [r4, #20]
 80098bc:	b002      	add	sp, #8
 80098be:	bd70      	pop	{r4, r5, r6, pc}
 80098c0:	ab01      	add	r3, sp, #4
 80098c2:	466a      	mov	r2, sp
 80098c4:	f7ff ffc8 	bl	8009858 <__swhatbuf_r>
 80098c8:	9900      	ldr	r1, [sp, #0]
 80098ca:	4605      	mov	r5, r0
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7fc fddb 	bl	8006488 <_malloc_r>
 80098d2:	b948      	cbnz	r0, 80098e8 <__smakebuf_r+0x44>
 80098d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d8:	059a      	lsls	r2, r3, #22
 80098da:	d4ef      	bmi.n	80098bc <__smakebuf_r+0x18>
 80098dc:	f023 0303 	bic.w	r3, r3, #3
 80098e0:	f043 0302 	orr.w	r3, r3, #2
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	e7e3      	b.n	80098b0 <__smakebuf_r+0xc>
 80098e8:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <__smakebuf_r+0x7c>)
 80098ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	6020      	str	r0, [r4, #0]
 80098f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	9b00      	ldr	r3, [sp, #0]
 80098f8:	6163      	str	r3, [r4, #20]
 80098fa:	9b01      	ldr	r3, [sp, #4]
 80098fc:	6120      	str	r0, [r4, #16]
 80098fe:	b15b      	cbz	r3, 8009918 <__smakebuf_r+0x74>
 8009900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009904:	4630      	mov	r0, r6
 8009906:	f001 f861 	bl	800a9cc <_isatty_r>
 800990a:	b128      	cbz	r0, 8009918 <__smakebuf_r+0x74>
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	f023 0303 	bic.w	r3, r3, #3
 8009912:	f043 0301 	orr.w	r3, r3, #1
 8009916:	81a3      	strh	r3, [r4, #12]
 8009918:	89a0      	ldrh	r0, [r4, #12]
 800991a:	4305      	orrs	r5, r0
 800991c:	81a5      	strh	r5, [r4, #12]
 800991e:	e7cd      	b.n	80098bc <__smakebuf_r+0x18>
 8009920:	080061f5 	.word	0x080061f5

08009924 <malloc>:
 8009924:	4b02      	ldr	r3, [pc, #8]	; (8009930 <malloc+0xc>)
 8009926:	4601      	mov	r1, r0
 8009928:	6818      	ldr	r0, [r3, #0]
 800992a:	f7fc bdad 	b.w	8006488 <_malloc_r>
 800992e:	bf00      	nop
 8009930:	20000104 	.word	0x20000104

08009934 <__ascii_mbtowc>:
 8009934:	b082      	sub	sp, #8
 8009936:	b901      	cbnz	r1, 800993a <__ascii_mbtowc+0x6>
 8009938:	a901      	add	r1, sp, #4
 800993a:	b142      	cbz	r2, 800994e <__ascii_mbtowc+0x1a>
 800993c:	b14b      	cbz	r3, 8009952 <__ascii_mbtowc+0x1e>
 800993e:	7813      	ldrb	r3, [r2, #0]
 8009940:	600b      	str	r3, [r1, #0]
 8009942:	7812      	ldrb	r2, [r2, #0]
 8009944:	1e10      	subs	r0, r2, #0
 8009946:	bf18      	it	ne
 8009948:	2001      	movne	r0, #1
 800994a:	b002      	add	sp, #8
 800994c:	4770      	bx	lr
 800994e:	4610      	mov	r0, r2
 8009950:	e7fb      	b.n	800994a <__ascii_mbtowc+0x16>
 8009952:	f06f 0001 	mvn.w	r0, #1
 8009956:	e7f8      	b.n	800994a <__ascii_mbtowc+0x16>

08009958 <__malloc_lock>:
 8009958:	4801      	ldr	r0, [pc, #4]	; (8009960 <__malloc_lock+0x8>)
 800995a:	f7fc bd42 	b.w	80063e2 <__retarget_lock_acquire_recursive>
 800995e:	bf00      	nop
 8009960:	20000908 	.word	0x20000908

08009964 <__malloc_unlock>:
 8009964:	4801      	ldr	r0, [pc, #4]	; (800996c <__malloc_unlock+0x8>)
 8009966:	f7fc bd3d 	b.w	80063e4 <__retarget_lock_release_recursive>
 800996a:	bf00      	nop
 800996c:	20000908 	.word	0x20000908

08009970 <_Balloc>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009974:	4604      	mov	r4, r0
 8009976:	460d      	mov	r5, r1
 8009978:	b976      	cbnz	r6, 8009998 <_Balloc+0x28>
 800997a:	2010      	movs	r0, #16
 800997c:	f7ff ffd2 	bl	8009924 <malloc>
 8009980:	4602      	mov	r2, r0
 8009982:	6260      	str	r0, [r4, #36]	; 0x24
 8009984:	b920      	cbnz	r0, 8009990 <_Balloc+0x20>
 8009986:	4b18      	ldr	r3, [pc, #96]	; (80099e8 <_Balloc+0x78>)
 8009988:	4818      	ldr	r0, [pc, #96]	; (80099ec <_Balloc+0x7c>)
 800998a:	2166      	movs	r1, #102	; 0x66
 800998c:	f7fe fc62 	bl	8008254 <__assert_func>
 8009990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009994:	6006      	str	r6, [r0, #0]
 8009996:	60c6      	str	r6, [r0, #12]
 8009998:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800999a:	68f3      	ldr	r3, [r6, #12]
 800999c:	b183      	cbz	r3, 80099c0 <_Balloc+0x50>
 800999e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099a6:	b9b8      	cbnz	r0, 80099d8 <_Balloc+0x68>
 80099a8:	2101      	movs	r1, #1
 80099aa:	fa01 f605 	lsl.w	r6, r1, r5
 80099ae:	1d72      	adds	r2, r6, #5
 80099b0:	0092      	lsls	r2, r2, #2
 80099b2:	4620      	mov	r0, r4
 80099b4:	f000 fc9d 	bl	800a2f2 <_calloc_r>
 80099b8:	b160      	cbz	r0, 80099d4 <_Balloc+0x64>
 80099ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099be:	e00e      	b.n	80099de <_Balloc+0x6e>
 80099c0:	2221      	movs	r2, #33	; 0x21
 80099c2:	2104      	movs	r1, #4
 80099c4:	4620      	mov	r0, r4
 80099c6:	f000 fc94 	bl	800a2f2 <_calloc_r>
 80099ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099cc:	60f0      	str	r0, [r6, #12]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e4      	bne.n	800999e <_Balloc+0x2e>
 80099d4:	2000      	movs	r0, #0
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	6802      	ldr	r2, [r0, #0]
 80099da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099de:	2300      	movs	r3, #0
 80099e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099e4:	e7f7      	b.n	80099d6 <_Balloc+0x66>
 80099e6:	bf00      	nop
 80099e8:	0800eb3a 	.word	0x0800eb3a
 80099ec:	0800ec38 	.word	0x0800ec38

080099f0 <_Bfree>:
 80099f0:	b570      	push	{r4, r5, r6, lr}
 80099f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099f4:	4605      	mov	r5, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	b976      	cbnz	r6, 8009a18 <_Bfree+0x28>
 80099fa:	2010      	movs	r0, #16
 80099fc:	f7ff ff92 	bl	8009924 <malloc>
 8009a00:	4602      	mov	r2, r0
 8009a02:	6268      	str	r0, [r5, #36]	; 0x24
 8009a04:	b920      	cbnz	r0, 8009a10 <_Bfree+0x20>
 8009a06:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <_Bfree+0x3c>)
 8009a08:	4809      	ldr	r0, [pc, #36]	; (8009a30 <_Bfree+0x40>)
 8009a0a:	218a      	movs	r1, #138	; 0x8a
 8009a0c:	f7fe fc22 	bl	8008254 <__assert_func>
 8009a10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a14:	6006      	str	r6, [r0, #0]
 8009a16:	60c6      	str	r6, [r0, #12]
 8009a18:	b13c      	cbz	r4, 8009a2a <_Bfree+0x3a>
 8009a1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a1c:	6862      	ldr	r2, [r4, #4]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a24:	6021      	str	r1, [r4, #0]
 8009a26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}
 8009a2c:	0800eb3a 	.word	0x0800eb3a
 8009a30:	0800ec38 	.word	0x0800ec38

08009a34 <__multadd>:
 8009a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a38:	690d      	ldr	r5, [r1, #16]
 8009a3a:	4607      	mov	r7, r0
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	461e      	mov	r6, r3
 8009a40:	f101 0c14 	add.w	ip, r1, #20
 8009a44:	2000      	movs	r0, #0
 8009a46:	f8dc 3000 	ldr.w	r3, [ip]
 8009a4a:	b299      	uxth	r1, r3
 8009a4c:	fb02 6101 	mla	r1, r2, r1, r6
 8009a50:	0c1e      	lsrs	r6, r3, #16
 8009a52:	0c0b      	lsrs	r3, r1, #16
 8009a54:	fb02 3306 	mla	r3, r2, r6, r3
 8009a58:	b289      	uxth	r1, r1
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a60:	4285      	cmp	r5, r0
 8009a62:	f84c 1b04 	str.w	r1, [ip], #4
 8009a66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a6a:	dcec      	bgt.n	8009a46 <__multadd+0x12>
 8009a6c:	b30e      	cbz	r6, 8009ab2 <__multadd+0x7e>
 8009a6e:	68a3      	ldr	r3, [r4, #8]
 8009a70:	42ab      	cmp	r3, r5
 8009a72:	dc19      	bgt.n	8009aa8 <__multadd+0x74>
 8009a74:	6861      	ldr	r1, [r4, #4]
 8009a76:	4638      	mov	r0, r7
 8009a78:	3101      	adds	r1, #1
 8009a7a:	f7ff ff79 	bl	8009970 <_Balloc>
 8009a7e:	4680      	mov	r8, r0
 8009a80:	b928      	cbnz	r0, 8009a8e <__multadd+0x5a>
 8009a82:	4602      	mov	r2, r0
 8009a84:	4b0c      	ldr	r3, [pc, #48]	; (8009ab8 <__multadd+0x84>)
 8009a86:	480d      	ldr	r0, [pc, #52]	; (8009abc <__multadd+0x88>)
 8009a88:	21b5      	movs	r1, #181	; 0xb5
 8009a8a:	f7fe fbe3 	bl	8008254 <__assert_func>
 8009a8e:	6922      	ldr	r2, [r4, #16]
 8009a90:	3202      	adds	r2, #2
 8009a92:	f104 010c 	add.w	r1, r4, #12
 8009a96:	0092      	lsls	r2, r2, #2
 8009a98:	300c      	adds	r0, #12
 8009a9a:	f7fc fca4 	bl	80063e6 <memcpy>
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	f7ff ffa5 	bl	80099f0 <_Bfree>
 8009aa6:	4644      	mov	r4, r8
 8009aa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009aac:	3501      	adds	r5, #1
 8009aae:	615e      	str	r6, [r3, #20]
 8009ab0:	6125      	str	r5, [r4, #16]
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab8:	0800ebac 	.word	0x0800ebac
 8009abc:	0800ec38 	.word	0x0800ec38

08009ac0 <__s2b>:
 8009ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	4615      	mov	r5, r2
 8009ac8:	461f      	mov	r7, r3
 8009aca:	2209      	movs	r2, #9
 8009acc:	3308      	adds	r3, #8
 8009ace:	4606      	mov	r6, r0
 8009ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	db09      	blt.n	8009af0 <__s2b+0x30>
 8009adc:	4630      	mov	r0, r6
 8009ade:	f7ff ff47 	bl	8009970 <_Balloc>
 8009ae2:	b940      	cbnz	r0, 8009af6 <__s2b+0x36>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	4b19      	ldr	r3, [pc, #100]	; (8009b4c <__s2b+0x8c>)
 8009ae8:	4819      	ldr	r0, [pc, #100]	; (8009b50 <__s2b+0x90>)
 8009aea:	21ce      	movs	r1, #206	; 0xce
 8009aec:	f7fe fbb2 	bl	8008254 <__assert_func>
 8009af0:	0052      	lsls	r2, r2, #1
 8009af2:	3101      	adds	r1, #1
 8009af4:	e7f0      	b.n	8009ad8 <__s2b+0x18>
 8009af6:	9b08      	ldr	r3, [sp, #32]
 8009af8:	6143      	str	r3, [r0, #20]
 8009afa:	2d09      	cmp	r5, #9
 8009afc:	f04f 0301 	mov.w	r3, #1
 8009b00:	6103      	str	r3, [r0, #16]
 8009b02:	dd16      	ble.n	8009b32 <__s2b+0x72>
 8009b04:	f104 0909 	add.w	r9, r4, #9
 8009b08:	46c8      	mov	r8, r9
 8009b0a:	442c      	add	r4, r5
 8009b0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b10:	4601      	mov	r1, r0
 8009b12:	3b30      	subs	r3, #48	; 0x30
 8009b14:	220a      	movs	r2, #10
 8009b16:	4630      	mov	r0, r6
 8009b18:	f7ff ff8c 	bl	8009a34 <__multadd>
 8009b1c:	45a0      	cmp	r8, r4
 8009b1e:	d1f5      	bne.n	8009b0c <__s2b+0x4c>
 8009b20:	f1a5 0408 	sub.w	r4, r5, #8
 8009b24:	444c      	add	r4, r9
 8009b26:	1b2d      	subs	r5, r5, r4
 8009b28:	1963      	adds	r3, r4, r5
 8009b2a:	42bb      	cmp	r3, r7
 8009b2c:	db04      	blt.n	8009b38 <__s2b+0x78>
 8009b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b32:	340a      	adds	r4, #10
 8009b34:	2509      	movs	r5, #9
 8009b36:	e7f6      	b.n	8009b26 <__s2b+0x66>
 8009b38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b3c:	4601      	mov	r1, r0
 8009b3e:	3b30      	subs	r3, #48	; 0x30
 8009b40:	220a      	movs	r2, #10
 8009b42:	4630      	mov	r0, r6
 8009b44:	f7ff ff76 	bl	8009a34 <__multadd>
 8009b48:	e7ee      	b.n	8009b28 <__s2b+0x68>
 8009b4a:	bf00      	nop
 8009b4c:	0800ebac 	.word	0x0800ebac
 8009b50:	0800ec38 	.word	0x0800ec38

08009b54 <__hi0bits>:
 8009b54:	0c03      	lsrs	r3, r0, #16
 8009b56:	041b      	lsls	r3, r3, #16
 8009b58:	b9d3      	cbnz	r3, 8009b90 <__hi0bits+0x3c>
 8009b5a:	0400      	lsls	r0, r0, #16
 8009b5c:	2310      	movs	r3, #16
 8009b5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b62:	bf04      	itt	eq
 8009b64:	0200      	lsleq	r0, r0, #8
 8009b66:	3308      	addeq	r3, #8
 8009b68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b6c:	bf04      	itt	eq
 8009b6e:	0100      	lsleq	r0, r0, #4
 8009b70:	3304      	addeq	r3, #4
 8009b72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b76:	bf04      	itt	eq
 8009b78:	0080      	lsleq	r0, r0, #2
 8009b7a:	3302      	addeq	r3, #2
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	db05      	blt.n	8009b8c <__hi0bits+0x38>
 8009b80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b84:	f103 0301 	add.w	r3, r3, #1
 8009b88:	bf08      	it	eq
 8009b8a:	2320      	moveq	r3, #32
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	4770      	bx	lr
 8009b90:	2300      	movs	r3, #0
 8009b92:	e7e4      	b.n	8009b5e <__hi0bits+0xa>

08009b94 <__lo0bits>:
 8009b94:	6803      	ldr	r3, [r0, #0]
 8009b96:	f013 0207 	ands.w	r2, r3, #7
 8009b9a:	4601      	mov	r1, r0
 8009b9c:	d00b      	beq.n	8009bb6 <__lo0bits+0x22>
 8009b9e:	07da      	lsls	r2, r3, #31
 8009ba0:	d423      	bmi.n	8009bea <__lo0bits+0x56>
 8009ba2:	0798      	lsls	r0, r3, #30
 8009ba4:	bf49      	itett	mi
 8009ba6:	085b      	lsrmi	r3, r3, #1
 8009ba8:	089b      	lsrpl	r3, r3, #2
 8009baa:	2001      	movmi	r0, #1
 8009bac:	600b      	strmi	r3, [r1, #0]
 8009bae:	bf5c      	itt	pl
 8009bb0:	600b      	strpl	r3, [r1, #0]
 8009bb2:	2002      	movpl	r0, #2
 8009bb4:	4770      	bx	lr
 8009bb6:	b298      	uxth	r0, r3
 8009bb8:	b9a8      	cbnz	r0, 8009be6 <__lo0bits+0x52>
 8009bba:	0c1b      	lsrs	r3, r3, #16
 8009bbc:	2010      	movs	r0, #16
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	b90a      	cbnz	r2, 8009bc6 <__lo0bits+0x32>
 8009bc2:	3008      	adds	r0, #8
 8009bc4:	0a1b      	lsrs	r3, r3, #8
 8009bc6:	071a      	lsls	r2, r3, #28
 8009bc8:	bf04      	itt	eq
 8009bca:	091b      	lsreq	r3, r3, #4
 8009bcc:	3004      	addeq	r0, #4
 8009bce:	079a      	lsls	r2, r3, #30
 8009bd0:	bf04      	itt	eq
 8009bd2:	089b      	lsreq	r3, r3, #2
 8009bd4:	3002      	addeq	r0, #2
 8009bd6:	07da      	lsls	r2, r3, #31
 8009bd8:	d403      	bmi.n	8009be2 <__lo0bits+0x4e>
 8009bda:	085b      	lsrs	r3, r3, #1
 8009bdc:	f100 0001 	add.w	r0, r0, #1
 8009be0:	d005      	beq.n	8009bee <__lo0bits+0x5a>
 8009be2:	600b      	str	r3, [r1, #0]
 8009be4:	4770      	bx	lr
 8009be6:	4610      	mov	r0, r2
 8009be8:	e7e9      	b.n	8009bbe <__lo0bits+0x2a>
 8009bea:	2000      	movs	r0, #0
 8009bec:	4770      	bx	lr
 8009bee:	2020      	movs	r0, #32
 8009bf0:	4770      	bx	lr
	...

08009bf4 <__i2b>:
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	f7ff feb9 	bl	8009970 <_Balloc>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	b928      	cbnz	r0, 8009c0e <__i2b+0x1a>
 8009c02:	4b05      	ldr	r3, [pc, #20]	; (8009c18 <__i2b+0x24>)
 8009c04:	4805      	ldr	r0, [pc, #20]	; (8009c1c <__i2b+0x28>)
 8009c06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c0a:	f7fe fb23 	bl	8008254 <__assert_func>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	6144      	str	r4, [r0, #20]
 8009c12:	6103      	str	r3, [r0, #16]
 8009c14:	bd10      	pop	{r4, pc}
 8009c16:	bf00      	nop
 8009c18:	0800ebac 	.word	0x0800ebac
 8009c1c:	0800ec38 	.word	0x0800ec38

08009c20 <__multiply>:
 8009c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c24:	4691      	mov	r9, r2
 8009c26:	690a      	ldr	r2, [r1, #16]
 8009c28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	bfb8      	it	lt
 8009c30:	460b      	movlt	r3, r1
 8009c32:	460c      	mov	r4, r1
 8009c34:	bfbc      	itt	lt
 8009c36:	464c      	movlt	r4, r9
 8009c38:	4699      	movlt	r9, r3
 8009c3a:	6927      	ldr	r7, [r4, #16]
 8009c3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c40:	68a3      	ldr	r3, [r4, #8]
 8009c42:	6861      	ldr	r1, [r4, #4]
 8009c44:	eb07 060a 	add.w	r6, r7, sl
 8009c48:	42b3      	cmp	r3, r6
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	bfb8      	it	lt
 8009c4e:	3101      	addlt	r1, #1
 8009c50:	f7ff fe8e 	bl	8009970 <_Balloc>
 8009c54:	b930      	cbnz	r0, 8009c64 <__multiply+0x44>
 8009c56:	4602      	mov	r2, r0
 8009c58:	4b44      	ldr	r3, [pc, #272]	; (8009d6c <__multiply+0x14c>)
 8009c5a:	4845      	ldr	r0, [pc, #276]	; (8009d70 <__multiply+0x150>)
 8009c5c:	f240 115d 	movw	r1, #349	; 0x15d
 8009c60:	f7fe faf8 	bl	8008254 <__assert_func>
 8009c64:	f100 0514 	add.w	r5, r0, #20
 8009c68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c6c:	462b      	mov	r3, r5
 8009c6e:	2200      	movs	r2, #0
 8009c70:	4543      	cmp	r3, r8
 8009c72:	d321      	bcc.n	8009cb8 <__multiply+0x98>
 8009c74:	f104 0314 	add.w	r3, r4, #20
 8009c78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c7c:	f109 0314 	add.w	r3, r9, #20
 8009c80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c84:	9202      	str	r2, [sp, #8]
 8009c86:	1b3a      	subs	r2, r7, r4
 8009c88:	3a15      	subs	r2, #21
 8009c8a:	f022 0203 	bic.w	r2, r2, #3
 8009c8e:	3204      	adds	r2, #4
 8009c90:	f104 0115 	add.w	r1, r4, #21
 8009c94:	428f      	cmp	r7, r1
 8009c96:	bf38      	it	cc
 8009c98:	2204      	movcc	r2, #4
 8009c9a:	9201      	str	r2, [sp, #4]
 8009c9c:	9a02      	ldr	r2, [sp, #8]
 8009c9e:	9303      	str	r3, [sp, #12]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d80c      	bhi.n	8009cbe <__multiply+0x9e>
 8009ca4:	2e00      	cmp	r6, #0
 8009ca6:	dd03      	ble.n	8009cb0 <__multiply+0x90>
 8009ca8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d05a      	beq.n	8009d66 <__multiply+0x146>
 8009cb0:	6106      	str	r6, [r0, #16]
 8009cb2:	b005      	add	sp, #20
 8009cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb8:	f843 2b04 	str.w	r2, [r3], #4
 8009cbc:	e7d8      	b.n	8009c70 <__multiply+0x50>
 8009cbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8009cc2:	f1ba 0f00 	cmp.w	sl, #0
 8009cc6:	d024      	beq.n	8009d12 <__multiply+0xf2>
 8009cc8:	f104 0e14 	add.w	lr, r4, #20
 8009ccc:	46a9      	mov	r9, r5
 8009cce:	f04f 0c00 	mov.w	ip, #0
 8009cd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cd6:	f8d9 1000 	ldr.w	r1, [r9]
 8009cda:	fa1f fb82 	uxth.w	fp, r2
 8009cde:	b289      	uxth	r1, r1
 8009ce0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ce4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ce8:	f8d9 2000 	ldr.w	r2, [r9]
 8009cec:	4461      	add	r1, ip
 8009cee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cf2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cfa:	b289      	uxth	r1, r1
 8009cfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d00:	4577      	cmp	r7, lr
 8009d02:	f849 1b04 	str.w	r1, [r9], #4
 8009d06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d0a:	d8e2      	bhi.n	8009cd2 <__multiply+0xb2>
 8009d0c:	9a01      	ldr	r2, [sp, #4]
 8009d0e:	f845 c002 	str.w	ip, [r5, r2]
 8009d12:	9a03      	ldr	r2, [sp, #12]
 8009d14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d18:	3304      	adds	r3, #4
 8009d1a:	f1b9 0f00 	cmp.w	r9, #0
 8009d1e:	d020      	beq.n	8009d62 <__multiply+0x142>
 8009d20:	6829      	ldr	r1, [r5, #0]
 8009d22:	f104 0c14 	add.w	ip, r4, #20
 8009d26:	46ae      	mov	lr, r5
 8009d28:	f04f 0a00 	mov.w	sl, #0
 8009d2c:	f8bc b000 	ldrh.w	fp, [ip]
 8009d30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d34:	fb09 220b 	mla	r2, r9, fp, r2
 8009d38:	4492      	add	sl, r2
 8009d3a:	b289      	uxth	r1, r1
 8009d3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d40:	f84e 1b04 	str.w	r1, [lr], #4
 8009d44:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d48:	f8be 1000 	ldrh.w	r1, [lr]
 8009d4c:	0c12      	lsrs	r2, r2, #16
 8009d4e:	fb09 1102 	mla	r1, r9, r2, r1
 8009d52:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d56:	4567      	cmp	r7, ip
 8009d58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d5c:	d8e6      	bhi.n	8009d2c <__multiply+0x10c>
 8009d5e:	9a01      	ldr	r2, [sp, #4]
 8009d60:	50a9      	str	r1, [r5, r2]
 8009d62:	3504      	adds	r5, #4
 8009d64:	e79a      	b.n	8009c9c <__multiply+0x7c>
 8009d66:	3e01      	subs	r6, #1
 8009d68:	e79c      	b.n	8009ca4 <__multiply+0x84>
 8009d6a:	bf00      	nop
 8009d6c:	0800ebac 	.word	0x0800ebac
 8009d70:	0800ec38 	.word	0x0800ec38

08009d74 <__pow5mult>:
 8009d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d78:	4615      	mov	r5, r2
 8009d7a:	f012 0203 	ands.w	r2, r2, #3
 8009d7e:	4606      	mov	r6, r0
 8009d80:	460f      	mov	r7, r1
 8009d82:	d007      	beq.n	8009d94 <__pow5mult+0x20>
 8009d84:	4c25      	ldr	r4, [pc, #148]	; (8009e1c <__pow5mult+0xa8>)
 8009d86:	3a01      	subs	r2, #1
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d8e:	f7ff fe51 	bl	8009a34 <__multadd>
 8009d92:	4607      	mov	r7, r0
 8009d94:	10ad      	asrs	r5, r5, #2
 8009d96:	d03d      	beq.n	8009e14 <__pow5mult+0xa0>
 8009d98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d9a:	b97c      	cbnz	r4, 8009dbc <__pow5mult+0x48>
 8009d9c:	2010      	movs	r0, #16
 8009d9e:	f7ff fdc1 	bl	8009924 <malloc>
 8009da2:	4602      	mov	r2, r0
 8009da4:	6270      	str	r0, [r6, #36]	; 0x24
 8009da6:	b928      	cbnz	r0, 8009db4 <__pow5mult+0x40>
 8009da8:	4b1d      	ldr	r3, [pc, #116]	; (8009e20 <__pow5mult+0xac>)
 8009daa:	481e      	ldr	r0, [pc, #120]	; (8009e24 <__pow5mult+0xb0>)
 8009dac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009db0:	f7fe fa50 	bl	8008254 <__assert_func>
 8009db4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009db8:	6004      	str	r4, [r0, #0]
 8009dba:	60c4      	str	r4, [r0, #12]
 8009dbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009dc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009dc4:	b94c      	cbnz	r4, 8009dda <__pow5mult+0x66>
 8009dc6:	f240 2171 	movw	r1, #625	; 0x271
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7ff ff12 	bl	8009bf4 <__i2b>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	6003      	str	r3, [r0, #0]
 8009dda:	f04f 0900 	mov.w	r9, #0
 8009dde:	07eb      	lsls	r3, r5, #31
 8009de0:	d50a      	bpl.n	8009df8 <__pow5mult+0x84>
 8009de2:	4639      	mov	r1, r7
 8009de4:	4622      	mov	r2, r4
 8009de6:	4630      	mov	r0, r6
 8009de8:	f7ff ff1a 	bl	8009c20 <__multiply>
 8009dec:	4639      	mov	r1, r7
 8009dee:	4680      	mov	r8, r0
 8009df0:	4630      	mov	r0, r6
 8009df2:	f7ff fdfd 	bl	80099f0 <_Bfree>
 8009df6:	4647      	mov	r7, r8
 8009df8:	106d      	asrs	r5, r5, #1
 8009dfa:	d00b      	beq.n	8009e14 <__pow5mult+0xa0>
 8009dfc:	6820      	ldr	r0, [r4, #0]
 8009dfe:	b938      	cbnz	r0, 8009e10 <__pow5mult+0x9c>
 8009e00:	4622      	mov	r2, r4
 8009e02:	4621      	mov	r1, r4
 8009e04:	4630      	mov	r0, r6
 8009e06:	f7ff ff0b 	bl	8009c20 <__multiply>
 8009e0a:	6020      	str	r0, [r4, #0]
 8009e0c:	f8c0 9000 	str.w	r9, [r0]
 8009e10:	4604      	mov	r4, r0
 8009e12:	e7e4      	b.n	8009dde <__pow5mult+0x6a>
 8009e14:	4638      	mov	r0, r7
 8009e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e1a:	bf00      	nop
 8009e1c:	0800ed88 	.word	0x0800ed88
 8009e20:	0800eb3a 	.word	0x0800eb3a
 8009e24:	0800ec38 	.word	0x0800ec38

08009e28 <__lshift>:
 8009e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	6849      	ldr	r1, [r1, #4]
 8009e30:	6923      	ldr	r3, [r4, #16]
 8009e32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e36:	68a3      	ldr	r3, [r4, #8]
 8009e38:	4607      	mov	r7, r0
 8009e3a:	4691      	mov	r9, r2
 8009e3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e40:	f108 0601 	add.w	r6, r8, #1
 8009e44:	42b3      	cmp	r3, r6
 8009e46:	db0b      	blt.n	8009e60 <__lshift+0x38>
 8009e48:	4638      	mov	r0, r7
 8009e4a:	f7ff fd91 	bl	8009970 <_Balloc>
 8009e4e:	4605      	mov	r5, r0
 8009e50:	b948      	cbnz	r0, 8009e66 <__lshift+0x3e>
 8009e52:	4602      	mov	r2, r0
 8009e54:	4b2a      	ldr	r3, [pc, #168]	; (8009f00 <__lshift+0xd8>)
 8009e56:	482b      	ldr	r0, [pc, #172]	; (8009f04 <__lshift+0xdc>)
 8009e58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e5c:	f7fe f9fa 	bl	8008254 <__assert_func>
 8009e60:	3101      	adds	r1, #1
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	e7ee      	b.n	8009e44 <__lshift+0x1c>
 8009e66:	2300      	movs	r3, #0
 8009e68:	f100 0114 	add.w	r1, r0, #20
 8009e6c:	f100 0210 	add.w	r2, r0, #16
 8009e70:	4618      	mov	r0, r3
 8009e72:	4553      	cmp	r3, sl
 8009e74:	db37      	blt.n	8009ee6 <__lshift+0xbe>
 8009e76:	6920      	ldr	r0, [r4, #16]
 8009e78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e7c:	f104 0314 	add.w	r3, r4, #20
 8009e80:	f019 091f 	ands.w	r9, r9, #31
 8009e84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e8c:	d02f      	beq.n	8009eee <__lshift+0xc6>
 8009e8e:	f1c9 0e20 	rsb	lr, r9, #32
 8009e92:	468a      	mov	sl, r1
 8009e94:	f04f 0c00 	mov.w	ip, #0
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	fa02 f209 	lsl.w	r2, r2, r9
 8009e9e:	ea42 020c 	orr.w	r2, r2, ip
 8009ea2:	f84a 2b04 	str.w	r2, [sl], #4
 8009ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eaa:	4298      	cmp	r0, r3
 8009eac:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009eb0:	d8f2      	bhi.n	8009e98 <__lshift+0x70>
 8009eb2:	1b03      	subs	r3, r0, r4
 8009eb4:	3b15      	subs	r3, #21
 8009eb6:	f023 0303 	bic.w	r3, r3, #3
 8009eba:	3304      	adds	r3, #4
 8009ebc:	f104 0215 	add.w	r2, r4, #21
 8009ec0:	4290      	cmp	r0, r2
 8009ec2:	bf38      	it	cc
 8009ec4:	2304      	movcc	r3, #4
 8009ec6:	f841 c003 	str.w	ip, [r1, r3]
 8009eca:	f1bc 0f00 	cmp.w	ip, #0
 8009ece:	d001      	beq.n	8009ed4 <__lshift+0xac>
 8009ed0:	f108 0602 	add.w	r6, r8, #2
 8009ed4:	3e01      	subs	r6, #1
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	612e      	str	r6, [r5, #16]
 8009eda:	4621      	mov	r1, r4
 8009edc:	f7ff fd88 	bl	80099f0 <_Bfree>
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009eea:	3301      	adds	r3, #1
 8009eec:	e7c1      	b.n	8009e72 <__lshift+0x4a>
 8009eee:	3904      	subs	r1, #4
 8009ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ef4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ef8:	4298      	cmp	r0, r3
 8009efa:	d8f9      	bhi.n	8009ef0 <__lshift+0xc8>
 8009efc:	e7ea      	b.n	8009ed4 <__lshift+0xac>
 8009efe:	bf00      	nop
 8009f00:	0800ebac 	.word	0x0800ebac
 8009f04:	0800ec38 	.word	0x0800ec38

08009f08 <__mcmp>:
 8009f08:	b530      	push	{r4, r5, lr}
 8009f0a:	6902      	ldr	r2, [r0, #16]
 8009f0c:	690c      	ldr	r4, [r1, #16]
 8009f0e:	1b12      	subs	r2, r2, r4
 8009f10:	d10e      	bne.n	8009f30 <__mcmp+0x28>
 8009f12:	f100 0314 	add.w	r3, r0, #20
 8009f16:	3114      	adds	r1, #20
 8009f18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f28:	42a5      	cmp	r5, r4
 8009f2a:	d003      	beq.n	8009f34 <__mcmp+0x2c>
 8009f2c:	d305      	bcc.n	8009f3a <__mcmp+0x32>
 8009f2e:	2201      	movs	r2, #1
 8009f30:	4610      	mov	r0, r2
 8009f32:	bd30      	pop	{r4, r5, pc}
 8009f34:	4283      	cmp	r3, r0
 8009f36:	d3f3      	bcc.n	8009f20 <__mcmp+0x18>
 8009f38:	e7fa      	b.n	8009f30 <__mcmp+0x28>
 8009f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3e:	e7f7      	b.n	8009f30 <__mcmp+0x28>

08009f40 <__mdiff>:
 8009f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f44:	460c      	mov	r4, r1
 8009f46:	4606      	mov	r6, r0
 8009f48:	4611      	mov	r1, r2
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	4690      	mov	r8, r2
 8009f4e:	f7ff ffdb 	bl	8009f08 <__mcmp>
 8009f52:	1e05      	subs	r5, r0, #0
 8009f54:	d110      	bne.n	8009f78 <__mdiff+0x38>
 8009f56:	4629      	mov	r1, r5
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f7ff fd09 	bl	8009970 <_Balloc>
 8009f5e:	b930      	cbnz	r0, 8009f6e <__mdiff+0x2e>
 8009f60:	4b3a      	ldr	r3, [pc, #232]	; (800a04c <__mdiff+0x10c>)
 8009f62:	4602      	mov	r2, r0
 8009f64:	f240 2132 	movw	r1, #562	; 0x232
 8009f68:	4839      	ldr	r0, [pc, #228]	; (800a050 <__mdiff+0x110>)
 8009f6a:	f7fe f973 	bl	8008254 <__assert_func>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f78:	bfa4      	itt	ge
 8009f7a:	4643      	movge	r3, r8
 8009f7c:	46a0      	movge	r8, r4
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f84:	bfa6      	itte	ge
 8009f86:	461c      	movge	r4, r3
 8009f88:	2500      	movge	r5, #0
 8009f8a:	2501      	movlt	r5, #1
 8009f8c:	f7ff fcf0 	bl	8009970 <_Balloc>
 8009f90:	b920      	cbnz	r0, 8009f9c <__mdiff+0x5c>
 8009f92:	4b2e      	ldr	r3, [pc, #184]	; (800a04c <__mdiff+0x10c>)
 8009f94:	4602      	mov	r2, r0
 8009f96:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f9a:	e7e5      	b.n	8009f68 <__mdiff+0x28>
 8009f9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009fa0:	6926      	ldr	r6, [r4, #16]
 8009fa2:	60c5      	str	r5, [r0, #12]
 8009fa4:	f104 0914 	add.w	r9, r4, #20
 8009fa8:	f108 0514 	add.w	r5, r8, #20
 8009fac:	f100 0e14 	add.w	lr, r0, #20
 8009fb0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009fb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009fb8:	f108 0210 	add.w	r2, r8, #16
 8009fbc:	46f2      	mov	sl, lr
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009fc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fc8:	fa1f f883 	uxth.w	r8, r3
 8009fcc:	fa11 f18b 	uxtah	r1, r1, fp
 8009fd0:	0c1b      	lsrs	r3, r3, #16
 8009fd2:	eba1 0808 	sub.w	r8, r1, r8
 8009fd6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009fde:	fa1f f888 	uxth.w	r8, r8
 8009fe2:	1419      	asrs	r1, r3, #16
 8009fe4:	454e      	cmp	r6, r9
 8009fe6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fea:	f84a 3b04 	str.w	r3, [sl], #4
 8009fee:	d8e7      	bhi.n	8009fc0 <__mdiff+0x80>
 8009ff0:	1b33      	subs	r3, r6, r4
 8009ff2:	3b15      	subs	r3, #21
 8009ff4:	f023 0303 	bic.w	r3, r3, #3
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	3415      	adds	r4, #21
 8009ffc:	42a6      	cmp	r6, r4
 8009ffe:	bf38      	it	cc
 800a000:	2304      	movcc	r3, #4
 800a002:	441d      	add	r5, r3
 800a004:	4473      	add	r3, lr
 800a006:	469e      	mov	lr, r3
 800a008:	462e      	mov	r6, r5
 800a00a:	4566      	cmp	r6, ip
 800a00c:	d30e      	bcc.n	800a02c <__mdiff+0xec>
 800a00e:	f10c 0203 	add.w	r2, ip, #3
 800a012:	1b52      	subs	r2, r2, r5
 800a014:	f022 0203 	bic.w	r2, r2, #3
 800a018:	3d03      	subs	r5, #3
 800a01a:	45ac      	cmp	ip, r5
 800a01c:	bf38      	it	cc
 800a01e:	2200      	movcc	r2, #0
 800a020:	441a      	add	r2, r3
 800a022:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a026:	b17b      	cbz	r3, 800a048 <__mdiff+0x108>
 800a028:	6107      	str	r7, [r0, #16]
 800a02a:	e7a3      	b.n	8009f74 <__mdiff+0x34>
 800a02c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a030:	fa11 f288 	uxtah	r2, r1, r8
 800a034:	1414      	asrs	r4, r2, #16
 800a036:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a03a:	b292      	uxth	r2, r2
 800a03c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a040:	f84e 2b04 	str.w	r2, [lr], #4
 800a044:	1421      	asrs	r1, r4, #16
 800a046:	e7e0      	b.n	800a00a <__mdiff+0xca>
 800a048:	3f01      	subs	r7, #1
 800a04a:	e7ea      	b.n	800a022 <__mdiff+0xe2>
 800a04c:	0800ebac 	.word	0x0800ebac
 800a050:	0800ec38 	.word	0x0800ec38

0800a054 <__ulp>:
 800a054:	b082      	sub	sp, #8
 800a056:	ed8d 0b00 	vstr	d0, [sp]
 800a05a:	9b01      	ldr	r3, [sp, #4]
 800a05c:	4912      	ldr	r1, [pc, #72]	; (800a0a8 <__ulp+0x54>)
 800a05e:	4019      	ands	r1, r3
 800a060:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a064:	2900      	cmp	r1, #0
 800a066:	dd05      	ble.n	800a074 <__ulp+0x20>
 800a068:	2200      	movs	r2, #0
 800a06a:	460b      	mov	r3, r1
 800a06c:	ec43 2b10 	vmov	d0, r2, r3
 800a070:	b002      	add	sp, #8
 800a072:	4770      	bx	lr
 800a074:	4249      	negs	r1, r1
 800a076:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a07a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a07e:	f04f 0200 	mov.w	r2, #0
 800a082:	f04f 0300 	mov.w	r3, #0
 800a086:	da04      	bge.n	800a092 <__ulp+0x3e>
 800a088:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a08c:	fa41 f300 	asr.w	r3, r1, r0
 800a090:	e7ec      	b.n	800a06c <__ulp+0x18>
 800a092:	f1a0 0114 	sub.w	r1, r0, #20
 800a096:	291e      	cmp	r1, #30
 800a098:	bfda      	itte	le
 800a09a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a09e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a0a2:	2101      	movgt	r1, #1
 800a0a4:	460a      	mov	r2, r1
 800a0a6:	e7e1      	b.n	800a06c <__ulp+0x18>
 800a0a8:	7ff00000 	.word	0x7ff00000

0800a0ac <__b2d>:
 800a0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ae:	6905      	ldr	r5, [r0, #16]
 800a0b0:	f100 0714 	add.w	r7, r0, #20
 800a0b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a0b8:	1f2e      	subs	r6, r5, #4
 800a0ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f7ff fd48 	bl	8009b54 <__hi0bits>
 800a0c4:	f1c0 0320 	rsb	r3, r0, #32
 800a0c8:	280a      	cmp	r0, #10
 800a0ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a148 <__b2d+0x9c>
 800a0ce:	600b      	str	r3, [r1, #0]
 800a0d0:	dc14      	bgt.n	800a0fc <__b2d+0x50>
 800a0d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800a0d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800a0da:	42b7      	cmp	r7, r6
 800a0dc:	ea41 030c 	orr.w	r3, r1, ip
 800a0e0:	bf34      	ite	cc
 800a0e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a0e6:	2100      	movcs	r1, #0
 800a0e8:	3015      	adds	r0, #21
 800a0ea:	fa04 f000 	lsl.w	r0, r4, r0
 800a0ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800a0f2:	ea40 0201 	orr.w	r2, r0, r1
 800a0f6:	ec43 2b10 	vmov	d0, r2, r3
 800a0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0fc:	42b7      	cmp	r7, r6
 800a0fe:	bf3a      	itte	cc
 800a100:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a104:	f1a5 0608 	subcc.w	r6, r5, #8
 800a108:	2100      	movcs	r1, #0
 800a10a:	380b      	subs	r0, #11
 800a10c:	d017      	beq.n	800a13e <__b2d+0x92>
 800a10e:	f1c0 0c20 	rsb	ip, r0, #32
 800a112:	fa04 f500 	lsl.w	r5, r4, r0
 800a116:	42be      	cmp	r6, r7
 800a118:	fa21 f40c 	lsr.w	r4, r1, ip
 800a11c:	ea45 0504 	orr.w	r5, r5, r4
 800a120:	bf8c      	ite	hi
 800a122:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a126:	2400      	movls	r4, #0
 800a128:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a12c:	fa01 f000 	lsl.w	r0, r1, r0
 800a130:	fa24 f40c 	lsr.w	r4, r4, ip
 800a134:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a138:	ea40 0204 	orr.w	r2, r0, r4
 800a13c:	e7db      	b.n	800a0f6 <__b2d+0x4a>
 800a13e:	ea44 030c 	orr.w	r3, r4, ip
 800a142:	460a      	mov	r2, r1
 800a144:	e7d7      	b.n	800a0f6 <__b2d+0x4a>
 800a146:	bf00      	nop
 800a148:	3ff00000 	.word	0x3ff00000

0800a14c <__d2b>:
 800a14c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a150:	4689      	mov	r9, r1
 800a152:	2101      	movs	r1, #1
 800a154:	ec57 6b10 	vmov	r6, r7, d0
 800a158:	4690      	mov	r8, r2
 800a15a:	f7ff fc09 	bl	8009970 <_Balloc>
 800a15e:	4604      	mov	r4, r0
 800a160:	b930      	cbnz	r0, 800a170 <__d2b+0x24>
 800a162:	4602      	mov	r2, r0
 800a164:	4b25      	ldr	r3, [pc, #148]	; (800a1fc <__d2b+0xb0>)
 800a166:	4826      	ldr	r0, [pc, #152]	; (800a200 <__d2b+0xb4>)
 800a168:	f240 310a 	movw	r1, #778	; 0x30a
 800a16c:	f7fe f872 	bl	8008254 <__assert_func>
 800a170:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a174:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a178:	bb35      	cbnz	r5, 800a1c8 <__d2b+0x7c>
 800a17a:	2e00      	cmp	r6, #0
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	d028      	beq.n	800a1d2 <__d2b+0x86>
 800a180:	4668      	mov	r0, sp
 800a182:	9600      	str	r6, [sp, #0]
 800a184:	f7ff fd06 	bl	8009b94 <__lo0bits>
 800a188:	9900      	ldr	r1, [sp, #0]
 800a18a:	b300      	cbz	r0, 800a1ce <__d2b+0x82>
 800a18c:	9a01      	ldr	r2, [sp, #4]
 800a18e:	f1c0 0320 	rsb	r3, r0, #32
 800a192:	fa02 f303 	lsl.w	r3, r2, r3
 800a196:	430b      	orrs	r3, r1
 800a198:	40c2      	lsrs	r2, r0
 800a19a:	6163      	str	r3, [r4, #20]
 800a19c:	9201      	str	r2, [sp, #4]
 800a19e:	9b01      	ldr	r3, [sp, #4]
 800a1a0:	61a3      	str	r3, [r4, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	bf14      	ite	ne
 800a1a6:	2202      	movne	r2, #2
 800a1a8:	2201      	moveq	r2, #1
 800a1aa:	6122      	str	r2, [r4, #16]
 800a1ac:	b1d5      	cbz	r5, 800a1e4 <__d2b+0x98>
 800a1ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a1b2:	4405      	add	r5, r0
 800a1b4:	f8c9 5000 	str.w	r5, [r9]
 800a1b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1bc:	f8c8 0000 	str.w	r0, [r8]
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	b003      	add	sp, #12
 800a1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1cc:	e7d5      	b.n	800a17a <__d2b+0x2e>
 800a1ce:	6161      	str	r1, [r4, #20]
 800a1d0:	e7e5      	b.n	800a19e <__d2b+0x52>
 800a1d2:	a801      	add	r0, sp, #4
 800a1d4:	f7ff fcde 	bl	8009b94 <__lo0bits>
 800a1d8:	9b01      	ldr	r3, [sp, #4]
 800a1da:	6163      	str	r3, [r4, #20]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	6122      	str	r2, [r4, #16]
 800a1e0:	3020      	adds	r0, #32
 800a1e2:	e7e3      	b.n	800a1ac <__d2b+0x60>
 800a1e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1ec:	f8c9 0000 	str.w	r0, [r9]
 800a1f0:	6918      	ldr	r0, [r3, #16]
 800a1f2:	f7ff fcaf 	bl	8009b54 <__hi0bits>
 800a1f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1fa:	e7df      	b.n	800a1bc <__d2b+0x70>
 800a1fc:	0800ebac 	.word	0x0800ebac
 800a200:	0800ec38 	.word	0x0800ec38

0800a204 <__ratio>:
 800a204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a208:	4688      	mov	r8, r1
 800a20a:	4669      	mov	r1, sp
 800a20c:	4681      	mov	r9, r0
 800a20e:	f7ff ff4d 	bl	800a0ac <__b2d>
 800a212:	a901      	add	r1, sp, #4
 800a214:	4640      	mov	r0, r8
 800a216:	ec55 4b10 	vmov	r4, r5, d0
 800a21a:	f7ff ff47 	bl	800a0ac <__b2d>
 800a21e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a222:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a226:	eba3 0c02 	sub.w	ip, r3, r2
 800a22a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a22e:	1a9b      	subs	r3, r3, r2
 800a230:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a234:	ec51 0b10 	vmov	r0, r1, d0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	bfd6      	itet	le
 800a23c:	460a      	movle	r2, r1
 800a23e:	462a      	movgt	r2, r5
 800a240:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a244:	468b      	mov	fp, r1
 800a246:	462f      	mov	r7, r5
 800a248:	bfd4      	ite	le
 800a24a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a24e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a252:	4620      	mov	r0, r4
 800a254:	ee10 2a10 	vmov	r2, s0
 800a258:	465b      	mov	r3, fp
 800a25a:	4639      	mov	r1, r7
 800a25c:	f7f6 faf6 	bl	800084c <__aeabi_ddiv>
 800a260:	ec41 0b10 	vmov	d0, r0, r1
 800a264:	b003      	add	sp, #12
 800a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a26a <__copybits>:
 800a26a:	3901      	subs	r1, #1
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	1149      	asrs	r1, r1, #5
 800a270:	6914      	ldr	r4, [r2, #16]
 800a272:	3101      	adds	r1, #1
 800a274:	f102 0314 	add.w	r3, r2, #20
 800a278:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a27c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a280:	1f05      	subs	r5, r0, #4
 800a282:	42a3      	cmp	r3, r4
 800a284:	d30c      	bcc.n	800a2a0 <__copybits+0x36>
 800a286:	1aa3      	subs	r3, r4, r2
 800a288:	3b11      	subs	r3, #17
 800a28a:	f023 0303 	bic.w	r3, r3, #3
 800a28e:	3211      	adds	r2, #17
 800a290:	42a2      	cmp	r2, r4
 800a292:	bf88      	it	hi
 800a294:	2300      	movhi	r3, #0
 800a296:	4418      	add	r0, r3
 800a298:	2300      	movs	r3, #0
 800a29a:	4288      	cmp	r0, r1
 800a29c:	d305      	bcc.n	800a2aa <__copybits+0x40>
 800a29e:	bd70      	pop	{r4, r5, r6, pc}
 800a2a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800a2a8:	e7eb      	b.n	800a282 <__copybits+0x18>
 800a2aa:	f840 3b04 	str.w	r3, [r0], #4
 800a2ae:	e7f4      	b.n	800a29a <__copybits+0x30>

0800a2b0 <__any_on>:
 800a2b0:	f100 0214 	add.w	r2, r0, #20
 800a2b4:	6900      	ldr	r0, [r0, #16]
 800a2b6:	114b      	asrs	r3, r1, #5
 800a2b8:	4298      	cmp	r0, r3
 800a2ba:	b510      	push	{r4, lr}
 800a2bc:	db11      	blt.n	800a2e2 <__any_on+0x32>
 800a2be:	dd0a      	ble.n	800a2d6 <__any_on+0x26>
 800a2c0:	f011 011f 	ands.w	r1, r1, #31
 800a2c4:	d007      	beq.n	800a2d6 <__any_on+0x26>
 800a2c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2ca:	fa24 f001 	lsr.w	r0, r4, r1
 800a2ce:	fa00 f101 	lsl.w	r1, r0, r1
 800a2d2:	428c      	cmp	r4, r1
 800a2d4:	d10b      	bne.n	800a2ee <__any_on+0x3e>
 800a2d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d803      	bhi.n	800a2e6 <__any_on+0x36>
 800a2de:	2000      	movs	r0, #0
 800a2e0:	bd10      	pop	{r4, pc}
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	e7f7      	b.n	800a2d6 <__any_on+0x26>
 800a2e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2ea:	2900      	cmp	r1, #0
 800a2ec:	d0f5      	beq.n	800a2da <__any_on+0x2a>
 800a2ee:	2001      	movs	r0, #1
 800a2f0:	e7f6      	b.n	800a2e0 <__any_on+0x30>

0800a2f2 <_calloc_r>:
 800a2f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2f4:	fba1 2402 	umull	r2, r4, r1, r2
 800a2f8:	b94c      	cbnz	r4, 800a30e <_calloc_r+0x1c>
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	9201      	str	r2, [sp, #4]
 800a2fe:	f7fc f8c3 	bl	8006488 <_malloc_r>
 800a302:	9a01      	ldr	r2, [sp, #4]
 800a304:	4605      	mov	r5, r0
 800a306:	b930      	cbnz	r0, 800a316 <_calloc_r+0x24>
 800a308:	4628      	mov	r0, r5
 800a30a:	b003      	add	sp, #12
 800a30c:	bd30      	pop	{r4, r5, pc}
 800a30e:	220c      	movs	r2, #12
 800a310:	6002      	str	r2, [r0, #0]
 800a312:	2500      	movs	r5, #0
 800a314:	e7f8      	b.n	800a308 <_calloc_r+0x16>
 800a316:	4621      	mov	r1, r4
 800a318:	f7fc f88d 	bl	8006436 <memset>
 800a31c:	e7f4      	b.n	800a308 <_calloc_r+0x16>
	...

0800a320 <_free_r>:
 800a320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a322:	2900      	cmp	r1, #0
 800a324:	d044      	beq.n	800a3b0 <_free_r+0x90>
 800a326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a32a:	9001      	str	r0, [sp, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f1a1 0404 	sub.w	r4, r1, #4
 800a332:	bfb8      	it	lt
 800a334:	18e4      	addlt	r4, r4, r3
 800a336:	f7ff fb0f 	bl	8009958 <__malloc_lock>
 800a33a:	4a1e      	ldr	r2, [pc, #120]	; (800a3b4 <_free_r+0x94>)
 800a33c:	9801      	ldr	r0, [sp, #4]
 800a33e:	6813      	ldr	r3, [r2, #0]
 800a340:	b933      	cbnz	r3, 800a350 <_free_r+0x30>
 800a342:	6063      	str	r3, [r4, #4]
 800a344:	6014      	str	r4, [r2, #0]
 800a346:	b003      	add	sp, #12
 800a348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a34c:	f7ff bb0a 	b.w	8009964 <__malloc_unlock>
 800a350:	42a3      	cmp	r3, r4
 800a352:	d908      	bls.n	800a366 <_free_r+0x46>
 800a354:	6825      	ldr	r5, [r4, #0]
 800a356:	1961      	adds	r1, r4, r5
 800a358:	428b      	cmp	r3, r1
 800a35a:	bf01      	itttt	eq
 800a35c:	6819      	ldreq	r1, [r3, #0]
 800a35e:	685b      	ldreq	r3, [r3, #4]
 800a360:	1949      	addeq	r1, r1, r5
 800a362:	6021      	streq	r1, [r4, #0]
 800a364:	e7ed      	b.n	800a342 <_free_r+0x22>
 800a366:	461a      	mov	r2, r3
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	b10b      	cbz	r3, 800a370 <_free_r+0x50>
 800a36c:	42a3      	cmp	r3, r4
 800a36e:	d9fa      	bls.n	800a366 <_free_r+0x46>
 800a370:	6811      	ldr	r1, [r2, #0]
 800a372:	1855      	adds	r5, r2, r1
 800a374:	42a5      	cmp	r5, r4
 800a376:	d10b      	bne.n	800a390 <_free_r+0x70>
 800a378:	6824      	ldr	r4, [r4, #0]
 800a37a:	4421      	add	r1, r4
 800a37c:	1854      	adds	r4, r2, r1
 800a37e:	42a3      	cmp	r3, r4
 800a380:	6011      	str	r1, [r2, #0]
 800a382:	d1e0      	bne.n	800a346 <_free_r+0x26>
 800a384:	681c      	ldr	r4, [r3, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	6053      	str	r3, [r2, #4]
 800a38a:	4421      	add	r1, r4
 800a38c:	6011      	str	r1, [r2, #0]
 800a38e:	e7da      	b.n	800a346 <_free_r+0x26>
 800a390:	d902      	bls.n	800a398 <_free_r+0x78>
 800a392:	230c      	movs	r3, #12
 800a394:	6003      	str	r3, [r0, #0]
 800a396:	e7d6      	b.n	800a346 <_free_r+0x26>
 800a398:	6825      	ldr	r5, [r4, #0]
 800a39a:	1961      	adds	r1, r4, r5
 800a39c:	428b      	cmp	r3, r1
 800a39e:	bf04      	itt	eq
 800a3a0:	6819      	ldreq	r1, [r3, #0]
 800a3a2:	685b      	ldreq	r3, [r3, #4]
 800a3a4:	6063      	str	r3, [r4, #4]
 800a3a6:	bf04      	itt	eq
 800a3a8:	1949      	addeq	r1, r1, r5
 800a3aa:	6021      	streq	r1, [r4, #0]
 800a3ac:	6054      	str	r4, [r2, #4]
 800a3ae:	e7ca      	b.n	800a346 <_free_r+0x26>
 800a3b0:	b003      	add	sp, #12
 800a3b2:	bd30      	pop	{r4, r5, pc}
 800a3b4:	2000090c 	.word	0x2000090c

0800a3b8 <__ssputs_r>:
 800a3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3bc:	688e      	ldr	r6, [r1, #8]
 800a3be:	429e      	cmp	r6, r3
 800a3c0:	4682      	mov	sl, r0
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	4690      	mov	r8, r2
 800a3c6:	461f      	mov	r7, r3
 800a3c8:	d838      	bhi.n	800a43c <__ssputs_r+0x84>
 800a3ca:	898a      	ldrh	r2, [r1, #12]
 800a3cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3d0:	d032      	beq.n	800a438 <__ssputs_r+0x80>
 800a3d2:	6825      	ldr	r5, [r4, #0]
 800a3d4:	6909      	ldr	r1, [r1, #16]
 800a3d6:	eba5 0901 	sub.w	r9, r5, r1
 800a3da:	6965      	ldr	r5, [r4, #20]
 800a3dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	444b      	add	r3, r9
 800a3e8:	106d      	asrs	r5, r5, #1
 800a3ea:	429d      	cmp	r5, r3
 800a3ec:	bf38      	it	cc
 800a3ee:	461d      	movcc	r5, r3
 800a3f0:	0553      	lsls	r3, r2, #21
 800a3f2:	d531      	bpl.n	800a458 <__ssputs_r+0xa0>
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	f7fc f847 	bl	8006488 <_malloc_r>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	b950      	cbnz	r0, 800a414 <__ssputs_r+0x5c>
 800a3fe:	230c      	movs	r3, #12
 800a400:	f8ca 3000 	str.w	r3, [sl]
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a40a:	81a3      	strh	r3, [r4, #12]
 800a40c:	f04f 30ff 	mov.w	r0, #4294967295
 800a410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a414:	6921      	ldr	r1, [r4, #16]
 800a416:	464a      	mov	r2, r9
 800a418:	f7fb ffe5 	bl	80063e6 <memcpy>
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a426:	81a3      	strh	r3, [r4, #12]
 800a428:	6126      	str	r6, [r4, #16]
 800a42a:	6165      	str	r5, [r4, #20]
 800a42c:	444e      	add	r6, r9
 800a42e:	eba5 0509 	sub.w	r5, r5, r9
 800a432:	6026      	str	r6, [r4, #0]
 800a434:	60a5      	str	r5, [r4, #8]
 800a436:	463e      	mov	r6, r7
 800a438:	42be      	cmp	r6, r7
 800a43a:	d900      	bls.n	800a43e <__ssputs_r+0x86>
 800a43c:	463e      	mov	r6, r7
 800a43e:	6820      	ldr	r0, [r4, #0]
 800a440:	4632      	mov	r2, r6
 800a442:	4641      	mov	r1, r8
 800a444:	f7fb ffdd 	bl	8006402 <memmove>
 800a448:	68a3      	ldr	r3, [r4, #8]
 800a44a:	1b9b      	subs	r3, r3, r6
 800a44c:	60a3      	str	r3, [r4, #8]
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	4433      	add	r3, r6
 800a452:	6023      	str	r3, [r4, #0]
 800a454:	2000      	movs	r0, #0
 800a456:	e7db      	b.n	800a410 <__ssputs_r+0x58>
 800a458:	462a      	mov	r2, r5
 800a45a:	f000 fac7 	bl	800a9ec <_realloc_r>
 800a45e:	4606      	mov	r6, r0
 800a460:	2800      	cmp	r0, #0
 800a462:	d1e1      	bne.n	800a428 <__ssputs_r+0x70>
 800a464:	6921      	ldr	r1, [r4, #16]
 800a466:	4650      	mov	r0, sl
 800a468:	f7ff ff5a 	bl	800a320 <_free_r>
 800a46c:	e7c7      	b.n	800a3fe <__ssputs_r+0x46>
	...

0800a470 <_svfiprintf_r>:
 800a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	4698      	mov	r8, r3
 800a476:	898b      	ldrh	r3, [r1, #12]
 800a478:	061b      	lsls	r3, r3, #24
 800a47a:	b09d      	sub	sp, #116	; 0x74
 800a47c:	4607      	mov	r7, r0
 800a47e:	460d      	mov	r5, r1
 800a480:	4614      	mov	r4, r2
 800a482:	d50e      	bpl.n	800a4a2 <_svfiprintf_r+0x32>
 800a484:	690b      	ldr	r3, [r1, #16]
 800a486:	b963      	cbnz	r3, 800a4a2 <_svfiprintf_r+0x32>
 800a488:	2140      	movs	r1, #64	; 0x40
 800a48a:	f7fb fffd 	bl	8006488 <_malloc_r>
 800a48e:	6028      	str	r0, [r5, #0]
 800a490:	6128      	str	r0, [r5, #16]
 800a492:	b920      	cbnz	r0, 800a49e <_svfiprintf_r+0x2e>
 800a494:	230c      	movs	r3, #12
 800a496:	603b      	str	r3, [r7, #0]
 800a498:	f04f 30ff 	mov.w	r0, #4294967295
 800a49c:	e0d1      	b.n	800a642 <_svfiprintf_r+0x1d2>
 800a49e:	2340      	movs	r3, #64	; 0x40
 800a4a0:	616b      	str	r3, [r5, #20]
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a6:	2320      	movs	r3, #32
 800a4a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4b0:	2330      	movs	r3, #48	; 0x30
 800a4b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a65c <_svfiprintf_r+0x1ec>
 800a4b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4ba:	f04f 0901 	mov.w	r9, #1
 800a4be:	4623      	mov	r3, r4
 800a4c0:	469a      	mov	sl, r3
 800a4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4c6:	b10a      	cbz	r2, 800a4cc <_svfiprintf_r+0x5c>
 800a4c8:	2a25      	cmp	r2, #37	; 0x25
 800a4ca:	d1f9      	bne.n	800a4c0 <_svfiprintf_r+0x50>
 800a4cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a4d0:	d00b      	beq.n	800a4ea <_svfiprintf_r+0x7a>
 800a4d2:	465b      	mov	r3, fp
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	4638      	mov	r0, r7
 800a4da:	f7ff ff6d 	bl	800a3b8 <__ssputs_r>
 800a4de:	3001      	adds	r0, #1
 800a4e0:	f000 80aa 	beq.w	800a638 <_svfiprintf_r+0x1c8>
 800a4e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4e6:	445a      	add	r2, fp
 800a4e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f000 80a2 	beq.w	800a638 <_svfiprintf_r+0x1c8>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4fe:	f10a 0a01 	add.w	sl, sl, #1
 800a502:	9304      	str	r3, [sp, #16]
 800a504:	9307      	str	r3, [sp, #28]
 800a506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a50a:	931a      	str	r3, [sp, #104]	; 0x68
 800a50c:	4654      	mov	r4, sl
 800a50e:	2205      	movs	r2, #5
 800a510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a514:	4851      	ldr	r0, [pc, #324]	; (800a65c <_svfiprintf_r+0x1ec>)
 800a516:	f7f5 fe63 	bl	80001e0 <memchr>
 800a51a:	9a04      	ldr	r2, [sp, #16]
 800a51c:	b9d8      	cbnz	r0, 800a556 <_svfiprintf_r+0xe6>
 800a51e:	06d0      	lsls	r0, r2, #27
 800a520:	bf44      	itt	mi
 800a522:	2320      	movmi	r3, #32
 800a524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a528:	0711      	lsls	r1, r2, #28
 800a52a:	bf44      	itt	mi
 800a52c:	232b      	movmi	r3, #43	; 0x2b
 800a52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a532:	f89a 3000 	ldrb.w	r3, [sl]
 800a536:	2b2a      	cmp	r3, #42	; 0x2a
 800a538:	d015      	beq.n	800a566 <_svfiprintf_r+0xf6>
 800a53a:	9a07      	ldr	r2, [sp, #28]
 800a53c:	4654      	mov	r4, sl
 800a53e:	2000      	movs	r0, #0
 800a540:	f04f 0c0a 	mov.w	ip, #10
 800a544:	4621      	mov	r1, r4
 800a546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a54a:	3b30      	subs	r3, #48	; 0x30
 800a54c:	2b09      	cmp	r3, #9
 800a54e:	d94e      	bls.n	800a5ee <_svfiprintf_r+0x17e>
 800a550:	b1b0      	cbz	r0, 800a580 <_svfiprintf_r+0x110>
 800a552:	9207      	str	r2, [sp, #28]
 800a554:	e014      	b.n	800a580 <_svfiprintf_r+0x110>
 800a556:	eba0 0308 	sub.w	r3, r0, r8
 800a55a:	fa09 f303 	lsl.w	r3, r9, r3
 800a55e:	4313      	orrs	r3, r2
 800a560:	9304      	str	r3, [sp, #16]
 800a562:	46a2      	mov	sl, r4
 800a564:	e7d2      	b.n	800a50c <_svfiprintf_r+0x9c>
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	1d19      	adds	r1, r3, #4
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	9103      	str	r1, [sp, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	bfbb      	ittet	lt
 800a572:	425b      	neglt	r3, r3
 800a574:	f042 0202 	orrlt.w	r2, r2, #2
 800a578:	9307      	strge	r3, [sp, #28]
 800a57a:	9307      	strlt	r3, [sp, #28]
 800a57c:	bfb8      	it	lt
 800a57e:	9204      	strlt	r2, [sp, #16]
 800a580:	7823      	ldrb	r3, [r4, #0]
 800a582:	2b2e      	cmp	r3, #46	; 0x2e
 800a584:	d10c      	bne.n	800a5a0 <_svfiprintf_r+0x130>
 800a586:	7863      	ldrb	r3, [r4, #1]
 800a588:	2b2a      	cmp	r3, #42	; 0x2a
 800a58a:	d135      	bne.n	800a5f8 <_svfiprintf_r+0x188>
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	1d1a      	adds	r2, r3, #4
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	9203      	str	r2, [sp, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	bfb8      	it	lt
 800a598:	f04f 33ff 	movlt.w	r3, #4294967295
 800a59c:	3402      	adds	r4, #2
 800a59e:	9305      	str	r3, [sp, #20]
 800a5a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a66c <_svfiprintf_r+0x1fc>
 800a5a4:	7821      	ldrb	r1, [r4, #0]
 800a5a6:	2203      	movs	r2, #3
 800a5a8:	4650      	mov	r0, sl
 800a5aa:	f7f5 fe19 	bl	80001e0 <memchr>
 800a5ae:	b140      	cbz	r0, 800a5c2 <_svfiprintf_r+0x152>
 800a5b0:	2340      	movs	r3, #64	; 0x40
 800a5b2:	eba0 000a 	sub.w	r0, r0, sl
 800a5b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a5ba:	9b04      	ldr	r3, [sp, #16]
 800a5bc:	4303      	orrs	r3, r0
 800a5be:	3401      	adds	r4, #1
 800a5c0:	9304      	str	r3, [sp, #16]
 800a5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c6:	4826      	ldr	r0, [pc, #152]	; (800a660 <_svfiprintf_r+0x1f0>)
 800a5c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5cc:	2206      	movs	r2, #6
 800a5ce:	f7f5 fe07 	bl	80001e0 <memchr>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d038      	beq.n	800a648 <_svfiprintf_r+0x1d8>
 800a5d6:	4b23      	ldr	r3, [pc, #140]	; (800a664 <_svfiprintf_r+0x1f4>)
 800a5d8:	bb1b      	cbnz	r3, 800a622 <_svfiprintf_r+0x1b2>
 800a5da:	9b03      	ldr	r3, [sp, #12]
 800a5dc:	3307      	adds	r3, #7
 800a5de:	f023 0307 	bic.w	r3, r3, #7
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	9303      	str	r3, [sp, #12]
 800a5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e8:	4433      	add	r3, r6
 800a5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ec:	e767      	b.n	800a4be <_svfiprintf_r+0x4e>
 800a5ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	2001      	movs	r0, #1
 800a5f6:	e7a5      	b.n	800a544 <_svfiprintf_r+0xd4>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	3401      	adds	r4, #1
 800a5fc:	9305      	str	r3, [sp, #20]
 800a5fe:	4619      	mov	r1, r3
 800a600:	f04f 0c0a 	mov.w	ip, #10
 800a604:	4620      	mov	r0, r4
 800a606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a60a:	3a30      	subs	r2, #48	; 0x30
 800a60c:	2a09      	cmp	r2, #9
 800a60e:	d903      	bls.n	800a618 <_svfiprintf_r+0x1a8>
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0c5      	beq.n	800a5a0 <_svfiprintf_r+0x130>
 800a614:	9105      	str	r1, [sp, #20]
 800a616:	e7c3      	b.n	800a5a0 <_svfiprintf_r+0x130>
 800a618:	fb0c 2101 	mla	r1, ip, r1, r2
 800a61c:	4604      	mov	r4, r0
 800a61e:	2301      	movs	r3, #1
 800a620:	e7f0      	b.n	800a604 <_svfiprintf_r+0x194>
 800a622:	ab03      	add	r3, sp, #12
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	462a      	mov	r2, r5
 800a628:	4b0f      	ldr	r3, [pc, #60]	; (800a668 <_svfiprintf_r+0x1f8>)
 800a62a:	a904      	add	r1, sp, #16
 800a62c:	4638      	mov	r0, r7
 800a62e:	f7fc f83f 	bl	80066b0 <_printf_float>
 800a632:	1c42      	adds	r2, r0, #1
 800a634:	4606      	mov	r6, r0
 800a636:	d1d6      	bne.n	800a5e6 <_svfiprintf_r+0x176>
 800a638:	89ab      	ldrh	r3, [r5, #12]
 800a63a:	065b      	lsls	r3, r3, #25
 800a63c:	f53f af2c 	bmi.w	800a498 <_svfiprintf_r+0x28>
 800a640:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a642:	b01d      	add	sp, #116	; 0x74
 800a644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a648:	ab03      	add	r3, sp, #12
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	462a      	mov	r2, r5
 800a64e:	4b06      	ldr	r3, [pc, #24]	; (800a668 <_svfiprintf_r+0x1f8>)
 800a650:	a904      	add	r1, sp, #16
 800a652:	4638      	mov	r0, r7
 800a654:	f7fc fad0 	bl	8006bf8 <_printf_i>
 800a658:	e7eb      	b.n	800a632 <_svfiprintf_r+0x1c2>
 800a65a:	bf00      	nop
 800a65c:	0800ed94 	.word	0x0800ed94
 800a660:	0800ed9e 	.word	0x0800ed9e
 800a664:	080066b1 	.word	0x080066b1
 800a668:	0800a3b9 	.word	0x0800a3b9
 800a66c:	0800ed9a 	.word	0x0800ed9a

0800a670 <__sfputc_r>:
 800a670:	6893      	ldr	r3, [r2, #8]
 800a672:	3b01      	subs	r3, #1
 800a674:	2b00      	cmp	r3, #0
 800a676:	b410      	push	{r4}
 800a678:	6093      	str	r3, [r2, #8]
 800a67a:	da08      	bge.n	800a68e <__sfputc_r+0x1e>
 800a67c:	6994      	ldr	r4, [r2, #24]
 800a67e:	42a3      	cmp	r3, r4
 800a680:	db01      	blt.n	800a686 <__sfputc_r+0x16>
 800a682:	290a      	cmp	r1, #10
 800a684:	d103      	bne.n	800a68e <__sfputc_r+0x1e>
 800a686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a68a:	f7fd bd11 	b.w	80080b0 <__swbuf_r>
 800a68e:	6813      	ldr	r3, [r2, #0]
 800a690:	1c58      	adds	r0, r3, #1
 800a692:	6010      	str	r0, [r2, #0]
 800a694:	7019      	strb	r1, [r3, #0]
 800a696:	4608      	mov	r0, r1
 800a698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <__sfputs_r>:
 800a69e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	460f      	mov	r7, r1
 800a6a4:	4614      	mov	r4, r2
 800a6a6:	18d5      	adds	r5, r2, r3
 800a6a8:	42ac      	cmp	r4, r5
 800a6aa:	d101      	bne.n	800a6b0 <__sfputs_r+0x12>
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	e007      	b.n	800a6c0 <__sfputs_r+0x22>
 800a6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b4:	463a      	mov	r2, r7
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f7ff ffda 	bl	800a670 <__sfputc_r>
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	d1f3      	bne.n	800a6a8 <__sfputs_r+0xa>
 800a6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6c4 <_vfiprintf_r>:
 800a6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c8:	460d      	mov	r5, r1
 800a6ca:	b09d      	sub	sp, #116	; 0x74
 800a6cc:	4614      	mov	r4, r2
 800a6ce:	4698      	mov	r8, r3
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	b118      	cbz	r0, 800a6dc <_vfiprintf_r+0x18>
 800a6d4:	6983      	ldr	r3, [r0, #24]
 800a6d6:	b90b      	cbnz	r3, 800a6dc <_vfiprintf_r+0x18>
 800a6d8:	f7fb fdc0 	bl	800625c <__sinit>
 800a6dc:	4b89      	ldr	r3, [pc, #548]	; (800a904 <_vfiprintf_r+0x240>)
 800a6de:	429d      	cmp	r5, r3
 800a6e0:	d11b      	bne.n	800a71a <_vfiprintf_r+0x56>
 800a6e2:	6875      	ldr	r5, [r6, #4]
 800a6e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e6:	07d9      	lsls	r1, r3, #31
 800a6e8:	d405      	bmi.n	800a6f6 <_vfiprintf_r+0x32>
 800a6ea:	89ab      	ldrh	r3, [r5, #12]
 800a6ec:	059a      	lsls	r2, r3, #22
 800a6ee:	d402      	bmi.n	800a6f6 <_vfiprintf_r+0x32>
 800a6f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6f2:	f7fb fe76 	bl	80063e2 <__retarget_lock_acquire_recursive>
 800a6f6:	89ab      	ldrh	r3, [r5, #12]
 800a6f8:	071b      	lsls	r3, r3, #28
 800a6fa:	d501      	bpl.n	800a700 <_vfiprintf_r+0x3c>
 800a6fc:	692b      	ldr	r3, [r5, #16]
 800a6fe:	b9eb      	cbnz	r3, 800a73c <_vfiprintf_r+0x78>
 800a700:	4629      	mov	r1, r5
 800a702:	4630      	mov	r0, r6
 800a704:	f7fd fd38 	bl	8008178 <__swsetup_r>
 800a708:	b1c0      	cbz	r0, 800a73c <_vfiprintf_r+0x78>
 800a70a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a70c:	07dc      	lsls	r4, r3, #31
 800a70e:	d50e      	bpl.n	800a72e <_vfiprintf_r+0x6a>
 800a710:	f04f 30ff 	mov.w	r0, #4294967295
 800a714:	b01d      	add	sp, #116	; 0x74
 800a716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71a:	4b7b      	ldr	r3, [pc, #492]	; (800a908 <_vfiprintf_r+0x244>)
 800a71c:	429d      	cmp	r5, r3
 800a71e:	d101      	bne.n	800a724 <_vfiprintf_r+0x60>
 800a720:	68b5      	ldr	r5, [r6, #8]
 800a722:	e7df      	b.n	800a6e4 <_vfiprintf_r+0x20>
 800a724:	4b79      	ldr	r3, [pc, #484]	; (800a90c <_vfiprintf_r+0x248>)
 800a726:	429d      	cmp	r5, r3
 800a728:	bf08      	it	eq
 800a72a:	68f5      	ldreq	r5, [r6, #12]
 800a72c:	e7da      	b.n	800a6e4 <_vfiprintf_r+0x20>
 800a72e:	89ab      	ldrh	r3, [r5, #12]
 800a730:	0598      	lsls	r0, r3, #22
 800a732:	d4ed      	bmi.n	800a710 <_vfiprintf_r+0x4c>
 800a734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a736:	f7fb fe55 	bl	80063e4 <__retarget_lock_release_recursive>
 800a73a:	e7e9      	b.n	800a710 <_vfiprintf_r+0x4c>
 800a73c:	2300      	movs	r3, #0
 800a73e:	9309      	str	r3, [sp, #36]	; 0x24
 800a740:	2320      	movs	r3, #32
 800a742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a746:	f8cd 800c 	str.w	r8, [sp, #12]
 800a74a:	2330      	movs	r3, #48	; 0x30
 800a74c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a910 <_vfiprintf_r+0x24c>
 800a750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a754:	f04f 0901 	mov.w	r9, #1
 800a758:	4623      	mov	r3, r4
 800a75a:	469a      	mov	sl, r3
 800a75c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a760:	b10a      	cbz	r2, 800a766 <_vfiprintf_r+0xa2>
 800a762:	2a25      	cmp	r2, #37	; 0x25
 800a764:	d1f9      	bne.n	800a75a <_vfiprintf_r+0x96>
 800a766:	ebba 0b04 	subs.w	fp, sl, r4
 800a76a:	d00b      	beq.n	800a784 <_vfiprintf_r+0xc0>
 800a76c:	465b      	mov	r3, fp
 800a76e:	4622      	mov	r2, r4
 800a770:	4629      	mov	r1, r5
 800a772:	4630      	mov	r0, r6
 800a774:	f7ff ff93 	bl	800a69e <__sfputs_r>
 800a778:	3001      	adds	r0, #1
 800a77a:	f000 80aa 	beq.w	800a8d2 <_vfiprintf_r+0x20e>
 800a77e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a780:	445a      	add	r2, fp
 800a782:	9209      	str	r2, [sp, #36]	; 0x24
 800a784:	f89a 3000 	ldrb.w	r3, [sl]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 80a2 	beq.w	800a8d2 <_vfiprintf_r+0x20e>
 800a78e:	2300      	movs	r3, #0
 800a790:	f04f 32ff 	mov.w	r2, #4294967295
 800a794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a798:	f10a 0a01 	add.w	sl, sl, #1
 800a79c:	9304      	str	r3, [sp, #16]
 800a79e:	9307      	str	r3, [sp, #28]
 800a7a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a7a6:	4654      	mov	r4, sl
 800a7a8:	2205      	movs	r2, #5
 800a7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ae:	4858      	ldr	r0, [pc, #352]	; (800a910 <_vfiprintf_r+0x24c>)
 800a7b0:	f7f5 fd16 	bl	80001e0 <memchr>
 800a7b4:	9a04      	ldr	r2, [sp, #16]
 800a7b6:	b9d8      	cbnz	r0, 800a7f0 <_vfiprintf_r+0x12c>
 800a7b8:	06d1      	lsls	r1, r2, #27
 800a7ba:	bf44      	itt	mi
 800a7bc:	2320      	movmi	r3, #32
 800a7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c2:	0713      	lsls	r3, r2, #28
 800a7c4:	bf44      	itt	mi
 800a7c6:	232b      	movmi	r3, #43	; 0x2b
 800a7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d2:	d015      	beq.n	800a800 <_vfiprintf_r+0x13c>
 800a7d4:	9a07      	ldr	r2, [sp, #28]
 800a7d6:	4654      	mov	r4, sl
 800a7d8:	2000      	movs	r0, #0
 800a7da:	f04f 0c0a 	mov.w	ip, #10
 800a7de:	4621      	mov	r1, r4
 800a7e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7e4:	3b30      	subs	r3, #48	; 0x30
 800a7e6:	2b09      	cmp	r3, #9
 800a7e8:	d94e      	bls.n	800a888 <_vfiprintf_r+0x1c4>
 800a7ea:	b1b0      	cbz	r0, 800a81a <_vfiprintf_r+0x156>
 800a7ec:	9207      	str	r2, [sp, #28]
 800a7ee:	e014      	b.n	800a81a <_vfiprintf_r+0x156>
 800a7f0:	eba0 0308 	sub.w	r3, r0, r8
 800a7f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	9304      	str	r3, [sp, #16]
 800a7fc:	46a2      	mov	sl, r4
 800a7fe:	e7d2      	b.n	800a7a6 <_vfiprintf_r+0xe2>
 800a800:	9b03      	ldr	r3, [sp, #12]
 800a802:	1d19      	adds	r1, r3, #4
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	9103      	str	r1, [sp, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	bfbb      	ittet	lt
 800a80c:	425b      	neglt	r3, r3
 800a80e:	f042 0202 	orrlt.w	r2, r2, #2
 800a812:	9307      	strge	r3, [sp, #28]
 800a814:	9307      	strlt	r3, [sp, #28]
 800a816:	bfb8      	it	lt
 800a818:	9204      	strlt	r2, [sp, #16]
 800a81a:	7823      	ldrb	r3, [r4, #0]
 800a81c:	2b2e      	cmp	r3, #46	; 0x2e
 800a81e:	d10c      	bne.n	800a83a <_vfiprintf_r+0x176>
 800a820:	7863      	ldrb	r3, [r4, #1]
 800a822:	2b2a      	cmp	r3, #42	; 0x2a
 800a824:	d135      	bne.n	800a892 <_vfiprintf_r+0x1ce>
 800a826:	9b03      	ldr	r3, [sp, #12]
 800a828:	1d1a      	adds	r2, r3, #4
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	9203      	str	r2, [sp, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	bfb8      	it	lt
 800a832:	f04f 33ff 	movlt.w	r3, #4294967295
 800a836:	3402      	adds	r4, #2
 800a838:	9305      	str	r3, [sp, #20]
 800a83a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a920 <_vfiprintf_r+0x25c>
 800a83e:	7821      	ldrb	r1, [r4, #0]
 800a840:	2203      	movs	r2, #3
 800a842:	4650      	mov	r0, sl
 800a844:	f7f5 fccc 	bl	80001e0 <memchr>
 800a848:	b140      	cbz	r0, 800a85c <_vfiprintf_r+0x198>
 800a84a:	2340      	movs	r3, #64	; 0x40
 800a84c:	eba0 000a 	sub.w	r0, r0, sl
 800a850:	fa03 f000 	lsl.w	r0, r3, r0
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	4303      	orrs	r3, r0
 800a858:	3401      	adds	r4, #1
 800a85a:	9304      	str	r3, [sp, #16]
 800a85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a860:	482c      	ldr	r0, [pc, #176]	; (800a914 <_vfiprintf_r+0x250>)
 800a862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a866:	2206      	movs	r2, #6
 800a868:	f7f5 fcba 	bl	80001e0 <memchr>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d03f      	beq.n	800a8f0 <_vfiprintf_r+0x22c>
 800a870:	4b29      	ldr	r3, [pc, #164]	; (800a918 <_vfiprintf_r+0x254>)
 800a872:	bb1b      	cbnz	r3, 800a8bc <_vfiprintf_r+0x1f8>
 800a874:	9b03      	ldr	r3, [sp, #12]
 800a876:	3307      	adds	r3, #7
 800a878:	f023 0307 	bic.w	r3, r3, #7
 800a87c:	3308      	adds	r3, #8
 800a87e:	9303      	str	r3, [sp, #12]
 800a880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a882:	443b      	add	r3, r7
 800a884:	9309      	str	r3, [sp, #36]	; 0x24
 800a886:	e767      	b.n	800a758 <_vfiprintf_r+0x94>
 800a888:	fb0c 3202 	mla	r2, ip, r2, r3
 800a88c:	460c      	mov	r4, r1
 800a88e:	2001      	movs	r0, #1
 800a890:	e7a5      	b.n	800a7de <_vfiprintf_r+0x11a>
 800a892:	2300      	movs	r3, #0
 800a894:	3401      	adds	r4, #1
 800a896:	9305      	str	r3, [sp, #20]
 800a898:	4619      	mov	r1, r3
 800a89a:	f04f 0c0a 	mov.w	ip, #10
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8a4:	3a30      	subs	r2, #48	; 0x30
 800a8a6:	2a09      	cmp	r2, #9
 800a8a8:	d903      	bls.n	800a8b2 <_vfiprintf_r+0x1ee>
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0c5      	beq.n	800a83a <_vfiprintf_r+0x176>
 800a8ae:	9105      	str	r1, [sp, #20]
 800a8b0:	e7c3      	b.n	800a83a <_vfiprintf_r+0x176>
 800a8b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e7f0      	b.n	800a89e <_vfiprintf_r+0x1da>
 800a8bc:	ab03      	add	r3, sp, #12
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	462a      	mov	r2, r5
 800a8c2:	4b16      	ldr	r3, [pc, #88]	; (800a91c <_vfiprintf_r+0x258>)
 800a8c4:	a904      	add	r1, sp, #16
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f7fb fef2 	bl	80066b0 <_printf_float>
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	1c78      	adds	r0, r7, #1
 800a8d0:	d1d6      	bne.n	800a880 <_vfiprintf_r+0x1bc>
 800a8d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8d4:	07d9      	lsls	r1, r3, #31
 800a8d6:	d405      	bmi.n	800a8e4 <_vfiprintf_r+0x220>
 800a8d8:	89ab      	ldrh	r3, [r5, #12]
 800a8da:	059a      	lsls	r2, r3, #22
 800a8dc:	d402      	bmi.n	800a8e4 <_vfiprintf_r+0x220>
 800a8de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8e0:	f7fb fd80 	bl	80063e4 <__retarget_lock_release_recursive>
 800a8e4:	89ab      	ldrh	r3, [r5, #12]
 800a8e6:	065b      	lsls	r3, r3, #25
 800a8e8:	f53f af12 	bmi.w	800a710 <_vfiprintf_r+0x4c>
 800a8ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8ee:	e711      	b.n	800a714 <_vfiprintf_r+0x50>
 800a8f0:	ab03      	add	r3, sp, #12
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	462a      	mov	r2, r5
 800a8f6:	4b09      	ldr	r3, [pc, #36]	; (800a91c <_vfiprintf_r+0x258>)
 800a8f8:	a904      	add	r1, sp, #16
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f7fc f97c 	bl	8006bf8 <_printf_i>
 800a900:	e7e4      	b.n	800a8cc <_vfiprintf_r+0x208>
 800a902:	bf00      	nop
 800a904:	0800e91c 	.word	0x0800e91c
 800a908:	0800e93c 	.word	0x0800e93c
 800a90c:	0800e8fc 	.word	0x0800e8fc
 800a910:	0800ed94 	.word	0x0800ed94
 800a914:	0800ed9e 	.word	0x0800ed9e
 800a918:	080066b1 	.word	0x080066b1
 800a91c:	0800a69f 	.word	0x0800a69f
 800a920:	0800ed9a 	.word	0x0800ed9a

0800a924 <_read_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d07      	ldr	r5, [pc, #28]	; (800a944 <_read_r+0x20>)
 800a928:	4604      	mov	r4, r0
 800a92a:	4608      	mov	r0, r1
 800a92c:	4611      	mov	r1, r2
 800a92e:	2200      	movs	r2, #0
 800a930:	602a      	str	r2, [r5, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	f7fb fb11 	bl	8005f5a <_read>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d102      	bne.n	800a942 <_read_r+0x1e>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	b103      	cbz	r3, 800a942 <_read_r+0x1e>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	20000914 	.word	0x20000914

0800a948 <nan>:
 800a948:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a950 <nan+0x8>
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	00000000 	.word	0x00000000
 800a954:	7ff80000 	.word	0x7ff80000

0800a958 <strncmp>:
 800a958:	b510      	push	{r4, lr}
 800a95a:	b17a      	cbz	r2, 800a97c <strncmp+0x24>
 800a95c:	4603      	mov	r3, r0
 800a95e:	3901      	subs	r1, #1
 800a960:	1884      	adds	r4, r0, r2
 800a962:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a966:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a96a:	4290      	cmp	r0, r2
 800a96c:	d101      	bne.n	800a972 <strncmp+0x1a>
 800a96e:	42a3      	cmp	r3, r4
 800a970:	d101      	bne.n	800a976 <strncmp+0x1e>
 800a972:	1a80      	subs	r0, r0, r2
 800a974:	bd10      	pop	{r4, pc}
 800a976:	2800      	cmp	r0, #0
 800a978:	d1f3      	bne.n	800a962 <strncmp+0xa>
 800a97a:	e7fa      	b.n	800a972 <strncmp+0x1a>
 800a97c:	4610      	mov	r0, r2
 800a97e:	e7f9      	b.n	800a974 <strncmp+0x1c>

0800a980 <__ascii_wctomb>:
 800a980:	b149      	cbz	r1, 800a996 <__ascii_wctomb+0x16>
 800a982:	2aff      	cmp	r2, #255	; 0xff
 800a984:	bf85      	ittet	hi
 800a986:	238a      	movhi	r3, #138	; 0x8a
 800a988:	6003      	strhi	r3, [r0, #0]
 800a98a:	700a      	strbls	r2, [r1, #0]
 800a98c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a990:	bf98      	it	ls
 800a992:	2001      	movls	r0, #1
 800a994:	4770      	bx	lr
 800a996:	4608      	mov	r0, r1
 800a998:	4770      	bx	lr

0800a99a <abort>:
 800a99a:	b508      	push	{r3, lr}
 800a99c:	2006      	movs	r0, #6
 800a99e:	f000 f87d 	bl	800aa9c <raise>
 800a9a2:	2001      	movs	r0, #1
 800a9a4:	f000 ffee 	bl	800b984 <_exit>

0800a9a8 <_fstat_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4d07      	ldr	r5, [pc, #28]	; (800a9c8 <_fstat_r+0x20>)
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	602b      	str	r3, [r5, #0]
 800a9b6:	f7fb fbb4 	bl	8006122 <_fstat>
 800a9ba:	1c43      	adds	r3, r0, #1
 800a9bc:	d102      	bne.n	800a9c4 <_fstat_r+0x1c>
 800a9be:	682b      	ldr	r3, [r5, #0]
 800a9c0:	b103      	cbz	r3, 800a9c4 <_fstat_r+0x1c>
 800a9c2:	6023      	str	r3, [r4, #0]
 800a9c4:	bd38      	pop	{r3, r4, r5, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20000914 	.word	0x20000914

0800a9cc <_isatty_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d06      	ldr	r5, [pc, #24]	; (800a9e8 <_isatty_r+0x1c>)
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	602b      	str	r3, [r5, #0]
 800a9d8:	f7fb fbb1 	bl	800613e <_isatty>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_isatty_r+0x1a>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_isatty_r+0x1a>
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	20000914 	.word	0x20000914

0800a9ec <_realloc_r>:
 800a9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f0:	4680      	mov	r8, r0
 800a9f2:	4614      	mov	r4, r2
 800a9f4:	460e      	mov	r6, r1
 800a9f6:	b921      	cbnz	r1, 800aa02 <_realloc_r+0x16>
 800a9f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	f7fb bd43 	b.w	8006488 <_malloc_r>
 800aa02:	b92a      	cbnz	r2, 800aa10 <_realloc_r+0x24>
 800aa04:	f7ff fc8c 	bl	800a320 <_free_r>
 800aa08:	4625      	mov	r5, r4
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa10:	f000 f860 	bl	800aad4 <_malloc_usable_size_r>
 800aa14:	4284      	cmp	r4, r0
 800aa16:	4607      	mov	r7, r0
 800aa18:	d802      	bhi.n	800aa20 <_realloc_r+0x34>
 800aa1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa1e:	d812      	bhi.n	800aa46 <_realloc_r+0x5a>
 800aa20:	4621      	mov	r1, r4
 800aa22:	4640      	mov	r0, r8
 800aa24:	f7fb fd30 	bl	8006488 <_malloc_r>
 800aa28:	4605      	mov	r5, r0
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d0ed      	beq.n	800aa0a <_realloc_r+0x1e>
 800aa2e:	42bc      	cmp	r4, r7
 800aa30:	4622      	mov	r2, r4
 800aa32:	4631      	mov	r1, r6
 800aa34:	bf28      	it	cs
 800aa36:	463a      	movcs	r2, r7
 800aa38:	f7fb fcd5 	bl	80063e6 <memcpy>
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4640      	mov	r0, r8
 800aa40:	f7ff fc6e 	bl	800a320 <_free_r>
 800aa44:	e7e1      	b.n	800aa0a <_realloc_r+0x1e>
 800aa46:	4635      	mov	r5, r6
 800aa48:	e7df      	b.n	800aa0a <_realloc_r+0x1e>

0800aa4a <_raise_r>:
 800aa4a:	291f      	cmp	r1, #31
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4604      	mov	r4, r0
 800aa50:	460d      	mov	r5, r1
 800aa52:	d904      	bls.n	800aa5e <_raise_r+0x14>
 800aa54:	2316      	movs	r3, #22
 800aa56:	6003      	str	r3, [r0, #0]
 800aa58:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5c:	bd38      	pop	{r3, r4, r5, pc}
 800aa5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa60:	b112      	cbz	r2, 800aa68 <_raise_r+0x1e>
 800aa62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa66:	b94b      	cbnz	r3, 800aa7c <_raise_r+0x32>
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f000 f831 	bl	800aad0 <_getpid_r>
 800aa6e:	462a      	mov	r2, r5
 800aa70:	4601      	mov	r1, r0
 800aa72:	4620      	mov	r0, r4
 800aa74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa78:	f000 b818 	b.w	800aaac <_kill_r>
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d00a      	beq.n	800aa96 <_raise_r+0x4c>
 800aa80:	1c59      	adds	r1, r3, #1
 800aa82:	d103      	bne.n	800aa8c <_raise_r+0x42>
 800aa84:	2316      	movs	r3, #22
 800aa86:	6003      	str	r3, [r0, #0]
 800aa88:	2001      	movs	r0, #1
 800aa8a:	e7e7      	b.n	800aa5c <_raise_r+0x12>
 800aa8c:	2400      	movs	r4, #0
 800aa8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa92:	4628      	mov	r0, r5
 800aa94:	4798      	blx	r3
 800aa96:	2000      	movs	r0, #0
 800aa98:	e7e0      	b.n	800aa5c <_raise_r+0x12>
	...

0800aa9c <raise>:
 800aa9c:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <raise+0xc>)
 800aa9e:	4601      	mov	r1, r0
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	f7ff bfd2 	b.w	800aa4a <_raise_r>
 800aaa6:	bf00      	nop
 800aaa8:	20000104 	.word	0x20000104

0800aaac <_kill_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4d07      	ldr	r5, [pc, #28]	; (800aacc <_kill_r+0x20>)
 800aab0:	2300      	movs	r3, #0
 800aab2:	4604      	mov	r4, r0
 800aab4:	4608      	mov	r0, r1
 800aab6:	4611      	mov	r1, r2
 800aab8:	602b      	str	r3, [r5, #0]
 800aaba:	f000 ff5b 	bl	800b974 <_kill>
 800aabe:	1c43      	adds	r3, r0, #1
 800aac0:	d102      	bne.n	800aac8 <_kill_r+0x1c>
 800aac2:	682b      	ldr	r3, [r5, #0]
 800aac4:	b103      	cbz	r3, 800aac8 <_kill_r+0x1c>
 800aac6:	6023      	str	r3, [r4, #0]
 800aac8:	bd38      	pop	{r3, r4, r5, pc}
 800aaca:	bf00      	nop
 800aacc:	20000914 	.word	0x20000914

0800aad0 <_getpid_r>:
 800aad0:	f7fb bb04 	b.w	80060dc <_getpid>

0800aad4 <_malloc_usable_size_r>:
 800aad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad8:	1f18      	subs	r0, r3, #4
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bfbc      	itt	lt
 800aade:	580b      	ldrlt	r3, [r1, r0]
 800aae0:	18c0      	addlt	r0, r0, r3
 800aae2:	4770      	bx	lr

0800aae4 <pow>:
 800aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae6:	ed2d 8b02 	vpush	{d8}
 800aaea:	eeb0 8a40 	vmov.f32	s16, s0
 800aaee:	eef0 8a60 	vmov.f32	s17, s1
 800aaf2:	ec55 4b11 	vmov	r4, r5, d1
 800aaf6:	f000 f893 	bl	800ac20 <__ieee754_pow>
 800aafa:	4622      	mov	r2, r4
 800aafc:	462b      	mov	r3, r5
 800aafe:	4620      	mov	r0, r4
 800ab00:	4629      	mov	r1, r5
 800ab02:	ec57 6b10 	vmov	r6, r7, d0
 800ab06:	f7f6 f811 	bl	8000b2c <__aeabi_dcmpun>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d13b      	bne.n	800ab86 <pow+0xa2>
 800ab0e:	ec51 0b18 	vmov	r0, r1, d8
 800ab12:	2200      	movs	r2, #0
 800ab14:	2300      	movs	r3, #0
 800ab16:	f7f5 ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab1a:	b1b8      	cbz	r0, 800ab4c <pow+0x68>
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2300      	movs	r3, #0
 800ab20:	4620      	mov	r0, r4
 800ab22:	4629      	mov	r1, r5
 800ab24:	f7f5 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d146      	bne.n	800abba <pow+0xd6>
 800ab2c:	ec45 4b10 	vmov	d0, r4, r5
 800ab30:	f000 fe8f 	bl	800b852 <finite>
 800ab34:	b338      	cbz	r0, 800ab86 <pow+0xa2>
 800ab36:	2200      	movs	r2, #0
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	f7f5 ffcd 	bl	8000adc <__aeabi_dcmplt>
 800ab42:	b300      	cbz	r0, 800ab86 <pow+0xa2>
 800ab44:	f7fb fb18 	bl	8006178 <__errno>
 800ab48:	2322      	movs	r3, #34	; 0x22
 800ab4a:	e01b      	b.n	800ab84 <pow+0xa0>
 800ab4c:	ec47 6b10 	vmov	d0, r6, r7
 800ab50:	f000 fe7f 	bl	800b852 <finite>
 800ab54:	b9e0      	cbnz	r0, 800ab90 <pow+0xac>
 800ab56:	eeb0 0a48 	vmov.f32	s0, s16
 800ab5a:	eef0 0a68 	vmov.f32	s1, s17
 800ab5e:	f000 fe78 	bl	800b852 <finite>
 800ab62:	b1a8      	cbz	r0, 800ab90 <pow+0xac>
 800ab64:	ec45 4b10 	vmov	d0, r4, r5
 800ab68:	f000 fe73 	bl	800b852 <finite>
 800ab6c:	b180      	cbz	r0, 800ab90 <pow+0xac>
 800ab6e:	4632      	mov	r2, r6
 800ab70:	463b      	mov	r3, r7
 800ab72:	4630      	mov	r0, r6
 800ab74:	4639      	mov	r1, r7
 800ab76:	f7f5 ffd9 	bl	8000b2c <__aeabi_dcmpun>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d0e2      	beq.n	800ab44 <pow+0x60>
 800ab7e:	f7fb fafb 	bl	8006178 <__errno>
 800ab82:	2321      	movs	r3, #33	; 0x21
 800ab84:	6003      	str	r3, [r0, #0]
 800ab86:	ecbd 8b02 	vpop	{d8}
 800ab8a:	ec47 6b10 	vmov	d0, r6, r7
 800ab8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab90:	2200      	movs	r2, #0
 800ab92:	2300      	movs	r3, #0
 800ab94:	4630      	mov	r0, r6
 800ab96:	4639      	mov	r1, r7
 800ab98:	f7f5 ff96 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d0f2      	beq.n	800ab86 <pow+0xa2>
 800aba0:	eeb0 0a48 	vmov.f32	s0, s16
 800aba4:	eef0 0a68 	vmov.f32	s1, s17
 800aba8:	f000 fe53 	bl	800b852 <finite>
 800abac:	2800      	cmp	r0, #0
 800abae:	d0ea      	beq.n	800ab86 <pow+0xa2>
 800abb0:	ec45 4b10 	vmov	d0, r4, r5
 800abb4:	f000 fe4d 	bl	800b852 <finite>
 800abb8:	e7c3      	b.n	800ab42 <pow+0x5e>
 800abba:	4f01      	ldr	r7, [pc, #4]	; (800abc0 <pow+0xdc>)
 800abbc:	2600      	movs	r6, #0
 800abbe:	e7e2      	b.n	800ab86 <pow+0xa2>
 800abc0:	3ff00000 	.word	0x3ff00000

0800abc4 <sqrt>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	ed2d 8b02 	vpush	{d8}
 800abca:	ec55 4b10 	vmov	r4, r5, d0
 800abce:	f000 fd55 	bl	800b67c <__ieee754_sqrt>
 800abd2:	4622      	mov	r2, r4
 800abd4:	462b      	mov	r3, r5
 800abd6:	4620      	mov	r0, r4
 800abd8:	4629      	mov	r1, r5
 800abda:	eeb0 8a40 	vmov.f32	s16, s0
 800abde:	eef0 8a60 	vmov.f32	s17, s1
 800abe2:	f7f5 ffa3 	bl	8000b2c <__aeabi_dcmpun>
 800abe6:	b990      	cbnz	r0, 800ac0e <sqrt+0x4a>
 800abe8:	2200      	movs	r2, #0
 800abea:	2300      	movs	r3, #0
 800abec:	4620      	mov	r0, r4
 800abee:	4629      	mov	r1, r5
 800abf0:	f7f5 ff74 	bl	8000adc <__aeabi_dcmplt>
 800abf4:	b158      	cbz	r0, 800ac0e <sqrt+0x4a>
 800abf6:	f7fb fabf 	bl	8006178 <__errno>
 800abfa:	2321      	movs	r3, #33	; 0x21
 800abfc:	6003      	str	r3, [r0, #0]
 800abfe:	2200      	movs	r2, #0
 800ac00:	2300      	movs	r3, #0
 800ac02:	4610      	mov	r0, r2
 800ac04:	4619      	mov	r1, r3
 800ac06:	f7f5 fe21 	bl	800084c <__aeabi_ddiv>
 800ac0a:	ec41 0b18 	vmov	d8, r0, r1
 800ac0e:	eeb0 0a48 	vmov.f32	s0, s16
 800ac12:	eef0 0a68 	vmov.f32	s1, s17
 800ac16:	ecbd 8b02 	vpop	{d8}
 800ac1a:	bd38      	pop	{r3, r4, r5, pc}
 800ac1c:	0000      	movs	r0, r0
	...

0800ac20 <__ieee754_pow>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	ed2d 8b06 	vpush	{d8-d10}
 800ac28:	b089      	sub	sp, #36	; 0x24
 800ac2a:	ed8d 1b00 	vstr	d1, [sp]
 800ac2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ac32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ac36:	ea58 0102 	orrs.w	r1, r8, r2
 800ac3a:	ec57 6b10 	vmov	r6, r7, d0
 800ac3e:	d115      	bne.n	800ac6c <__ieee754_pow+0x4c>
 800ac40:	19b3      	adds	r3, r6, r6
 800ac42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ac46:	4152      	adcs	r2, r2
 800ac48:	4299      	cmp	r1, r3
 800ac4a:	4b89      	ldr	r3, [pc, #548]	; (800ae70 <__ieee754_pow+0x250>)
 800ac4c:	4193      	sbcs	r3, r2
 800ac4e:	f080 84d2 	bcs.w	800b5f6 <__ieee754_pow+0x9d6>
 800ac52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac56:	4630      	mov	r0, r6
 800ac58:	4639      	mov	r1, r7
 800ac5a:	f7f5 fb17 	bl	800028c <__adddf3>
 800ac5e:	ec41 0b10 	vmov	d0, r0, r1
 800ac62:	b009      	add	sp, #36	; 0x24
 800ac64:	ecbd 8b06 	vpop	{d8-d10}
 800ac68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6c:	4b81      	ldr	r3, [pc, #516]	; (800ae74 <__ieee754_pow+0x254>)
 800ac6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ac72:	429c      	cmp	r4, r3
 800ac74:	ee10 aa10 	vmov	sl, s0
 800ac78:	463d      	mov	r5, r7
 800ac7a:	dc06      	bgt.n	800ac8a <__ieee754_pow+0x6a>
 800ac7c:	d101      	bne.n	800ac82 <__ieee754_pow+0x62>
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	d1e7      	bne.n	800ac52 <__ieee754_pow+0x32>
 800ac82:	4598      	cmp	r8, r3
 800ac84:	dc01      	bgt.n	800ac8a <__ieee754_pow+0x6a>
 800ac86:	d10f      	bne.n	800aca8 <__ieee754_pow+0x88>
 800ac88:	b172      	cbz	r2, 800aca8 <__ieee754_pow+0x88>
 800ac8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ac8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ac92:	ea55 050a 	orrs.w	r5, r5, sl
 800ac96:	d1dc      	bne.n	800ac52 <__ieee754_pow+0x32>
 800ac98:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac9c:	18db      	adds	r3, r3, r3
 800ac9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800aca2:	4152      	adcs	r2, r2
 800aca4:	429d      	cmp	r5, r3
 800aca6:	e7d0      	b.n	800ac4a <__ieee754_pow+0x2a>
 800aca8:	2d00      	cmp	r5, #0
 800acaa:	da3b      	bge.n	800ad24 <__ieee754_pow+0x104>
 800acac:	4b72      	ldr	r3, [pc, #456]	; (800ae78 <__ieee754_pow+0x258>)
 800acae:	4598      	cmp	r8, r3
 800acb0:	dc51      	bgt.n	800ad56 <__ieee754_pow+0x136>
 800acb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800acb6:	4598      	cmp	r8, r3
 800acb8:	f340 84ac 	ble.w	800b614 <__ieee754_pow+0x9f4>
 800acbc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800acc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800acc4:	2b14      	cmp	r3, #20
 800acc6:	dd0f      	ble.n	800ace8 <__ieee754_pow+0xc8>
 800acc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800accc:	fa22 f103 	lsr.w	r1, r2, r3
 800acd0:	fa01 f303 	lsl.w	r3, r1, r3
 800acd4:	4293      	cmp	r3, r2
 800acd6:	f040 849d 	bne.w	800b614 <__ieee754_pow+0x9f4>
 800acda:	f001 0101 	and.w	r1, r1, #1
 800acde:	f1c1 0302 	rsb	r3, r1, #2
 800ace2:	9304      	str	r3, [sp, #16]
 800ace4:	b182      	cbz	r2, 800ad08 <__ieee754_pow+0xe8>
 800ace6:	e05f      	b.n	800ada8 <__ieee754_pow+0x188>
 800ace8:	2a00      	cmp	r2, #0
 800acea:	d15b      	bne.n	800ada4 <__ieee754_pow+0x184>
 800acec:	f1c3 0314 	rsb	r3, r3, #20
 800acf0:	fa48 f103 	asr.w	r1, r8, r3
 800acf4:	fa01 f303 	lsl.w	r3, r1, r3
 800acf8:	4543      	cmp	r3, r8
 800acfa:	f040 8488 	bne.w	800b60e <__ieee754_pow+0x9ee>
 800acfe:	f001 0101 	and.w	r1, r1, #1
 800ad02:	f1c1 0302 	rsb	r3, r1, #2
 800ad06:	9304      	str	r3, [sp, #16]
 800ad08:	4b5c      	ldr	r3, [pc, #368]	; (800ae7c <__ieee754_pow+0x25c>)
 800ad0a:	4598      	cmp	r8, r3
 800ad0c:	d132      	bne.n	800ad74 <__ieee754_pow+0x154>
 800ad0e:	f1b9 0f00 	cmp.w	r9, #0
 800ad12:	f280 8478 	bge.w	800b606 <__ieee754_pow+0x9e6>
 800ad16:	4959      	ldr	r1, [pc, #356]	; (800ae7c <__ieee754_pow+0x25c>)
 800ad18:	4632      	mov	r2, r6
 800ad1a:	463b      	mov	r3, r7
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	f7f5 fd95 	bl	800084c <__aeabi_ddiv>
 800ad22:	e79c      	b.n	800ac5e <__ieee754_pow+0x3e>
 800ad24:	2300      	movs	r3, #0
 800ad26:	9304      	str	r3, [sp, #16]
 800ad28:	2a00      	cmp	r2, #0
 800ad2a:	d13d      	bne.n	800ada8 <__ieee754_pow+0x188>
 800ad2c:	4b51      	ldr	r3, [pc, #324]	; (800ae74 <__ieee754_pow+0x254>)
 800ad2e:	4598      	cmp	r8, r3
 800ad30:	d1ea      	bne.n	800ad08 <__ieee754_pow+0xe8>
 800ad32:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ad36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ad3a:	ea53 030a 	orrs.w	r3, r3, sl
 800ad3e:	f000 845a 	beq.w	800b5f6 <__ieee754_pow+0x9d6>
 800ad42:	4b4f      	ldr	r3, [pc, #316]	; (800ae80 <__ieee754_pow+0x260>)
 800ad44:	429c      	cmp	r4, r3
 800ad46:	dd08      	ble.n	800ad5a <__ieee754_pow+0x13a>
 800ad48:	f1b9 0f00 	cmp.w	r9, #0
 800ad4c:	f2c0 8457 	blt.w	800b5fe <__ieee754_pow+0x9de>
 800ad50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad54:	e783      	b.n	800ac5e <__ieee754_pow+0x3e>
 800ad56:	2302      	movs	r3, #2
 800ad58:	e7e5      	b.n	800ad26 <__ieee754_pow+0x106>
 800ad5a:	f1b9 0f00 	cmp.w	r9, #0
 800ad5e:	f04f 0000 	mov.w	r0, #0
 800ad62:	f04f 0100 	mov.w	r1, #0
 800ad66:	f6bf af7a 	bge.w	800ac5e <__ieee754_pow+0x3e>
 800ad6a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ad6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ad72:	e774      	b.n	800ac5e <__ieee754_pow+0x3e>
 800ad74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ad78:	d106      	bne.n	800ad88 <__ieee754_pow+0x168>
 800ad7a:	4632      	mov	r2, r6
 800ad7c:	463b      	mov	r3, r7
 800ad7e:	4630      	mov	r0, r6
 800ad80:	4639      	mov	r1, r7
 800ad82:	f7f5 fc39 	bl	80005f8 <__aeabi_dmul>
 800ad86:	e76a      	b.n	800ac5e <__ieee754_pow+0x3e>
 800ad88:	4b3e      	ldr	r3, [pc, #248]	; (800ae84 <__ieee754_pow+0x264>)
 800ad8a:	4599      	cmp	r9, r3
 800ad8c:	d10c      	bne.n	800ada8 <__ieee754_pow+0x188>
 800ad8e:	2d00      	cmp	r5, #0
 800ad90:	db0a      	blt.n	800ada8 <__ieee754_pow+0x188>
 800ad92:	ec47 6b10 	vmov	d0, r6, r7
 800ad96:	b009      	add	sp, #36	; 0x24
 800ad98:	ecbd 8b06 	vpop	{d8-d10}
 800ad9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada0:	f000 bc6c 	b.w	800b67c <__ieee754_sqrt>
 800ada4:	2300      	movs	r3, #0
 800ada6:	9304      	str	r3, [sp, #16]
 800ada8:	ec47 6b10 	vmov	d0, r6, r7
 800adac:	f000 fd48 	bl	800b840 <fabs>
 800adb0:	ec51 0b10 	vmov	r0, r1, d0
 800adb4:	f1ba 0f00 	cmp.w	sl, #0
 800adb8:	d129      	bne.n	800ae0e <__ieee754_pow+0x1ee>
 800adba:	b124      	cbz	r4, 800adc6 <__ieee754_pow+0x1a6>
 800adbc:	4b2f      	ldr	r3, [pc, #188]	; (800ae7c <__ieee754_pow+0x25c>)
 800adbe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d123      	bne.n	800ae0e <__ieee754_pow+0x1ee>
 800adc6:	f1b9 0f00 	cmp.w	r9, #0
 800adca:	da05      	bge.n	800add8 <__ieee754_pow+0x1b8>
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	2000      	movs	r0, #0
 800add2:	492a      	ldr	r1, [pc, #168]	; (800ae7c <__ieee754_pow+0x25c>)
 800add4:	f7f5 fd3a 	bl	800084c <__aeabi_ddiv>
 800add8:	2d00      	cmp	r5, #0
 800adda:	f6bf af40 	bge.w	800ac5e <__ieee754_pow+0x3e>
 800adde:	9b04      	ldr	r3, [sp, #16]
 800ade0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ade4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ade8:	4323      	orrs	r3, r4
 800adea:	d108      	bne.n	800adfe <__ieee754_pow+0x1de>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4610      	mov	r0, r2
 800adf2:	4619      	mov	r1, r3
 800adf4:	f7f5 fa48 	bl	8000288 <__aeabi_dsub>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	e78f      	b.n	800ad1e <__ieee754_pow+0xfe>
 800adfe:	9b04      	ldr	r3, [sp, #16]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	f47f af2c 	bne.w	800ac5e <__ieee754_pow+0x3e>
 800ae06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	e727      	b.n	800ac5e <__ieee754_pow+0x3e>
 800ae0e:	0feb      	lsrs	r3, r5, #31
 800ae10:	3b01      	subs	r3, #1
 800ae12:	9306      	str	r3, [sp, #24]
 800ae14:	9a06      	ldr	r2, [sp, #24]
 800ae16:	9b04      	ldr	r3, [sp, #16]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	d102      	bne.n	800ae22 <__ieee754_pow+0x202>
 800ae1c:	4632      	mov	r2, r6
 800ae1e:	463b      	mov	r3, r7
 800ae20:	e7e6      	b.n	800adf0 <__ieee754_pow+0x1d0>
 800ae22:	4b19      	ldr	r3, [pc, #100]	; (800ae88 <__ieee754_pow+0x268>)
 800ae24:	4598      	cmp	r8, r3
 800ae26:	f340 80fb 	ble.w	800b020 <__ieee754_pow+0x400>
 800ae2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ae2e:	4598      	cmp	r8, r3
 800ae30:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <__ieee754_pow+0x260>)
 800ae32:	dd0c      	ble.n	800ae4e <__ieee754_pow+0x22e>
 800ae34:	429c      	cmp	r4, r3
 800ae36:	dc0f      	bgt.n	800ae58 <__ieee754_pow+0x238>
 800ae38:	f1b9 0f00 	cmp.w	r9, #0
 800ae3c:	da0f      	bge.n	800ae5e <__ieee754_pow+0x23e>
 800ae3e:	2000      	movs	r0, #0
 800ae40:	b009      	add	sp, #36	; 0x24
 800ae42:	ecbd 8b06 	vpop	{d8-d10}
 800ae46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4a:	f000 bcf0 	b.w	800b82e <__math_oflow>
 800ae4e:	429c      	cmp	r4, r3
 800ae50:	dbf2      	blt.n	800ae38 <__ieee754_pow+0x218>
 800ae52:	4b0a      	ldr	r3, [pc, #40]	; (800ae7c <__ieee754_pow+0x25c>)
 800ae54:	429c      	cmp	r4, r3
 800ae56:	dd19      	ble.n	800ae8c <__ieee754_pow+0x26c>
 800ae58:	f1b9 0f00 	cmp.w	r9, #0
 800ae5c:	dcef      	bgt.n	800ae3e <__ieee754_pow+0x21e>
 800ae5e:	2000      	movs	r0, #0
 800ae60:	b009      	add	sp, #36	; 0x24
 800ae62:	ecbd 8b06 	vpop	{d8-d10}
 800ae66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6a:	f000 bcd7 	b.w	800b81c <__math_uflow>
 800ae6e:	bf00      	nop
 800ae70:	fff00000 	.word	0xfff00000
 800ae74:	7ff00000 	.word	0x7ff00000
 800ae78:	433fffff 	.word	0x433fffff
 800ae7c:	3ff00000 	.word	0x3ff00000
 800ae80:	3fefffff 	.word	0x3fefffff
 800ae84:	3fe00000 	.word	0x3fe00000
 800ae88:	41e00000 	.word	0x41e00000
 800ae8c:	4b60      	ldr	r3, [pc, #384]	; (800b010 <__ieee754_pow+0x3f0>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f7f5 f9fa 	bl	8000288 <__aeabi_dsub>
 800ae94:	a354      	add	r3, pc, #336	; (adr r3, 800afe8 <__ieee754_pow+0x3c8>)
 800ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	460d      	mov	r5, r1
 800ae9e:	f7f5 fbab 	bl	80005f8 <__aeabi_dmul>
 800aea2:	a353      	add	r3, pc, #332	; (adr r3, 800aff0 <__ieee754_pow+0x3d0>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	4606      	mov	r6, r0
 800aeaa:	460f      	mov	r7, r1
 800aeac:	4620      	mov	r0, r4
 800aeae:	4629      	mov	r1, r5
 800aeb0:	f7f5 fba2 	bl	80005f8 <__aeabi_dmul>
 800aeb4:	4b57      	ldr	r3, [pc, #348]	; (800b014 <__ieee754_pow+0x3f4>)
 800aeb6:	4682      	mov	sl, r0
 800aeb8:	468b      	mov	fp, r1
 800aeba:	2200      	movs	r2, #0
 800aebc:	4620      	mov	r0, r4
 800aebe:	4629      	mov	r1, r5
 800aec0:	f7f5 fb9a 	bl	80005f8 <__aeabi_dmul>
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	a14b      	add	r1, pc, #300	; (adr r1, 800aff8 <__ieee754_pow+0x3d8>)
 800aeca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aece:	f7f5 f9db 	bl	8000288 <__aeabi_dsub>
 800aed2:	4622      	mov	r2, r4
 800aed4:	462b      	mov	r3, r5
 800aed6:	f7f5 fb8f 	bl	80005f8 <__aeabi_dmul>
 800aeda:	4602      	mov	r2, r0
 800aedc:	460b      	mov	r3, r1
 800aede:	2000      	movs	r0, #0
 800aee0:	494d      	ldr	r1, [pc, #308]	; (800b018 <__ieee754_pow+0x3f8>)
 800aee2:	f7f5 f9d1 	bl	8000288 <__aeabi_dsub>
 800aee6:	4622      	mov	r2, r4
 800aee8:	4680      	mov	r8, r0
 800aeea:	4689      	mov	r9, r1
 800aeec:	462b      	mov	r3, r5
 800aeee:	4620      	mov	r0, r4
 800aef0:	4629      	mov	r1, r5
 800aef2:	f7f5 fb81 	bl	80005f8 <__aeabi_dmul>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	4640      	mov	r0, r8
 800aefc:	4649      	mov	r1, r9
 800aefe:	f7f5 fb7b 	bl	80005f8 <__aeabi_dmul>
 800af02:	a33f      	add	r3, pc, #252	; (adr r3, 800b000 <__ieee754_pow+0x3e0>)
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	f7f5 fb76 	bl	80005f8 <__aeabi_dmul>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4650      	mov	r0, sl
 800af12:	4659      	mov	r1, fp
 800af14:	f7f5 f9b8 	bl	8000288 <__aeabi_dsub>
 800af18:	4602      	mov	r2, r0
 800af1a:	460b      	mov	r3, r1
 800af1c:	4680      	mov	r8, r0
 800af1e:	4689      	mov	r9, r1
 800af20:	4630      	mov	r0, r6
 800af22:	4639      	mov	r1, r7
 800af24:	f7f5 f9b2 	bl	800028c <__adddf3>
 800af28:	2000      	movs	r0, #0
 800af2a:	4632      	mov	r2, r6
 800af2c:	463b      	mov	r3, r7
 800af2e:	4604      	mov	r4, r0
 800af30:	460d      	mov	r5, r1
 800af32:	f7f5 f9a9 	bl	8000288 <__aeabi_dsub>
 800af36:	4602      	mov	r2, r0
 800af38:	460b      	mov	r3, r1
 800af3a:	4640      	mov	r0, r8
 800af3c:	4649      	mov	r1, r9
 800af3e:	f7f5 f9a3 	bl	8000288 <__aeabi_dsub>
 800af42:	9b04      	ldr	r3, [sp, #16]
 800af44:	9a06      	ldr	r2, [sp, #24]
 800af46:	3b01      	subs	r3, #1
 800af48:	4313      	orrs	r3, r2
 800af4a:	4682      	mov	sl, r0
 800af4c:	468b      	mov	fp, r1
 800af4e:	f040 81e7 	bne.w	800b320 <__ieee754_pow+0x700>
 800af52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b008 <__ieee754_pow+0x3e8>
 800af56:	eeb0 8a47 	vmov.f32	s16, s14
 800af5a:	eef0 8a67 	vmov.f32	s17, s15
 800af5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800af62:	2600      	movs	r6, #0
 800af64:	4632      	mov	r2, r6
 800af66:	463b      	mov	r3, r7
 800af68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af6c:	f7f5 f98c 	bl	8000288 <__aeabi_dsub>
 800af70:	4622      	mov	r2, r4
 800af72:	462b      	mov	r3, r5
 800af74:	f7f5 fb40 	bl	80005f8 <__aeabi_dmul>
 800af78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af7c:	4680      	mov	r8, r0
 800af7e:	4689      	mov	r9, r1
 800af80:	4650      	mov	r0, sl
 800af82:	4659      	mov	r1, fp
 800af84:	f7f5 fb38 	bl	80005f8 <__aeabi_dmul>
 800af88:	4602      	mov	r2, r0
 800af8a:	460b      	mov	r3, r1
 800af8c:	4640      	mov	r0, r8
 800af8e:	4649      	mov	r1, r9
 800af90:	f7f5 f97c 	bl	800028c <__adddf3>
 800af94:	4632      	mov	r2, r6
 800af96:	463b      	mov	r3, r7
 800af98:	4680      	mov	r8, r0
 800af9a:	4689      	mov	r9, r1
 800af9c:	4620      	mov	r0, r4
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7f5 fb2a 	bl	80005f8 <__aeabi_dmul>
 800afa4:	460b      	mov	r3, r1
 800afa6:	4604      	mov	r4, r0
 800afa8:	460d      	mov	r5, r1
 800afaa:	4602      	mov	r2, r0
 800afac:	4649      	mov	r1, r9
 800afae:	4640      	mov	r0, r8
 800afb0:	f7f5 f96c 	bl	800028c <__adddf3>
 800afb4:	4b19      	ldr	r3, [pc, #100]	; (800b01c <__ieee754_pow+0x3fc>)
 800afb6:	4299      	cmp	r1, r3
 800afb8:	ec45 4b19 	vmov	d9, r4, r5
 800afbc:	4606      	mov	r6, r0
 800afbe:	460f      	mov	r7, r1
 800afc0:	468b      	mov	fp, r1
 800afc2:	f340 82f1 	ble.w	800b5a8 <__ieee754_pow+0x988>
 800afc6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800afca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800afce:	4303      	orrs	r3, r0
 800afd0:	f000 81e4 	beq.w	800b39c <__ieee754_pow+0x77c>
 800afd4:	ec51 0b18 	vmov	r0, r1, d8
 800afd8:	2200      	movs	r2, #0
 800afda:	2300      	movs	r3, #0
 800afdc:	f7f5 fd7e 	bl	8000adc <__aeabi_dcmplt>
 800afe0:	3800      	subs	r0, #0
 800afe2:	bf18      	it	ne
 800afe4:	2001      	movne	r0, #1
 800afe6:	e72b      	b.n	800ae40 <__ieee754_pow+0x220>
 800afe8:	60000000 	.word	0x60000000
 800afec:	3ff71547 	.word	0x3ff71547
 800aff0:	f85ddf44 	.word	0xf85ddf44
 800aff4:	3e54ae0b 	.word	0x3e54ae0b
 800aff8:	55555555 	.word	0x55555555
 800affc:	3fd55555 	.word	0x3fd55555
 800b000:	652b82fe 	.word	0x652b82fe
 800b004:	3ff71547 	.word	0x3ff71547
 800b008:	00000000 	.word	0x00000000
 800b00c:	bff00000 	.word	0xbff00000
 800b010:	3ff00000 	.word	0x3ff00000
 800b014:	3fd00000 	.word	0x3fd00000
 800b018:	3fe00000 	.word	0x3fe00000
 800b01c:	408fffff 	.word	0x408fffff
 800b020:	4bd5      	ldr	r3, [pc, #852]	; (800b378 <__ieee754_pow+0x758>)
 800b022:	402b      	ands	r3, r5
 800b024:	2200      	movs	r2, #0
 800b026:	b92b      	cbnz	r3, 800b034 <__ieee754_pow+0x414>
 800b028:	4bd4      	ldr	r3, [pc, #848]	; (800b37c <__ieee754_pow+0x75c>)
 800b02a:	f7f5 fae5 	bl	80005f8 <__aeabi_dmul>
 800b02e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b032:	460c      	mov	r4, r1
 800b034:	1523      	asrs	r3, r4, #20
 800b036:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b03a:	4413      	add	r3, r2
 800b03c:	9305      	str	r3, [sp, #20]
 800b03e:	4bd0      	ldr	r3, [pc, #832]	; (800b380 <__ieee754_pow+0x760>)
 800b040:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b044:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b048:	429c      	cmp	r4, r3
 800b04a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b04e:	dd08      	ble.n	800b062 <__ieee754_pow+0x442>
 800b050:	4bcc      	ldr	r3, [pc, #816]	; (800b384 <__ieee754_pow+0x764>)
 800b052:	429c      	cmp	r4, r3
 800b054:	f340 8162 	ble.w	800b31c <__ieee754_pow+0x6fc>
 800b058:	9b05      	ldr	r3, [sp, #20]
 800b05a:	3301      	adds	r3, #1
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b062:	2400      	movs	r4, #0
 800b064:	00e3      	lsls	r3, r4, #3
 800b066:	9307      	str	r3, [sp, #28]
 800b068:	4bc7      	ldr	r3, [pc, #796]	; (800b388 <__ieee754_pow+0x768>)
 800b06a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b06e:	ed93 7b00 	vldr	d7, [r3]
 800b072:	4629      	mov	r1, r5
 800b074:	ec53 2b17 	vmov	r2, r3, d7
 800b078:	eeb0 9a47 	vmov.f32	s18, s14
 800b07c:	eef0 9a67 	vmov.f32	s19, s15
 800b080:	4682      	mov	sl, r0
 800b082:	f7f5 f901 	bl	8000288 <__aeabi_dsub>
 800b086:	4652      	mov	r2, sl
 800b088:	4606      	mov	r6, r0
 800b08a:	460f      	mov	r7, r1
 800b08c:	462b      	mov	r3, r5
 800b08e:	ec51 0b19 	vmov	r0, r1, d9
 800b092:	f7f5 f8fb 	bl	800028c <__adddf3>
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	2000      	movs	r0, #0
 800b09c:	49bb      	ldr	r1, [pc, #748]	; (800b38c <__ieee754_pow+0x76c>)
 800b09e:	f7f5 fbd5 	bl	800084c <__aeabi_ddiv>
 800b0a2:	ec41 0b1a 	vmov	d10, r0, r1
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	4639      	mov	r1, r7
 800b0ae:	f7f5 faa3 	bl	80005f8 <__aeabi_dmul>
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0b8:	9302      	str	r3, [sp, #8]
 800b0ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b0be:	46ab      	mov	fp, r5
 800b0c0:	106d      	asrs	r5, r5, #1
 800b0c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b0c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b0ca:	ec41 0b18 	vmov	d8, r0, r1
 800b0ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	4640      	mov	r0, r8
 800b0d6:	4649      	mov	r1, r9
 800b0d8:	4614      	mov	r4, r2
 800b0da:	461d      	mov	r5, r3
 800b0dc:	f7f5 fa8c 	bl	80005f8 <__aeabi_dmul>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	4639      	mov	r1, r7
 800b0e8:	f7f5 f8ce 	bl	8000288 <__aeabi_dsub>
 800b0ec:	ec53 2b19 	vmov	r2, r3, d9
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	460f      	mov	r7, r1
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	f7f5 f8c6 	bl	8000288 <__aeabi_dsub>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4650      	mov	r0, sl
 800b102:	4659      	mov	r1, fp
 800b104:	f7f5 f8c0 	bl	8000288 <__aeabi_dsub>
 800b108:	4642      	mov	r2, r8
 800b10a:	464b      	mov	r3, r9
 800b10c:	f7f5 fa74 	bl	80005f8 <__aeabi_dmul>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4630      	mov	r0, r6
 800b116:	4639      	mov	r1, r7
 800b118:	f7f5 f8b6 	bl	8000288 <__aeabi_dsub>
 800b11c:	ec53 2b1a 	vmov	r2, r3, d10
 800b120:	f7f5 fa6a 	bl	80005f8 <__aeabi_dmul>
 800b124:	ec53 2b18 	vmov	r2, r3, d8
 800b128:	ec41 0b19 	vmov	d9, r0, r1
 800b12c:	ec51 0b18 	vmov	r0, r1, d8
 800b130:	f7f5 fa62 	bl	80005f8 <__aeabi_dmul>
 800b134:	a37c      	add	r3, pc, #496	; (adr r3, 800b328 <__ieee754_pow+0x708>)
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	4604      	mov	r4, r0
 800b13c:	460d      	mov	r5, r1
 800b13e:	f7f5 fa5b 	bl	80005f8 <__aeabi_dmul>
 800b142:	a37b      	add	r3, pc, #492	; (adr r3, 800b330 <__ieee754_pow+0x710>)
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	f7f5 f8a0 	bl	800028c <__adddf3>
 800b14c:	4622      	mov	r2, r4
 800b14e:	462b      	mov	r3, r5
 800b150:	f7f5 fa52 	bl	80005f8 <__aeabi_dmul>
 800b154:	a378      	add	r3, pc, #480	; (adr r3, 800b338 <__ieee754_pow+0x718>)
 800b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15a:	f7f5 f897 	bl	800028c <__adddf3>
 800b15e:	4622      	mov	r2, r4
 800b160:	462b      	mov	r3, r5
 800b162:	f7f5 fa49 	bl	80005f8 <__aeabi_dmul>
 800b166:	a376      	add	r3, pc, #472	; (adr r3, 800b340 <__ieee754_pow+0x720>)
 800b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16c:	f7f5 f88e 	bl	800028c <__adddf3>
 800b170:	4622      	mov	r2, r4
 800b172:	462b      	mov	r3, r5
 800b174:	f7f5 fa40 	bl	80005f8 <__aeabi_dmul>
 800b178:	a373      	add	r3, pc, #460	; (adr r3, 800b348 <__ieee754_pow+0x728>)
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	f7f5 f885 	bl	800028c <__adddf3>
 800b182:	4622      	mov	r2, r4
 800b184:	462b      	mov	r3, r5
 800b186:	f7f5 fa37 	bl	80005f8 <__aeabi_dmul>
 800b18a:	a371      	add	r3, pc, #452	; (adr r3, 800b350 <__ieee754_pow+0x730>)
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f7f5 f87c 	bl	800028c <__adddf3>
 800b194:	4622      	mov	r2, r4
 800b196:	4606      	mov	r6, r0
 800b198:	460f      	mov	r7, r1
 800b19a:	462b      	mov	r3, r5
 800b19c:	4620      	mov	r0, r4
 800b19e:	4629      	mov	r1, r5
 800b1a0:	f7f5 fa2a 	bl	80005f8 <__aeabi_dmul>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	f7f5 fa24 	bl	80005f8 <__aeabi_dmul>
 800b1b0:	4642      	mov	r2, r8
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	464b      	mov	r3, r9
 800b1b8:	ec51 0b18 	vmov	r0, r1, d8
 800b1bc:	f7f5 f866 	bl	800028c <__adddf3>
 800b1c0:	ec53 2b19 	vmov	r2, r3, d9
 800b1c4:	f7f5 fa18 	bl	80005f8 <__aeabi_dmul>
 800b1c8:	4622      	mov	r2, r4
 800b1ca:	462b      	mov	r3, r5
 800b1cc:	f7f5 f85e 	bl	800028c <__adddf3>
 800b1d0:	4642      	mov	r2, r8
 800b1d2:	4682      	mov	sl, r0
 800b1d4:	468b      	mov	fp, r1
 800b1d6:	464b      	mov	r3, r9
 800b1d8:	4640      	mov	r0, r8
 800b1da:	4649      	mov	r1, r9
 800b1dc:	f7f5 fa0c 	bl	80005f8 <__aeabi_dmul>
 800b1e0:	4b6b      	ldr	r3, [pc, #428]	; (800b390 <__ieee754_pow+0x770>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	460f      	mov	r7, r1
 800b1e8:	f7f5 f850 	bl	800028c <__adddf3>
 800b1ec:	4652      	mov	r2, sl
 800b1ee:	465b      	mov	r3, fp
 800b1f0:	f7f5 f84c 	bl	800028c <__adddf3>
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	460d      	mov	r5, r1
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4640      	mov	r0, r8
 800b200:	4649      	mov	r1, r9
 800b202:	f7f5 f9f9 	bl	80005f8 <__aeabi_dmul>
 800b206:	4b62      	ldr	r3, [pc, #392]	; (800b390 <__ieee754_pow+0x770>)
 800b208:	4680      	mov	r8, r0
 800b20a:	4689      	mov	r9, r1
 800b20c:	2200      	movs	r2, #0
 800b20e:	4620      	mov	r0, r4
 800b210:	4629      	mov	r1, r5
 800b212:	f7f5 f839 	bl	8000288 <__aeabi_dsub>
 800b216:	4632      	mov	r2, r6
 800b218:	463b      	mov	r3, r7
 800b21a:	f7f5 f835 	bl	8000288 <__aeabi_dsub>
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	4650      	mov	r0, sl
 800b224:	4659      	mov	r1, fp
 800b226:	f7f5 f82f 	bl	8000288 <__aeabi_dsub>
 800b22a:	ec53 2b18 	vmov	r2, r3, d8
 800b22e:	f7f5 f9e3 	bl	80005f8 <__aeabi_dmul>
 800b232:	4622      	mov	r2, r4
 800b234:	4606      	mov	r6, r0
 800b236:	460f      	mov	r7, r1
 800b238:	462b      	mov	r3, r5
 800b23a:	ec51 0b19 	vmov	r0, r1, d9
 800b23e:	f7f5 f9db 	bl	80005f8 <__aeabi_dmul>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	4630      	mov	r0, r6
 800b248:	4639      	mov	r1, r7
 800b24a:	f7f5 f81f 	bl	800028c <__adddf3>
 800b24e:	4606      	mov	r6, r0
 800b250:	460f      	mov	r7, r1
 800b252:	4602      	mov	r2, r0
 800b254:	460b      	mov	r3, r1
 800b256:	4640      	mov	r0, r8
 800b258:	4649      	mov	r1, r9
 800b25a:	f7f5 f817 	bl	800028c <__adddf3>
 800b25e:	a33e      	add	r3, pc, #248	; (adr r3, 800b358 <__ieee754_pow+0x738>)
 800b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b264:	2000      	movs	r0, #0
 800b266:	4604      	mov	r4, r0
 800b268:	460d      	mov	r5, r1
 800b26a:	f7f5 f9c5 	bl	80005f8 <__aeabi_dmul>
 800b26e:	4642      	mov	r2, r8
 800b270:	ec41 0b18 	vmov	d8, r0, r1
 800b274:	464b      	mov	r3, r9
 800b276:	4620      	mov	r0, r4
 800b278:	4629      	mov	r1, r5
 800b27a:	f7f5 f805 	bl	8000288 <__aeabi_dsub>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4630      	mov	r0, r6
 800b284:	4639      	mov	r1, r7
 800b286:	f7f4 ffff 	bl	8000288 <__aeabi_dsub>
 800b28a:	a335      	add	r3, pc, #212	; (adr r3, 800b360 <__ieee754_pow+0x740>)
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f7f5 f9b2 	bl	80005f8 <__aeabi_dmul>
 800b294:	a334      	add	r3, pc, #208	; (adr r3, 800b368 <__ieee754_pow+0x748>)
 800b296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29a:	4606      	mov	r6, r0
 800b29c:	460f      	mov	r7, r1
 800b29e:	4620      	mov	r0, r4
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	f7f5 f9a9 	bl	80005f8 <__aeabi_dmul>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	4639      	mov	r1, r7
 800b2ae:	f7f4 ffed 	bl	800028c <__adddf3>
 800b2b2:	9a07      	ldr	r2, [sp, #28]
 800b2b4:	4b37      	ldr	r3, [pc, #220]	; (800b394 <__ieee754_pow+0x774>)
 800b2b6:	4413      	add	r3, r2
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	f7f4 ffe6 	bl	800028c <__adddf3>
 800b2c0:	4682      	mov	sl, r0
 800b2c2:	9805      	ldr	r0, [sp, #20]
 800b2c4:	468b      	mov	fp, r1
 800b2c6:	f7f5 f92d 	bl	8000524 <__aeabi_i2d>
 800b2ca:	9a07      	ldr	r2, [sp, #28]
 800b2cc:	4b32      	ldr	r3, [pc, #200]	; (800b398 <__ieee754_pow+0x778>)
 800b2ce:	4413      	add	r3, r2
 800b2d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2d4:	4606      	mov	r6, r0
 800b2d6:	460f      	mov	r7, r1
 800b2d8:	4652      	mov	r2, sl
 800b2da:	465b      	mov	r3, fp
 800b2dc:	ec51 0b18 	vmov	r0, r1, d8
 800b2e0:	f7f4 ffd4 	bl	800028c <__adddf3>
 800b2e4:	4642      	mov	r2, r8
 800b2e6:	464b      	mov	r3, r9
 800b2e8:	f7f4 ffd0 	bl	800028c <__adddf3>
 800b2ec:	4632      	mov	r2, r6
 800b2ee:	463b      	mov	r3, r7
 800b2f0:	f7f4 ffcc 	bl	800028c <__adddf3>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	4632      	mov	r2, r6
 800b2f8:	463b      	mov	r3, r7
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	460d      	mov	r5, r1
 800b2fe:	f7f4 ffc3 	bl	8000288 <__aeabi_dsub>
 800b302:	4642      	mov	r2, r8
 800b304:	464b      	mov	r3, r9
 800b306:	f7f4 ffbf 	bl	8000288 <__aeabi_dsub>
 800b30a:	ec53 2b18 	vmov	r2, r3, d8
 800b30e:	f7f4 ffbb 	bl	8000288 <__aeabi_dsub>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	4650      	mov	r0, sl
 800b318:	4659      	mov	r1, fp
 800b31a:	e610      	b.n	800af3e <__ieee754_pow+0x31e>
 800b31c:	2401      	movs	r4, #1
 800b31e:	e6a1      	b.n	800b064 <__ieee754_pow+0x444>
 800b320:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b370 <__ieee754_pow+0x750>
 800b324:	e617      	b.n	800af56 <__ieee754_pow+0x336>
 800b326:	bf00      	nop
 800b328:	4a454eef 	.word	0x4a454eef
 800b32c:	3fca7e28 	.word	0x3fca7e28
 800b330:	93c9db65 	.word	0x93c9db65
 800b334:	3fcd864a 	.word	0x3fcd864a
 800b338:	a91d4101 	.word	0xa91d4101
 800b33c:	3fd17460 	.word	0x3fd17460
 800b340:	518f264d 	.word	0x518f264d
 800b344:	3fd55555 	.word	0x3fd55555
 800b348:	db6fabff 	.word	0xdb6fabff
 800b34c:	3fdb6db6 	.word	0x3fdb6db6
 800b350:	33333303 	.word	0x33333303
 800b354:	3fe33333 	.word	0x3fe33333
 800b358:	e0000000 	.word	0xe0000000
 800b35c:	3feec709 	.word	0x3feec709
 800b360:	dc3a03fd 	.word	0xdc3a03fd
 800b364:	3feec709 	.word	0x3feec709
 800b368:	145b01f5 	.word	0x145b01f5
 800b36c:	be3e2fe0 	.word	0xbe3e2fe0
 800b370:	00000000 	.word	0x00000000
 800b374:	3ff00000 	.word	0x3ff00000
 800b378:	7ff00000 	.word	0x7ff00000
 800b37c:	43400000 	.word	0x43400000
 800b380:	0003988e 	.word	0x0003988e
 800b384:	000bb679 	.word	0x000bb679
 800b388:	0800eda8 	.word	0x0800eda8
 800b38c:	3ff00000 	.word	0x3ff00000
 800b390:	40080000 	.word	0x40080000
 800b394:	0800edc8 	.word	0x0800edc8
 800b398:	0800edb8 	.word	0x0800edb8
 800b39c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b674 <__ieee754_pow+0xa54>)
 800b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	f7f4 ff71 	bl	800028c <__adddf3>
 800b3aa:	4622      	mov	r2, r4
 800b3ac:	ec41 0b1a 	vmov	d10, r0, r1
 800b3b0:	462b      	mov	r3, r5
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	f7f4 ff67 	bl	8000288 <__aeabi_dsub>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	460b      	mov	r3, r1
 800b3be:	ec51 0b1a 	vmov	r0, r1, d10
 800b3c2:	f7f5 fba9 	bl	8000b18 <__aeabi_dcmpgt>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	f47f ae04 	bne.w	800afd4 <__ieee754_pow+0x3b4>
 800b3cc:	4aa4      	ldr	r2, [pc, #656]	; (800b660 <__ieee754_pow+0xa40>)
 800b3ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	f340 8108 	ble.w	800b5e8 <__ieee754_pow+0x9c8>
 800b3d8:	151b      	asrs	r3, r3, #20
 800b3da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b3de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b3e2:	fa4a f303 	asr.w	r3, sl, r3
 800b3e6:	445b      	add	r3, fp
 800b3e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b3ec:	4e9d      	ldr	r6, [pc, #628]	; (800b664 <__ieee754_pow+0xa44>)
 800b3ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b3f2:	4116      	asrs	r6, r2
 800b3f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	ea23 0106 	bic.w	r1, r3, r6
 800b3fe:	f1c2 0214 	rsb	r2, r2, #20
 800b402:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b406:	fa4a fa02 	asr.w	sl, sl, r2
 800b40a:	f1bb 0f00 	cmp.w	fp, #0
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	4620      	mov	r0, r4
 800b414:	4629      	mov	r1, r5
 800b416:	bfb8      	it	lt
 800b418:	f1ca 0a00 	rsblt	sl, sl, #0
 800b41c:	f7f4 ff34 	bl	8000288 <__aeabi_dsub>
 800b420:	ec41 0b19 	vmov	d9, r0, r1
 800b424:	4642      	mov	r2, r8
 800b426:	464b      	mov	r3, r9
 800b428:	ec51 0b19 	vmov	r0, r1, d9
 800b42c:	f7f4 ff2e 	bl	800028c <__adddf3>
 800b430:	a37b      	add	r3, pc, #492	; (adr r3, 800b620 <__ieee754_pow+0xa00>)
 800b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b436:	2000      	movs	r0, #0
 800b438:	4604      	mov	r4, r0
 800b43a:	460d      	mov	r5, r1
 800b43c:	f7f5 f8dc 	bl	80005f8 <__aeabi_dmul>
 800b440:	ec53 2b19 	vmov	r2, r3, d9
 800b444:	4606      	mov	r6, r0
 800b446:	460f      	mov	r7, r1
 800b448:	4620      	mov	r0, r4
 800b44a:	4629      	mov	r1, r5
 800b44c:	f7f4 ff1c 	bl	8000288 <__aeabi_dsub>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4640      	mov	r0, r8
 800b456:	4649      	mov	r1, r9
 800b458:	f7f4 ff16 	bl	8000288 <__aeabi_dsub>
 800b45c:	a372      	add	r3, pc, #456	; (adr r3, 800b628 <__ieee754_pow+0xa08>)
 800b45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b462:	f7f5 f8c9 	bl	80005f8 <__aeabi_dmul>
 800b466:	a372      	add	r3, pc, #456	; (adr r3, 800b630 <__ieee754_pow+0xa10>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	4680      	mov	r8, r0
 800b46e:	4689      	mov	r9, r1
 800b470:	4620      	mov	r0, r4
 800b472:	4629      	mov	r1, r5
 800b474:	f7f5 f8c0 	bl	80005f8 <__aeabi_dmul>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	4640      	mov	r0, r8
 800b47e:	4649      	mov	r1, r9
 800b480:	f7f4 ff04 	bl	800028c <__adddf3>
 800b484:	4604      	mov	r4, r0
 800b486:	460d      	mov	r5, r1
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4630      	mov	r0, r6
 800b48e:	4639      	mov	r1, r7
 800b490:	f7f4 fefc 	bl	800028c <__adddf3>
 800b494:	4632      	mov	r2, r6
 800b496:	463b      	mov	r3, r7
 800b498:	4680      	mov	r8, r0
 800b49a:	4689      	mov	r9, r1
 800b49c:	f7f4 fef4 	bl	8000288 <__aeabi_dsub>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	f7f4 feee 	bl	8000288 <__aeabi_dsub>
 800b4ac:	4642      	mov	r2, r8
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	460f      	mov	r7, r1
 800b4b2:	464b      	mov	r3, r9
 800b4b4:	4640      	mov	r0, r8
 800b4b6:	4649      	mov	r1, r9
 800b4b8:	f7f5 f89e 	bl	80005f8 <__aeabi_dmul>
 800b4bc:	a35e      	add	r3, pc, #376	; (adr r3, 800b638 <__ieee754_pow+0xa18>)
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	460d      	mov	r5, r1
 800b4c6:	f7f5 f897 	bl	80005f8 <__aeabi_dmul>
 800b4ca:	a35d      	add	r3, pc, #372	; (adr r3, 800b640 <__ieee754_pow+0xa20>)
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f7f4 feda 	bl	8000288 <__aeabi_dsub>
 800b4d4:	4622      	mov	r2, r4
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	f7f5 f88e 	bl	80005f8 <__aeabi_dmul>
 800b4dc:	a35a      	add	r3, pc, #360	; (adr r3, 800b648 <__ieee754_pow+0xa28>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	f7f4 fed3 	bl	800028c <__adddf3>
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	f7f5 f885 	bl	80005f8 <__aeabi_dmul>
 800b4ee:	a358      	add	r3, pc, #352	; (adr r3, 800b650 <__ieee754_pow+0xa30>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	f7f4 fec8 	bl	8000288 <__aeabi_dsub>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	f7f5 f87c 	bl	80005f8 <__aeabi_dmul>
 800b500:	a355      	add	r3, pc, #340	; (adr r3, 800b658 <__ieee754_pow+0xa38>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f7f4 fec1 	bl	800028c <__adddf3>
 800b50a:	4622      	mov	r2, r4
 800b50c:	462b      	mov	r3, r5
 800b50e:	f7f5 f873 	bl	80005f8 <__aeabi_dmul>
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	4640      	mov	r0, r8
 800b518:	4649      	mov	r1, r9
 800b51a:	f7f4 feb5 	bl	8000288 <__aeabi_dsub>
 800b51e:	4604      	mov	r4, r0
 800b520:	460d      	mov	r5, r1
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	4640      	mov	r0, r8
 800b528:	4649      	mov	r1, r9
 800b52a:	f7f5 f865 	bl	80005f8 <__aeabi_dmul>
 800b52e:	2200      	movs	r2, #0
 800b530:	ec41 0b19 	vmov	d9, r0, r1
 800b534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b538:	4620      	mov	r0, r4
 800b53a:	4629      	mov	r1, r5
 800b53c:	f7f4 fea4 	bl	8000288 <__aeabi_dsub>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	ec51 0b19 	vmov	r0, r1, d9
 800b548:	f7f5 f980 	bl	800084c <__aeabi_ddiv>
 800b54c:	4632      	mov	r2, r6
 800b54e:	4604      	mov	r4, r0
 800b550:	460d      	mov	r5, r1
 800b552:	463b      	mov	r3, r7
 800b554:	4640      	mov	r0, r8
 800b556:	4649      	mov	r1, r9
 800b558:	f7f5 f84e 	bl	80005f8 <__aeabi_dmul>
 800b55c:	4632      	mov	r2, r6
 800b55e:	463b      	mov	r3, r7
 800b560:	f7f4 fe94 	bl	800028c <__adddf3>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	4620      	mov	r0, r4
 800b56a:	4629      	mov	r1, r5
 800b56c:	f7f4 fe8c 	bl	8000288 <__aeabi_dsub>
 800b570:	4642      	mov	r2, r8
 800b572:	464b      	mov	r3, r9
 800b574:	f7f4 fe88 	bl	8000288 <__aeabi_dsub>
 800b578:	460b      	mov	r3, r1
 800b57a:	4602      	mov	r2, r0
 800b57c:	493a      	ldr	r1, [pc, #232]	; (800b668 <__ieee754_pow+0xa48>)
 800b57e:	2000      	movs	r0, #0
 800b580:	f7f4 fe82 	bl	8000288 <__aeabi_dsub>
 800b584:	ec41 0b10 	vmov	d0, r0, r1
 800b588:	ee10 3a90 	vmov	r3, s1
 800b58c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b594:	da2b      	bge.n	800b5ee <__ieee754_pow+0x9ce>
 800b596:	4650      	mov	r0, sl
 800b598:	f000 f966 	bl	800b868 <scalbn>
 800b59c:	ec51 0b10 	vmov	r0, r1, d0
 800b5a0:	ec53 2b18 	vmov	r2, r3, d8
 800b5a4:	f7ff bbed 	b.w	800ad82 <__ieee754_pow+0x162>
 800b5a8:	4b30      	ldr	r3, [pc, #192]	; (800b66c <__ieee754_pow+0xa4c>)
 800b5aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b5ae:	429e      	cmp	r6, r3
 800b5b0:	f77f af0c 	ble.w	800b3cc <__ieee754_pow+0x7ac>
 800b5b4:	4b2e      	ldr	r3, [pc, #184]	; (800b670 <__ieee754_pow+0xa50>)
 800b5b6:	440b      	add	r3, r1
 800b5b8:	4303      	orrs	r3, r0
 800b5ba:	d009      	beq.n	800b5d0 <__ieee754_pow+0x9b0>
 800b5bc:	ec51 0b18 	vmov	r0, r1, d8
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f7f5 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800b5c8:	3800      	subs	r0, #0
 800b5ca:	bf18      	it	ne
 800b5cc:	2001      	movne	r0, #1
 800b5ce:	e447      	b.n	800ae60 <__ieee754_pow+0x240>
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	462b      	mov	r3, r5
 800b5d4:	f7f4 fe58 	bl	8000288 <__aeabi_dsub>
 800b5d8:	4642      	mov	r2, r8
 800b5da:	464b      	mov	r3, r9
 800b5dc:	f7f5 fa92 	bl	8000b04 <__aeabi_dcmpge>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f43f aef3 	beq.w	800b3cc <__ieee754_pow+0x7ac>
 800b5e6:	e7e9      	b.n	800b5bc <__ieee754_pow+0x99c>
 800b5e8:	f04f 0a00 	mov.w	sl, #0
 800b5ec:	e71a      	b.n	800b424 <__ieee754_pow+0x804>
 800b5ee:	ec51 0b10 	vmov	r0, r1, d0
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	e7d4      	b.n	800b5a0 <__ieee754_pow+0x980>
 800b5f6:	491c      	ldr	r1, [pc, #112]	; (800b668 <__ieee754_pow+0xa48>)
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	f7ff bb30 	b.w	800ac5e <__ieee754_pow+0x3e>
 800b5fe:	2000      	movs	r0, #0
 800b600:	2100      	movs	r1, #0
 800b602:	f7ff bb2c 	b.w	800ac5e <__ieee754_pow+0x3e>
 800b606:	4630      	mov	r0, r6
 800b608:	4639      	mov	r1, r7
 800b60a:	f7ff bb28 	b.w	800ac5e <__ieee754_pow+0x3e>
 800b60e:	9204      	str	r2, [sp, #16]
 800b610:	f7ff bb7a 	b.w	800ad08 <__ieee754_pow+0xe8>
 800b614:	2300      	movs	r3, #0
 800b616:	f7ff bb64 	b.w	800ace2 <__ieee754_pow+0xc2>
 800b61a:	bf00      	nop
 800b61c:	f3af 8000 	nop.w
 800b620:	00000000 	.word	0x00000000
 800b624:	3fe62e43 	.word	0x3fe62e43
 800b628:	fefa39ef 	.word	0xfefa39ef
 800b62c:	3fe62e42 	.word	0x3fe62e42
 800b630:	0ca86c39 	.word	0x0ca86c39
 800b634:	be205c61 	.word	0xbe205c61
 800b638:	72bea4d0 	.word	0x72bea4d0
 800b63c:	3e663769 	.word	0x3e663769
 800b640:	c5d26bf1 	.word	0xc5d26bf1
 800b644:	3ebbbd41 	.word	0x3ebbbd41
 800b648:	af25de2c 	.word	0xaf25de2c
 800b64c:	3f11566a 	.word	0x3f11566a
 800b650:	16bebd93 	.word	0x16bebd93
 800b654:	3f66c16c 	.word	0x3f66c16c
 800b658:	5555553e 	.word	0x5555553e
 800b65c:	3fc55555 	.word	0x3fc55555
 800b660:	3fe00000 	.word	0x3fe00000
 800b664:	000fffff 	.word	0x000fffff
 800b668:	3ff00000 	.word	0x3ff00000
 800b66c:	4090cbff 	.word	0x4090cbff
 800b670:	3f6f3400 	.word	0x3f6f3400
 800b674:	652b82fe 	.word	0x652b82fe
 800b678:	3c971547 	.word	0x3c971547

0800b67c <__ieee754_sqrt>:
 800b67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b680:	ec55 4b10 	vmov	r4, r5, d0
 800b684:	4e55      	ldr	r6, [pc, #340]	; (800b7dc <__ieee754_sqrt+0x160>)
 800b686:	43ae      	bics	r6, r5
 800b688:	ee10 0a10 	vmov	r0, s0
 800b68c:	ee10 3a10 	vmov	r3, s0
 800b690:	462a      	mov	r2, r5
 800b692:	4629      	mov	r1, r5
 800b694:	d110      	bne.n	800b6b8 <__ieee754_sqrt+0x3c>
 800b696:	ee10 2a10 	vmov	r2, s0
 800b69a:	462b      	mov	r3, r5
 800b69c:	f7f4 ffac 	bl	80005f8 <__aeabi_dmul>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	f7f4 fdf0 	bl	800028c <__adddf3>
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	460d      	mov	r5, r1
 800b6b0:	ec45 4b10 	vmov	d0, r4, r5
 800b6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b8:	2d00      	cmp	r5, #0
 800b6ba:	dc10      	bgt.n	800b6de <__ieee754_sqrt+0x62>
 800b6bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b6c0:	4330      	orrs	r0, r6
 800b6c2:	d0f5      	beq.n	800b6b0 <__ieee754_sqrt+0x34>
 800b6c4:	b15d      	cbz	r5, 800b6de <__ieee754_sqrt+0x62>
 800b6c6:	ee10 2a10 	vmov	r2, s0
 800b6ca:	462b      	mov	r3, r5
 800b6cc:	ee10 0a10 	vmov	r0, s0
 800b6d0:	f7f4 fdda 	bl	8000288 <__aeabi_dsub>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	f7f5 f8b8 	bl	800084c <__aeabi_ddiv>
 800b6dc:	e7e6      	b.n	800b6ac <__ieee754_sqrt+0x30>
 800b6de:	1512      	asrs	r2, r2, #20
 800b6e0:	d074      	beq.n	800b7cc <__ieee754_sqrt+0x150>
 800b6e2:	07d4      	lsls	r4, r2, #31
 800b6e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b6e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b6ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b6f0:	bf5e      	ittt	pl
 800b6f2:	0fda      	lsrpl	r2, r3, #31
 800b6f4:	005b      	lslpl	r3, r3, #1
 800b6f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b6fa:	2400      	movs	r4, #0
 800b6fc:	0fda      	lsrs	r2, r3, #31
 800b6fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b702:	107f      	asrs	r7, r7, #1
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	2516      	movs	r5, #22
 800b708:	4620      	mov	r0, r4
 800b70a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b70e:	1886      	adds	r6, r0, r2
 800b710:	428e      	cmp	r6, r1
 800b712:	bfde      	ittt	le
 800b714:	1b89      	suble	r1, r1, r6
 800b716:	18b0      	addle	r0, r6, r2
 800b718:	18a4      	addle	r4, r4, r2
 800b71a:	0049      	lsls	r1, r1, #1
 800b71c:	3d01      	subs	r5, #1
 800b71e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b722:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b726:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b72a:	d1f0      	bne.n	800b70e <__ieee754_sqrt+0x92>
 800b72c:	462a      	mov	r2, r5
 800b72e:	f04f 0e20 	mov.w	lr, #32
 800b732:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b736:	4281      	cmp	r1, r0
 800b738:	eb06 0c05 	add.w	ip, r6, r5
 800b73c:	dc02      	bgt.n	800b744 <__ieee754_sqrt+0xc8>
 800b73e:	d113      	bne.n	800b768 <__ieee754_sqrt+0xec>
 800b740:	459c      	cmp	ip, r3
 800b742:	d811      	bhi.n	800b768 <__ieee754_sqrt+0xec>
 800b744:	f1bc 0f00 	cmp.w	ip, #0
 800b748:	eb0c 0506 	add.w	r5, ip, r6
 800b74c:	da43      	bge.n	800b7d6 <__ieee754_sqrt+0x15a>
 800b74e:	2d00      	cmp	r5, #0
 800b750:	db41      	blt.n	800b7d6 <__ieee754_sqrt+0x15a>
 800b752:	f100 0801 	add.w	r8, r0, #1
 800b756:	1a09      	subs	r1, r1, r0
 800b758:	459c      	cmp	ip, r3
 800b75a:	bf88      	it	hi
 800b75c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b760:	eba3 030c 	sub.w	r3, r3, ip
 800b764:	4432      	add	r2, r6
 800b766:	4640      	mov	r0, r8
 800b768:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b76c:	f1be 0e01 	subs.w	lr, lr, #1
 800b770:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b774:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b778:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b77c:	d1db      	bne.n	800b736 <__ieee754_sqrt+0xba>
 800b77e:	430b      	orrs	r3, r1
 800b780:	d006      	beq.n	800b790 <__ieee754_sqrt+0x114>
 800b782:	1c50      	adds	r0, r2, #1
 800b784:	bf13      	iteet	ne
 800b786:	3201      	addne	r2, #1
 800b788:	3401      	addeq	r4, #1
 800b78a:	4672      	moveq	r2, lr
 800b78c:	f022 0201 	bicne.w	r2, r2, #1
 800b790:	1063      	asrs	r3, r4, #1
 800b792:	0852      	lsrs	r2, r2, #1
 800b794:	07e1      	lsls	r1, r4, #31
 800b796:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b79a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b79e:	bf48      	it	mi
 800b7a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b7a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b7a8:	4614      	mov	r4, r2
 800b7aa:	e781      	b.n	800b6b0 <__ieee754_sqrt+0x34>
 800b7ac:	0ad9      	lsrs	r1, r3, #11
 800b7ae:	3815      	subs	r0, #21
 800b7b0:	055b      	lsls	r3, r3, #21
 800b7b2:	2900      	cmp	r1, #0
 800b7b4:	d0fa      	beq.n	800b7ac <__ieee754_sqrt+0x130>
 800b7b6:	02cd      	lsls	r5, r1, #11
 800b7b8:	d50a      	bpl.n	800b7d0 <__ieee754_sqrt+0x154>
 800b7ba:	f1c2 0420 	rsb	r4, r2, #32
 800b7be:	fa23 f404 	lsr.w	r4, r3, r4
 800b7c2:	1e55      	subs	r5, r2, #1
 800b7c4:	4093      	lsls	r3, r2
 800b7c6:	4321      	orrs	r1, r4
 800b7c8:	1b42      	subs	r2, r0, r5
 800b7ca:	e78a      	b.n	800b6e2 <__ieee754_sqrt+0x66>
 800b7cc:	4610      	mov	r0, r2
 800b7ce:	e7f0      	b.n	800b7b2 <__ieee754_sqrt+0x136>
 800b7d0:	0049      	lsls	r1, r1, #1
 800b7d2:	3201      	adds	r2, #1
 800b7d4:	e7ef      	b.n	800b7b6 <__ieee754_sqrt+0x13a>
 800b7d6:	4680      	mov	r8, r0
 800b7d8:	e7bd      	b.n	800b756 <__ieee754_sqrt+0xda>
 800b7da:	bf00      	nop
 800b7dc:	7ff00000 	.word	0x7ff00000

0800b7e0 <with_errno>:
 800b7e0:	b570      	push	{r4, r5, r6, lr}
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	460d      	mov	r5, r1
 800b7e6:	4616      	mov	r6, r2
 800b7e8:	f7fa fcc6 	bl	8006178 <__errno>
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	6006      	str	r6, [r0, #0]
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}

0800b7f4 <xflow>:
 800b7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7f6:	4614      	mov	r4, r2
 800b7f8:	461d      	mov	r5, r3
 800b7fa:	b108      	cbz	r0, 800b800 <xflow+0xc>
 800b7fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b800:	e9cd 2300 	strd	r2, r3, [sp]
 800b804:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b808:	4620      	mov	r0, r4
 800b80a:	4629      	mov	r1, r5
 800b80c:	f7f4 fef4 	bl	80005f8 <__aeabi_dmul>
 800b810:	2222      	movs	r2, #34	; 0x22
 800b812:	b003      	add	sp, #12
 800b814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b818:	f7ff bfe2 	b.w	800b7e0 <with_errno>

0800b81c <__math_uflow>:
 800b81c:	b508      	push	{r3, lr}
 800b81e:	2200      	movs	r2, #0
 800b820:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b824:	f7ff ffe6 	bl	800b7f4 <xflow>
 800b828:	ec41 0b10 	vmov	d0, r0, r1
 800b82c:	bd08      	pop	{r3, pc}

0800b82e <__math_oflow>:
 800b82e:	b508      	push	{r3, lr}
 800b830:	2200      	movs	r2, #0
 800b832:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b836:	f7ff ffdd 	bl	800b7f4 <xflow>
 800b83a:	ec41 0b10 	vmov	d0, r0, r1
 800b83e:	bd08      	pop	{r3, pc}

0800b840 <fabs>:
 800b840:	ec51 0b10 	vmov	r0, r1, d0
 800b844:	ee10 2a10 	vmov	r2, s0
 800b848:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b84c:	ec43 2b10 	vmov	d0, r2, r3
 800b850:	4770      	bx	lr

0800b852 <finite>:
 800b852:	b082      	sub	sp, #8
 800b854:	ed8d 0b00 	vstr	d0, [sp]
 800b858:	9801      	ldr	r0, [sp, #4]
 800b85a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b85e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b862:	0fc0      	lsrs	r0, r0, #31
 800b864:	b002      	add	sp, #8
 800b866:	4770      	bx	lr

0800b868 <scalbn>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	ec55 4b10 	vmov	r4, r5, d0
 800b86e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b872:	4606      	mov	r6, r0
 800b874:	462b      	mov	r3, r5
 800b876:	b99a      	cbnz	r2, 800b8a0 <scalbn+0x38>
 800b878:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b87c:	4323      	orrs	r3, r4
 800b87e:	d036      	beq.n	800b8ee <scalbn+0x86>
 800b880:	4b39      	ldr	r3, [pc, #228]	; (800b968 <scalbn+0x100>)
 800b882:	4629      	mov	r1, r5
 800b884:	ee10 0a10 	vmov	r0, s0
 800b888:	2200      	movs	r2, #0
 800b88a:	f7f4 feb5 	bl	80005f8 <__aeabi_dmul>
 800b88e:	4b37      	ldr	r3, [pc, #220]	; (800b96c <scalbn+0x104>)
 800b890:	429e      	cmp	r6, r3
 800b892:	4604      	mov	r4, r0
 800b894:	460d      	mov	r5, r1
 800b896:	da10      	bge.n	800b8ba <scalbn+0x52>
 800b898:	a32b      	add	r3, pc, #172	; (adr r3, 800b948 <scalbn+0xe0>)
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	e03a      	b.n	800b916 <scalbn+0xae>
 800b8a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b8a4:	428a      	cmp	r2, r1
 800b8a6:	d10c      	bne.n	800b8c2 <scalbn+0x5a>
 800b8a8:	ee10 2a10 	vmov	r2, s0
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	f7f4 fcec 	bl	800028c <__adddf3>
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	460d      	mov	r5, r1
 800b8b8:	e019      	b.n	800b8ee <scalbn+0x86>
 800b8ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b8be:	460b      	mov	r3, r1
 800b8c0:	3a36      	subs	r2, #54	; 0x36
 800b8c2:	4432      	add	r2, r6
 800b8c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b8c8:	428a      	cmp	r2, r1
 800b8ca:	dd08      	ble.n	800b8de <scalbn+0x76>
 800b8cc:	2d00      	cmp	r5, #0
 800b8ce:	a120      	add	r1, pc, #128	; (adr r1, 800b950 <scalbn+0xe8>)
 800b8d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8d4:	da1c      	bge.n	800b910 <scalbn+0xa8>
 800b8d6:	a120      	add	r1, pc, #128	; (adr r1, 800b958 <scalbn+0xf0>)
 800b8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8dc:	e018      	b.n	800b910 <scalbn+0xa8>
 800b8de:	2a00      	cmp	r2, #0
 800b8e0:	dd08      	ble.n	800b8f4 <scalbn+0x8c>
 800b8e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b8ee:	ec45 4b10 	vmov	d0, r4, r5
 800b8f2:	bd70      	pop	{r4, r5, r6, pc}
 800b8f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b8f8:	da19      	bge.n	800b92e <scalbn+0xc6>
 800b8fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b8fe:	429e      	cmp	r6, r3
 800b900:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b904:	dd0a      	ble.n	800b91c <scalbn+0xb4>
 800b906:	a112      	add	r1, pc, #72	; (adr r1, 800b950 <scalbn+0xe8>)
 800b908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1e2      	bne.n	800b8d6 <scalbn+0x6e>
 800b910:	a30f      	add	r3, pc, #60	; (adr r3, 800b950 <scalbn+0xe8>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	f7f4 fe6f 	bl	80005f8 <__aeabi_dmul>
 800b91a:	e7cb      	b.n	800b8b4 <scalbn+0x4c>
 800b91c:	a10a      	add	r1, pc, #40	; (adr r1, 800b948 <scalbn+0xe0>)
 800b91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d0b8      	beq.n	800b898 <scalbn+0x30>
 800b926:	a10e      	add	r1, pc, #56	; (adr r1, 800b960 <scalbn+0xf8>)
 800b928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b92c:	e7b4      	b.n	800b898 <scalbn+0x30>
 800b92e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b932:	3236      	adds	r2, #54	; 0x36
 800b934:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b938:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b93c:	4620      	mov	r0, r4
 800b93e:	4b0c      	ldr	r3, [pc, #48]	; (800b970 <scalbn+0x108>)
 800b940:	2200      	movs	r2, #0
 800b942:	e7e8      	b.n	800b916 <scalbn+0xae>
 800b944:	f3af 8000 	nop.w
 800b948:	c2f8f359 	.word	0xc2f8f359
 800b94c:	01a56e1f 	.word	0x01a56e1f
 800b950:	8800759c 	.word	0x8800759c
 800b954:	7e37e43c 	.word	0x7e37e43c
 800b958:	8800759c 	.word	0x8800759c
 800b95c:	fe37e43c 	.word	0xfe37e43c
 800b960:	c2f8f359 	.word	0xc2f8f359
 800b964:	81a56e1f 	.word	0x81a56e1f
 800b968:	43500000 	.word	0x43500000
 800b96c:	ffff3cb0 	.word	0xffff3cb0
 800b970:	3c900000 	.word	0x3c900000

0800b974 <_kill>:
 800b974:	4b02      	ldr	r3, [pc, #8]	; (800b980 <_kill+0xc>)
 800b976:	2258      	movs	r2, #88	; 0x58
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	f04f 30ff 	mov.w	r0, #4294967295
 800b97e:	4770      	bx	lr
 800b980:	20000914 	.word	0x20000914

0800b984 <_exit>:
 800b984:	e7fe      	b.n	800b984 <_exit>
	...

0800b988 <_init>:
 800b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98a:	bf00      	nop
 800b98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98e:	bc08      	pop	{r3}
 800b990:	469e      	mov	lr, r3
 800b992:	4770      	bx	lr

0800b994 <_fini>:
 800b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b996:	bf00      	nop
 800b998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99a:	bc08      	pop	{r3}
 800b99c:	469e      	mov	lr, r3
 800b99e:	4770      	bx	lr
